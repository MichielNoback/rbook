[{"path":"index.html","id":"getting-started","chapter":"1 Getting started","heading":"1 Getting started","text":"","code":""},{"path":"index.html","id":"introduction","chapter":"1 Getting started","heading":"1.1 Introduction","text":"Welcome, landed ebook accompanying R courses Life Science students.reading , check whether ready work R computer.\ninstalled R, RStudio optionally Tinytech Latex alternative OS like create pdf documents RMarkdown.Copyright © Michiel Noback, Hanze University Applied Science, Groningen, Netherlands","code":""},{"path":"index.html","id":"shortcuts","chapter":"1 Getting started","heading":"1.2 RStudio Shortcuts","text":"best keyboard shortcuts RStudio:ctr + 1 go code editorctr + 2 go consolectr + alt + insert code chunk (RMarkdown)ctr + enter run current linectr + shift + k knit current documentctr + alt + c run current code chunkctr + shift + o source current document","code":""},{"path":"toolbox.html","id":"toolbox","chapter":"2 The toolbox","heading":"2 The toolbox","text":"","code":""},{"path":"toolbox.html","id":"embarking-on-data-science","chapter":"2 The toolbox","heading":"2.1 Embarking on Data Science","text":"picture represents data science 1918: probably tool clerk day generate figure.disregarding time investment: data science. collect data (case, Influenza mortality), look patterns try find underlying mechanisms may explain patterns (Age, Gender, Marital Status).(source)","code":""},{"path":"toolbox.html","id":"why-do-statistical-programming","chapter":"2 The toolbox","heading":"Why do statistical programming?","text":"Since ’re life science student -target audience least-, probably worked Excel SPSS time. ever wonderedWhy exact series mouse clicks ? efficient way?can describe work reproducible series mouse clicks?, R may next favorite data analysis tool.\ntakes little effort first, get hang never create plot Excel .R - programming language,Redoing analysis generating report minor adjustments breezeThe analysis central, output. guarantees complete reproducibility","code":""},{"path":"toolbox.html","id":"overview-of-the-toolbox","chapter":"2 The toolbox","heading":"2.2 Overview of the toolbox","text":"chapter introduce toolbox serve well data quests.\nconsists ofThe R programming language built-functionalityThe RStudio Integrated Development Environment (IDE)R Markdown documenting reporting tool","code":""},{"path":"toolbox.html","id":"tool-1-the-r-programming-language","chapter":"2 The toolbox","heading":"Tool 1: The R programming language","text":"Nobody likes pay computer tools. Fortunately, R completely free. Moreover, completely open source. course one main reasons popularity; statistical tools free sometimes downright expensive.\nBesides free nature, R popular interactive mode. call read–evaluate–print loop: REPL. means don’t need write programs run code. simply type command console, press enter immediately get result line .stated , store analyses code, repeating analyses -possibly new data changed settings- easy.\nOne personal favorite features R supports “literate programming” creating presentations (one!) publications (reports, papers etc). Pdf documents, Microsoft Word documents, web pages (html) e-books possible outputs single R Markdown master document.Finally, R advanced embedded graphical support. means graphical output (plot) easy generate textual output! said, base plotting system R considered deprecated used quick inspections. de facto standard ggplot2 plotting library.figures whet appetite. probably able create end course.\nFigure 2.1: facetplot - multiple similar plots split single nominal ordinal variable\n\nFigure 2.2: polar plot - dimensions normal 2d x y\ncustom jitter visualization","code":""},{"path":"toolbox.html","id":"tool-2-rstudio-as-development-environment","chapter":"2 The toolbox","heading":"Tool 2: RStudio as development environment","text":"RStudio logoRStudio -called Integrated Development Environment. means “Swiss Multitool” programming. , manage run code, files, documentation language (help pages), building different output formats.\nworkbench several panels looks like run application.primarily work 4 panels workbench:Code editor write scripts R Markdown documents: text files code want execute onceR console execute lines code one oneEnvironment History See data memory, done farPlots, Help & FilesYou use console basic calculations, try pieces code, develop function, load scripts (code editor) memory. hand, code editor used work code life span longer minutes: analyses may want repeat, develop form scripts R Markdown documents.\ncode editor supports many file types viewing editing: regular text, structured datafiles (text, csv, data files), scripts (programs), analytical notebooks (R Markdown).nice code editor regular text editors Notepad, Wordpad, TextEdit, knows different file types constituting elements helps read, write (auto-complete, error alerts), scan organize displaying elements using coloring, font types visual aids.piece code, plain text file, two different editors. First plain text Mac TextEdit app next RStudio code editor:code TextEditexact file RStudio editorIt clearly visible code elements, numeric data character data within code.","code":""},{"path":"toolbox.html","id":"tool-3-r-markdown","chapter":"2 The toolbox","heading":"Tool 3: R Markdown","text":"Using R Markdown can combine regular text figures embedded R code executed generate final document. call literate programming.\ncan use create reports word, pdf web (html), presentations (pdf web) even eBooks websites. entire eBook written R Markdown!Markdown , just like language web, html, markup language. Markup means use textual elements indicate structure instead content. R extension Markdown, R Markdown, simply Markdown embedded pieces R code. Consider piece Markdown:result snippet, converted html, top current paragraph reading.piece R code call code chunk plots random data scatter plot. RStudio piece R code within (current) R Markdown document looks like :\nEvery code chunk consists two parts; header body. header tells conversion engine (knitr) deal code within chunk, output.\ncase, header {r simple-scatter-demo-1, fig.asp=0.6, .width='80%', fig.align='center', fig.caption='simple scatter plot'}header specifies quite things. First, programming language (r) label, “name”, chunk (simple-scatter-demo-1). Next, several aspects generated plot specified: aspect ratio, relative width, alignment page figure caption. programming language required .Next, knit (translate) document web format results piece , together output, scatter plot.\nFigure 2.3: simple scatter plot\nR Markdown translated html, markup language web, processing occurs. can also embed html code elements within outside scope course.\nbasic elements can use Markdown documents.RMarkdownFinally, also possible embed Latex elements. instance, equations can defined text format. :results :\\[d(p, q) = \\sqrt{\\sum_{= 1}^{n}(q_i-p_i)^2}\\]RStudio provides several cheatsheets R, including Markdown. look Help → Cheatsheets.final note. able convert R Markdown Word format need MS Word installed machine. want able generate pdf documents, need bit : see screencast Setting Windows system. bit outdated update recent version numbers.","code":"## Tool 3: R Markdown\n\n![](figures/markdown_logo.jpg)\n\nUsing RMarkdown you can combine regular text and figures with embedded R code that will be executed to generate a final document. \nx <- 1:100\ny <- rnorm(100) + 1:100*rnorm(100, 0.2, 0.1)\nplot(x, y)$$d(p, q) = \\sqrt{\\sum_{i = 1}^{n}(q_i-p_i)^2}$$"},{"path":"toolbox.html","id":"resources","chapter":"2 The toolbox","heading":"2.3 Resources","text":"","code":""},{"path":"toolbox.html","id":"screencasts","chapter":"2 The toolbox","heading":"Screencasts","text":"series screencasts support text. can found two different video channels; one Base R one Tidyverse collection packages:base Rtidyverse","code":""},{"path":"toolbox.html","id":"data-files","chapter":"2 The toolbox","heading":"Data Files","text":"\nWhale selenium data:\nwhale_selenium.txt\n\nBird observation data:\nObservations-Data-2014.xlsx , \ncsv\n\nFood constituents:\nfood_constituents.txt\n\nWine review data:\nwinemag-data-130k-v2.csv\n","code":""},{"path":"toolbox.html","id":"web-resources-and-references","chapter":"2 The toolbox","heading":"Web resources and references","text":"R Markdown\nR Markdown Markdown “Dialect” used presenting, documenting reporting R: http://rmarkdown.rstudio.comR Markdown\nR Markdown Markdown “Dialect” used presenting, documenting reporting R: http://rmarkdown.rstudio.comR cheat sheet\nR cheat sheet.R cheat sheet\nR cheat sheet.R Markdown reference\nRMarkdown reference cards extensive documentation. Also available computer exam!R Markdown reference\nRMarkdown reference cards extensive documentation. Also available computer exam!Bioconductor\nBioconductor provides tools analysis comprehension high- throughput genomic data: http://www.bioconductor.orgBioconductor\nBioconductor provides tools analysis comprehension high- throughput genomic data: http://www.bioconductor.org","code":""},{"path":"basic-r.html","id":"basic-r","chapter":"3 Basic R","heading":"3 Basic R","text":"","code":""},{"path":"basic-r.html","id":"vectors-fuctions-and-variables","chapter":"3 Basic R","heading":"3.1 Vectors, fuctions and variables","text":"","code":""},{"path":"basic-r.html","id":"doing-math-in-the-console","chapter":"3 Basic R","heading":"3.1.1 Doing Math in the console","text":"console place quick calculations, tests analyses need saved (yet) repeated. tab says “Console” first use, R puts lower left panel.console, prompt “greater ” symbol “>”. R waits enter commands. panel “focus” cursor blinking . can use console calculator. supports regular math operations, way expect :+  : ‘plus’, 2 + 2 = 4- : ‘subtract’, 2 - 2 = 0*  : ‘multiply’, 2 * 3 = 6/  : ‘divide’, 8 / 4 = 2^  : ‘exponent’, 2^3 = 8. R, ^ synonym **square root can use \\(n^{0.5}\\): n**0.5, function sqrt() (discussed later).Enter pressed mathematical statement complete yet, > symbol replaced + start new line, indicating statement continuation. example:+ start line 2 mathematical + “continuation symbol”. can always abort current statement pressing Escape.statement complete, result printed next line:result course 42; leading [1] index result. address later.","code":"> 1 + 3 + 4 + \n+ > 31 + 11\n[1] 42"},{"path":"basic-r.html","id":"operator-precedence","chapter":"3 Basic R","heading":"Operator Precedence","text":"“operators” adhere standard mathematical precedence rules (PEMDAS):complex statements aware operator precedence! sure, want make expression less ambiguous simply use parentheses () highest precedence.Besides math operators, R knows whole set operators. dealt later chapter.Programming Rule Always place spaces around sides operator, exception ^ **.","code":"    Parentheses (simplify inside these)\n    Exponents\n    Multiplication and Division (from left to right)\n    Addition and Subtraction (from left to right)"},{"path":"basic-r.html","id":"an-expression-dissected","chapter":"3 Basic R","heading":"3.1.2 An expression dissected","text":"type 21 / 3 called expression. expression three parts: operator (/ middle) two operands. left operand 21 right operand 3.\nSince assignment, result expression send console output, giving [1] 7.expression sole contents current line console, also called statement.Statement vs expression statement complete line code performs action, expression section code evaluates value.","code":""},{"path":"basic-r.html","id":"ending-statements","chapter":"3 Basic R","heading":"Ending statements","text":"R, newline (enter) end--statement character. Optionally can end statements semicolon “;”. However, statements single line mandatory example:Programming Rule: one statement per line don’t use semicolons","code":"\nx <- c(1, 2, 3); x; x <- 42; x## [1] 1 2 3## [1] 42"},{"path":"basic-r.html","id":"comments","chapter":"3 Basic R","heading":"Comments","text":"Everything line hash sign “#” ignored R. Use add explanation code:","code":"\n## starting cool analysis\nx <- c(T, F, T) # Creating a logical vector\ny <- c(TRUE, FALSE, TRUE) # same"},{"path":"basic-r.html","id":"functions","chapter":"3 Basic R","heading":"3.1.3 Functions","text":"Simple mathematics core business R.Going basic math, need functions, mostly pre-existing functions often also custom functions write . definition function:function piece functionality can execute typing name, followed pair parentheses. Within parentheses, can pass data function work . Functions often, always, return value.Function usage -function call- general form:\n\\[function\\_name(arg_1, arg_2, ..., arg_n)\\]","code":""},{"path":"basic-r.html","id":"example-square-root-with-sqrt","chapter":"3 Basic R","heading":"Example: Square root with sqrt()","text":"already seen square root can calculated \\(n^{0.5}\\).\nHowever, also function : sqrt(). returns square root given parameter, number, e.g. sqrt(36)","code":"\n36^0.5\nsqrt(36)## [1] 6\n## [1] 6"},{"path":"basic-r.html","id":"another-example-paste","chapter":"3 Basic R","heading":"Another example: paste()","text":"paste() function can take number arguments returns , combined single text (character) string. can also specify separator using sep=\"<separator string>\":Note use quotes surrounding dashes: \"---\"; indicate text, character, data.\nAlso note use name last argument. arguments can specified name, possible preference, sep = \"---\".","code":"\npaste(1, 2, 3, sep = \"---\")## [1] \"1---2---3\""},{"path":"basic-r.html","id":"getting-help-on-a-function","chapter":"3 Basic R","heading":"3.1.3.1 Getting help on a function","text":"Type ?function_name help(function_name) console get help function. function documentation appear panel containing Help tab, location dependent set preferences.\ninstance, typing ?sqrt give help page square root function together abs() function.\nR help pages always exact structure:Name & package (e.g. {base})Short descriptionDescriptionUsageArgumentsDetails…ExamplesScroll help see example usages function. Alternatively, type example(sqrt) console examples executed order, press Escape.","code":""},{"path":"basic-r.html","id":"variables","chapter":"3 Basic R","heading":"3.1.4 Variables","text":"math programming often use variables label name pieces data, function order reusable, retrievable, changeable.variable named piece data stored memory can accessed via nameFor instance, x = 42 used define variable called x, value attached 42. Variables really variable - value can change!\nR usually assign value variable using “<-”, “x <- 42” equivalent “x = 42”. work R, “arrow” notation preferred.","code":""},{"path":"basic-r.html","id":"vectors","chapter":"3 Basic R","heading":"3.1.5 Vectors","text":"","code":""},{"path":"basic-r.html","id":"r-is-completely-vector-based","chapter":"3 Basic R","heading":"R is completely vector-based","text":"R, data lives inside vectors. type ‘2 + 4’, R execute following series actions:create vector length 1 element value 2create vector length 1 element value 4add value second vector values vector one, recycle shorter vector many times neededStep 3 crucial one. essential grasp aspect order understand R. Therefore ’ll revisit later detail.","code":""},{"path":"basic-r.html","id":"the-atomic-datatypes","chapter":"3 Basic R","heading":"The atomic datatypes","text":"R knows five basic types data; datatypes build combining complex structures (discussed later chapter):types created similar ways can often converted types.Note 1: type number console, always numeric value, decimal part .Note 2: character data, single double quotes equivalent double preferred; type ?Quotes console read topic.Note 3: also date/time types discussed ","code":""},{"path":"basic-r.html","id":"creating-vectors","chapter":"3 Basic R","heading":"Creating vectors","text":"see shortly many ways create vectors: custom collection, series, repetition smaller set, random sample distribution, etc. etc.simplest way create vector first: create vector custom set elements, using “Concatenate” function c(). c() function simply takes arguments puts behind , order passed , returns resulting vector.","code":"> c(2, 4, 3)## [1] 2 4 3> c(\"a\", \"b\", c(\"c\", \"d\"))## [1] \"a\" \"b\" \"c\" \"d\"> c(0.1, 0.01, 0.001)## [1] 0.100 0.010 0.001> c(T, F, TRUE, FALSE) # There are two way to write logical values## [1]  TRUE FALSE  TRUE FALSE"},{"path":"basic-r.html","id":"vectors-can-hold-only-one-data-type","chapter":"3 Basic R","heading":"Vectors can hold only one data type","text":"vector can hold one type data. Therefore, pass mixed set values function c(), coerce data one type. preferred type numeric. However, possible result often character vector. example , two numbers character value passed. Since \"\" coerced numeric, returned vector character vector.coercion examples.Using function class(), can get data type value variable.","code":"\nc(2, 4, \"a\") ## [1] \"2\" \"4\" \"a\"> c(1, 2, TRUE) # To numeric## [1] 1 2 1> c(TRUE, FALSE, \"TRUE\") # To character## [1] \"TRUE\"  \"FALSE\" \"TRUE\"> c(1.3, TRUE, \"1\") # To character## [1] \"1.3\"  \"TRUE\" \"1\"> class(c(2, 4, \"a\"))## [1] \"character\"> class(1:5)## [1] \"integer\"> class(c(2, 4, 0.3))## [1] \"numeric\"> class(c(2, 4, 3))## [1] \"numeric\""},{"path":"basic-r.html","id":"vector-arithmetic","chapter":"3 Basic R","heading":"Vector arithmetic","text":"Let’s look means work vectors, opposed singular values (also called scalars). example probably best get idea.can see, R works set based cycle shorter two operands deal elements longer operand. longer one multiple shorter one?can see generates warning “longer object length multiple shorter object length”. However, R proceed anyway, cycling shorter one.","code":"\nx <- c(2, 4, 3, 5)\ny <- c(6, 2)\nx + y## [1] 8 6 9 7\nx <- c(2, 4, 3, 5)\nz <- c(1, 2, 3)\nx - z## Warning in x - z: longer object length is not a multiple of shorter object\n## length## [1] 1 2 0 4"},{"path":"basic-r.html","id":"operators","chapter":"3 Basic R","heading":"3.1.6 Operators","text":"complete listing operators R. operators ^ unary, means single operand; single value operate . hand, binary operators + two operands.following unary binary operators listed precedence groups, highest lowest. Many still unknown course. encounter along way course progresses, starting section.<<- assignment operator <- assigns variable Global environment.","code":""},{"path":"basic-r.html","id":"logical-operators","chapter":"3 Basic R","heading":"Logical operators","text":"Logical operators used evaluate /combine expressions result single logical value: TRUE FALSE. comparison operators compare two values (numeric, character - type possible) get logical value, always set-based! following chunk, values x considered smaller equal value 4, TRUE returned, else FALSE.comparison operators < (less ), <= (less equal ), > (greater ), >= (greater equal ), == (equal ).Another category logical operators set boolean operators. used reduce two logical values one. &: logical “”; & b evaluate TRUE b TRUE.|: logical “”; | b evaluate TRUE b TRUE, matter .!: logical -unary- “”; negates right operand: ! evaluate “flipped” logical value .elaborate example combining comparison boolean operators.\nSuppose vectors b want know values greater b also smaller 3. expression used answering question.special case. Can figure happens ?","code":"\nx <- c(1, 5, 4, 3)\nx <= 4## [1]  TRUE FALSE  TRUE  TRUE\na <- c(2, 1, 3, 1, 5, 1)\nb <- c(1, 2, 4, 2, 3, 0)\na > b & a < 3 ## returns a logical vector with test results## [1]  TRUE FALSE FALSE FALSE FALSE  TRUE\n6 - 2 : 5 < 3## [1] FALSE FALSE  TRUE  TRUE"},{"path":"basic-r.html","id":"calculations-with-logical-vectors","chapter":"3 Basic R","heading":"Calculations with logical vectors","text":"Quite often want know many cases fit condition. convenient thing case logical values numeric counterpart “hidden face”:TRUE == 1FALSE == 0The sum() function often used feature:","code":"\nx <- c(2, 4, 2, 1, 5, 3, 6)\nx > 3 ## which values are greater than 3?\nsum(x > 3) ## how many are greater than 3?## [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE\n## [1] 3"},{"path":"basic-r.html","id":"modulo","chapter":"3 Basic R","heading":"Modulo: %%","text":"modulo operator gives remainder division.modulo often used establish periodicity: x %% 2 zero even numbers. Likewise, x %% 10 zero every tenth value.","code":"\n10 %% 3\n4 %% 2\n11 %% 3## [1] 1\n## [1] 0\n## [1] 2"},{"path":"basic-r.html","id":"integer-division-and-rounding","chapter":"3 Basic R","heading":"Integer division %/% and rounding","text":"integer division complement modulo gives integer part division, simply “chops ” decimal part.Note floor() . manner, ceiling() rounds nearest integer, matter large decimal part. Finally, round() method used - well, rounding. aware rounding R rounding course grade always goes x.5. Rounding x.5 values mathematically goes nearest even number:","code":"\n10 %/% 3\n4 %/% 2\n11 %/% 3## [1] 3\n## [1] 2\n## [1] 3\nx <- c(0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5)\nround(x, 0)## [1] 0 2 2 4 4 6 6 8"},{"path":"basic-r.html","id":"the-in-operator","chapter":"3 Basic R","heading":"The %in% operator","text":"%% operator handy want know elements one vector present another vector. example explains best, usual:positional evaluation, simply reports corresponding element first present anywhere second.","code":"\na <- c(\"one\", \"two\", \"three\")\nb <- c(\"zero\", \"three\", \"five\", \"two\")\na %in% b\nb %in% a## [1] FALSE  TRUE  TRUE\n## [1] FALSE  TRUE FALSE  TRUE"},{"path":"basic-r.html","id":"selecting-vector-elements","chapter":"3 Basic R","heading":"Selecting vector elements","text":"often want get know things specific values within vectorwhat value third position?highest value?positions negative values?last 5 values?two principal ways : indexing positionional reference (“addresses”) logical indexing.picture demonstrates .index position value within vector. R starts one (1), therefore ends length vector. Brackets [] used specify one indices selected (returned).two examples straightforward indexing, selecing single series elements.However, technique much versatile. can use indexing select elements multiple times thus create copies , select elements order desire.Besides integers can use logicals perform selections:vector operations, shorter vectors cycled often needed cover longer one:practice won’t type literal logicals often; ususaly result comparison operation. , even numbers selected modulo retun zero.maximum values vector retreived:caveat selecting last n values: colon operator highest precedence!\n, last two elements (supposed selected).","code":"\nx <- c(2, 4, 6, 3, 5, 1)\nx[4] ## fourth element## [1] 3\nx[3:5] ## elements 3 to 5## [1] 6 3 5\nx[c(1, 2, 2, 5)] ## elements 1, 2, 2 and 5## [1] 2 4 4 5\nx <- c(2, 4, 6, 3, 5, 1)\nx[c(T, F, T, T, T, F)]## [1] 2 6 3 5\nx[c(F, T, F)]## [1] 4 5\nx[x %% 2 == 0]## [1] 2 4 6\nx <- c(2, 3, 3, 2, 1, 3)\nx[x == max(x)]## [1] 3 3 3\nx <- c(2, 4, 6, 3, 5, 1)\nx[length(x) - 1 : length(x)] #fails## [1] 5 3 6 4 2\nx[(length(x) - 1) : length(x)] ## parentheses required!## [1] 5 1"},{"path":"basic-r.html","id":"use-which-to-get-an-index-instead-of-value","chapter":"3 Basic R","heading":"Use which() to get an index instead of value","text":"function () returns indices logical test evaluates true:","code":"\nwhich(x >= 2) ## which positions have values 2 or greater?## [1] 1 2 3 4 5\nwhich(x == max(x)) ## which positions have the maximum value?## [1] 3"},{"path":"basic-r.html","id":"vector-creation-methods","chapter":"3 Basic R","heading":"3.1.7 Vector creation methods","text":"Since vectors bricks everything built R, many, many ways create . , review important ones.","code":""},{"path":"basic-r.html","id":"method-1-constructor-functions","chapter":"3 Basic R","heading":"Method 1: Constructor functions","text":"Often want specific create: use class-specific constructor one conversion methods. Constructor methods name type. create return vector type wit length number passed constructor argument:","code":"\ninteger(4)\ncharacter(4)\nlogical(4)## [1] 0 0 0 0\n## [1] \"\" \"\" \"\" \"\"\n## [1] FALSE FALSE FALSE FALSE"},{"path":"basic-r.html","id":"method-2-conversion-functions","chapter":"3 Basic R","heading":"Method 2: Conversion functions","text":"Conversion methods name .XXX() XXX desired type. attempt coerce given input vector requested type.limits coercion: R coerce elements types non-coercable: get NA value.","code":"\nx <- c(1, 0, 2, 2.3)\nclass(x)\nas.logical(x)\nas.integer(x)## [1] \"numeric\"\n## [1]  TRUE FALSE  TRUE  TRUE\n## [1] 1 0 2 2\nx <- c(2, 3, \"a\")\ny <- as.integer(x)## Warning: NAs introduced by coercion\nclass(y)## [1] \"integer\"\ny## [1]  2  3 NA"},{"path":"basic-r.html","id":"method-3-the-colon-operator","chapter":"3 Basic R","heading":"Method 3: The colon operator","text":"colon operator (:) generates series integers fromthe left operand -including- right operand.","code":"\n1 : 5\n5 : 1\n2 : 3.66## [1] 1 2 3 4 5\n## [1] 5 4 3 2 1\n## [1] 2 3"},{"path":"basic-r.html","id":"method-4-the-rep-function","chapter":"3 Basic R","heading":"Method 4: The rep() function","text":"rep() function takes three arguments. first input vector. second, times =, specifies often entire input vector repeated. second argument, =, specifies often individual element input vector repeated. arguments provided, = evaluated first, followed times =.","code":"\nrep(1 : 3, times = 3)## [1] 1 2 3 1 2 3 1 2 3\nrep(1 : 3, each= 3)## [1] 1 1 1 2 2 2 3 3 3\nrep(1 : 3, times = 2, each = 3)##  [1] 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3"},{"path":"basic-r.html","id":"method-5-the-seq-function","chapter":"3 Basic R","heading":"Method 5: The seq() function","text":"seq() function used create numeric vector subsequent element show sequential increment decrement. specify range step may neative range end (=) lower range start (=).","code":"> seq(from = 1, to = 3, by = .2)##  [1] 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0> seq(1, 2, 0.2) # same## [1] 1.0 1.2 1.4 1.6 1.8 2.0> seq(1, 0, length.out = 5)## [1] 1.00 0.75 0.50 0.25 0.00> seq(3, 0, by = -1)## [1] 3 2 1 0"},{"path":"basic-r.html","id":"method-6-through-vector-operations","chapter":"3 Basic R","heading":"Method 6: Through vector operations","text":"course, new vectors, often different type, created two vectors combined operation, single vector processed way.operation two numeric vectors results logical vector:paste() call results character vector:","code":"\n1:5 < c(2, 3, 2, 1, 4)## [1]  TRUE  TRUE FALSE FALSE FALSE\npaste(0:4, 5:9, sep = \"-\")## [1] \"0-5\" \"1-6\" \"2-7\" \"3-8\" \"4-9\""},{"path":"basic-r.html","id":"matrices-are-vectors-with-dimensions","chapter":"3 Basic R","heading":"3.1.8 Matrices are vectors with dimensions","text":"detail course, one small paragraph. mean important, just focus . functions require return matrix aware .can convert dataframes using .data.frame() .matrix(). simple vectors removing adding dimension attributes: dim(m) <- NULL.","code":"\nm <- matrix(1:10, nrow = 2, ncol = 5) \nm##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    3    5    7    9\n## [2,]    2    4    6    8   10\nv <- 1:10\ndim(v) <- c(2, 5)\nv##      [,1] [,2] [,3] [,4] [,5]\n## [1,]    1    3    5    7    9\n## [2,]    2    4    6    8   10"},{"path":"basic-r.html","id":"base_plotting","chapter":"3 Basic R","heading":"3.2 R embedded plot types (optional)","text":"section included completeness’ sake. base plotting system can considered deprecated.\npreferably use ggplot2 package plotting.Looking numbers boring - people want see pictures! analyses without visualizations like listening movie.plot types supported base R deal (combinations ) vectors:scatter (line-) plotbarplothistogramboxplotWe’ll look bare basics chapter going real package ggplot2 next course.","code":""},{"path":"basic-r.html","id":"scatter-and-line-plots","chapter":"3 Basic R","heading":"3.2.1 Scatter and line plots","text":"Meet plot() - workhorse R plotting.\nFigure 3.1: nice figure!\nfunction plot used generate scatter plot. may generae types figures, depending input ’ll see later.","code":"\ntime <- c(1, 2, 3, 4, 5, 6)\nresponse <- c(0.09, 0.30, 0.41, 0.48, 0.72, 1.12)\nplot(x = time, y = response)"},{"path":"basic-r.html","id":"formula-notation","chapter":"3 Basic R","heading":"Formula notation","text":"Instead passing x = y = set arguments, also possible call plot fuction formula notation:can read response ~ time response function time. nice, readable alternative case, many functions preferred way specify relationship want investigate.","code":"\nplot(response ~ time)"},{"path":"basic-r.html","id":"plot-decorations","chapter":"3 Basic R","heading":"Plot decorations","text":"Plots always decorations:Axis labels indicating measurement type (quantity) units. E.g. ‘[Mg] (mq/ml)’ ‘Heartrate (bpm)’.multiple data series plotted: legendEither title figure caption, depending context.first plots chapters bare (bit boring look ): plot axis labels (quantity units) decoration whatsoever. passing arguments plot() can modify add many features plot. Basic decoration includesadjusting markers (pch = 19, col = \"blue\")adding connector lines (type = \"b\") removing points (type = \"l\")adding axis labels title (xlab = \"Time (hours)\", ylab = \"Systemic response\", main = \"Systemic response agent X\")adjusting axis limits (xlim = c(0, 8))exhaustive listing; listed last section chapter.complete plot using variety arguments.","code":"\nplot(x = time, y = response, pch = 19, type = \"b\", xlim = c(0, 8),\n     xlab = \"Time (hours)\", ylab = \"Systemic response (a.u.)\",\n     main = \"Systemic response to agent X\", col = \"blue\")"},{"path":"basic-r.html","id":"adjusting-the-plot-symbol","chapter":"3 Basic R","heading":"Adjusting the plot symbol","text":"many data points overlap. Using transparency rgb(,, alpha=) color definition /smaller plot symbols (cex=) solves .","code":"\nx <- rnorm(1000, 10, 2); y <- x + rnorm(1000, 0.5, 0.5)\nplot(x, y, pch = 19, cex = 0.6,\n     col = rgb(red = 0, green = 0, blue = 1, alpha = 0.2))"},{"path":"basic-r.html","id":"barplots","chapter":"3 Basic R","heading":"3.2.2 Barplots","text":"Barplots can generated several ways:passing factor plot() - generate barplot level frequencies. shorthand barplot(table(some_factor)).using barplot(). advantage accepts graphical parameters relevant accepted plot(), beside =, height =, width = others (type ?barplot see ).example:","code":"\npersons <- as.factor(sample(c(\"male\", \"female\"), size = 100, replace = T))\nplot(persons)"},{"path":"basic-r.html","id":"barplot-with-a-vector","chapter":"3 Basic R","heading":"barplot() with a vector","text":"function barplot() can called vector specifying bar heights (frequencies), table object.table object:","code":"\nfrequencies <- c(22, 54, 12, 29)\nbarplot(frequencies, names = c(\"one\", \"two\", \"three\", \"four\"))\ntable(persons)## persons\n## female   male \n##     52     48\nbarplot(table(persons))"},{"path":"basic-r.html","id":"barplot-with-a-2d-table-object","chapter":"3 Basic R","heading":"barplot() with a 2D table object","text":"Suppose data:set.seed(1234) makes sampling reproducible, although sounds really unlogical. Discussing pseudorandom sampling within scope course however.can create stacked bar chart like .xlim = setting trick get legend beside plot.Using beside = TRUE argument, get bars side side:Later, ’ll see another data structure feed barplot: matrix.","code":"\nset.seed(1234) \ncourse <- rep(c(\"biology\", \"chemistry\"), each = 10)\npassed <- sample(c(\"Passed\", \"Failed\"), size = 20, replace = T)\ntbl <- table(passed, course) # the order matters!\ntbl##         course\n## passed   biology chemistry\n##   Failed       6         8\n##   Passed       4         2\nbarplot(tbl, \n        col = c(\"red\", \"darkblue\"), \n        xlim = c(0, ncol(tbl) + 2), \n        legend = rownames(tbl))\nbarplot(tbl, \n        col=c(\"red\", \"darkblue\"), \n        beside = TRUE, \n        xlim=c(0, ncol(tbl)*2 + 3), \n        legend = rownames(tbl))"},{"path":"basic-r.html","id":"histograms","chapter":"3 Basic R","heading":"3.2.3 Histograms","text":"Histograms help visualise distribution data.Using breaks argument, can adjust bin width. Always explore option creating histograms!want detailed","code":"\nmale_weights <- c(rnorm(500, 80, 8)) ## create 500 random numbers around 80\nhist(male_weights)\npar(mfrow = c(1, 2)) # make 2 plots to sit side by side\nhist(male_weights, breaks = 5, col = \"gold\", main = \"Male weights\")\nhist(male_weights, breaks = 25, col = \"green\", main = \"Male weights\")"},{"path":"basic-r.html","id":"density-plot-as-alternative-to-hist","chapter":"3 Basic R","heading":"3.2.4 Density plot as alternative to hist()","text":"want bit fine-grained view distribution can use plot density function; adding polygon() can even nice shading line:","code":"\nplot(density(male_weights),\n     main = \"A density plot of male weights\",\n     col = \"blue\", lwd = 2)\npolygon(density(male_weights), col=\"lightblue\")"},{"path":"basic-r.html","id":"boxplots","chapter":"3 Basic R","heading":"3.2.5 Boxplots","text":"last basic plot types. boxplot visual representation 5-number summary numeric variable: minimum, maximum, median, first third quartile.Boxplots tell story histograms, less precise. however, excellent want show series subsets split variable.Use varwidth = TRUE want visualize difference group sizes.","code":"\npersons <- rep(c(\"male\", \"female\"), each = 100)\nweights <- c(rnorm(100, 80, 6), rnorm(100, 75, 8))\n#print 6-number summary (5-number + mean)\nsummary(weights[persons == \"female\"])##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   57.68   69.36   74.12   73.99   78.97   92.23\npar(mfrow = c(1, 2)) # make 2 plots to sit side by side\n# create boxplots of weights depending on sex\nboxplot(weights ~ persons, ylab = \"weight\")\nboxplot(weights ~ persons, notch = TRUE, col = c(\"yellow\", \"magenta\"))"},{"path":"basic-r.html","id":"adding-more-data-and-a-legend","chapter":"3 Basic R","heading":"3.2.6 Adding more data and a legend","text":"one data series plot, add using function points(). call function created primary plot. Since multiple lines also need legend.legend() function versatile. look docs!\nbasic form pass position (x y), series names, colors plot character.","code":"\nresponse2 <- c(0.07, 0.10, 0.17, 0.28, 0.46, 0.61)\nplot(x = time, y = response, pch = 19, type = \"b\",\n     xlab = \"Time (hours)\", ylab = \"Systemic response (a.u.)\",\n     main = \"Systemic response to agent X\", col = \"blue\")\npoints(x = time, y = response2, col = \"red\", pch = 19, type = \"b\")\nlegend(x = 1, y = 1.0, legend = c(\"one\", \"two\"), col = c(\"blue\", \"red\"), pch = 19)"},{"path":"basic-r.html","id":"helper-lines-and-lm","chapter":"3 Basic R","heading":"3.2.7 Helper lines and lm()","text":"Adding helper lines can used aid reader grasping interpreting data story.\nUse function abline() .four types helper lines might want add figure:horizontal line h =: indicate y-thresholdA vertical line v =: indicate x-threshold mean statisticA line intercept (=) slope (b =): often used indicate expected response, diagonal x = yA linear model, determined lm() function. linear model object actually contains intercept slope value taken abline().following plot, four basic helper lines demonstrated:","code":"\nplot(x = time, y = response, pch = 19, type = \"b\",\n     xlab = \"Time (hours)\", ylab = \"Systemic response (a.u.)\",\n     main = \"Systemic response to agent X\", col = \"blue\")\n#horizontal line\nabline(h = 0.3, lty = 2, lwd = 2, col = \"red\")\n#vertical line\nabline(v = 4, lty = 3, lwd = 2, col = \"darkgreen\")\n#line with slope\nabline(a = -0.1, b = 0.3, lwd = 2, col = \"purple\")\n#linear model \nabline(lm(response ~ time),  lwd = 2, col = \"maroon\")"},{"path":"basic-r.html","id":"graphical-parameters-to-plot","chapter":"3 Basic R","heading":"3.2.8 Graphical parameters to plot()","text":"many parameters can passed plotting functions. small sample possible values.","code":"\nseries <- 1:20\nplot(0, 0, xlim=c(1,20) , ylim=c(0.5, 7.5), col=\"white\" , yaxt=\"n\" , ylab=\"\" , xlab=\"\")\n\n# the rainbow() function gives a nice palette across all colors\n# or use hcl.colors() to specify another palette\n# use  hcl.pals() to get an overview of available pallettes\ncolors = hcl.colors(20, alpha = 0.8, palette = 'viridis')\n\n#pch\npoints(series, rep(1, 20), pch = 1:20, cex = 2)\n#col\npoints(series, rep(2, 20), col = colors, pch = 16, cex = 3)\n#cex\npoints(series, rep(3, 20), col = \"black\" , pch = 16, cex = series * 0.2)\n\n#overlay to create new symbol\npoints(series, rep(4, 20), pch = series, cex = 2.5, col = \"blue\")\npoints(series, rep(4, 20), pch = series, cex = 1.5, col = colors)\n \n#lty\nfor (i in 1:6) {\n    points(c(-2, 0) + (i * 3), c(5, 5), col = \"black\", lty = i, type = \"l\", lwd = 3)\n    text((i * 3) - 1, 5.25 , i)\n}\n#type and lwd\nfor (i in 1:4) {\n    #type\n    points(c(-4, -3, -2, -1) + (i * 5), rep(6, 4),\n           col = \"black\", type = c(\"p\",\"l\",\"b\",\"o\")[i], lwd=2)\n    text((i * 5) - 2.5, 6.4 , c(\"p\",\"l\",\"b\",\"o\")[i] )\n    #lwd\n    points(c(-4, -3, -2, -1) + (i * 5), rep(7, 4), col = \"blue\", type = \"l\", lwd = i)\n    text((i * 5) - 2.5, 7.23, i)\n}\n#add axis\naxis(side = 2, at = c(1, 2, 3, 4, 5, 6, 7),\n    labels = c(\"pch\" , \"col\" , \"cex\" , \"combine\", \"lty\", \"type\" , \"lwd\" ),\n    tick = FALSE, col = \"black\", las = 1, cex.axis = 0.8)"},{"path":"complex-datatypes-and-file-reading.html","id":"complex-datatypes-and-file-reading","chapter":"4 Complex Datatypes and File Reading","heading":"4 Complex Datatypes and File Reading","text":"","code":""},{"path":"complex-datatypes-and-file-reading.html","id":"factors-nominal-ordinal-scales","chapter":"4 Complex Datatypes and File Reading","heading":"4.1 Factors: Nominal & Ordinal scales","text":"Although factors actually complex datatype much one five base types R, saved complex sometimes puzzling behaviour.Factors represent different discrete levels variable - nominal ordinal scales known statistics.instance:eye color (brown, blue, green)weight class (underweight, normal, obese)autism spectrum (none, minimal, heavy)","code":""},{"path":"complex-datatypes-and-file-reading.html","id":"factor-creation","chapter":"4 Complex Datatypes and File Reading","heading":"Factor creation","text":"Factors used represent data nominal ordinal scales. Nominal order (e.g. eye color). Ordinal order (e.g. autism spectrum), can calculated , ordering high low. distance defined separate levels. following functions used create factors:factor(): constructor function, factor, character, numeric logicalas.factor(): coercion function, factor, character, numeric logicalcut(): conversion function numeric vectorSo difference factor() .factor()? Function .factor() wrapper factor(). difference lies behaviour input factor : factor omit unused levels. Besides , .factor() specify arguments labels levels.Suppose surveyed eye color class room found valuesNext like plot tabulate findings. Simply plotting gives error:However, plotting character vector converted factor easyFactors also really easy tabulate filter","code":"\nx <- factor(c(\"a\", \"b\"), levels = c(\"a\", \"b\", \"c\"))\nx\nfactor(x)\nas.factor(x)## [1] a b\n## Levels: a b c\n## [1] a b\n## Levels: a b\n## [1] a b\n## Levels: a b c\neye_colors <- c(\"green\", \"blue\", \"brown\", \"brown\", \"blue\",\n    \"brown\", \"brown\", \"brown\", \"blue\", \"brown\", \"green\",\n    \"brown\", \"brown\", \"blue\", \"blue\", \"brown\")\nplot(eye_colors)## Warning in xy.coords(x, y, xlabel, ylabel, log): NAs introduced by coercion## Warning in min(x): no non-missing arguments to min; returning Inf## Warning in max(x): no non-missing arguments to max; returning -Inf## Error in plot.window(...): need finite 'ylim' values\neye_colors <- as.factor(eye_colors)\nplot(eye_colors)\ntable(eye_colors)## eye_colors\n##  blue brown green \n##     5     9     2\nsum(eye_colors == \"blue\")## [1] 5"},{"path":"complex-datatypes-and-file-reading.html","id":"levels-labels-and-ordering","chapter":"4 Complex Datatypes and File Reading","heading":"Levels, Labels and Ordering","text":"working ordinal scales, defining order factors (levels) crucial. default, R uses natural ordering means stick either numerical (numeric, integer logical) alphabetical ordering (character). want different ordering need specify . can even define missing levels, shown following example.factor, can -limited- set calulations . However, comparators work ordinal scale. equality tests, sum() works well:","code":"\nclassSizes <- factor(c(\"big\", \"small\", \"huge\", \"huge\", \n    \"small\",\"big\",\"small\",\"big\"),\n    levels = c(\"small\", \"normal\", \"big\", \"huge\"),\n    ordered = TRUE) #make it an ordinal scale!\nplot(classSizes)\nclassSizes < \"big\" ## only with in Ordinal scale## [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE\nsum(classSizes == \"huge\") ## [1] 2"},{"path":"complex-datatypes-and-file-reading.html","id":"convert-existing-factors","chapter":"4 Complex Datatypes and File Reading","heading":"Convert existing factors","text":"already unordered factor, can make ordered using function ordered() together fvector specifying levels.","code":"\nclassSizes <- factor(c(\"big\", \"small\", \"huge\", \"huge\",\n    \"small\", \"big\", \"small\", \"big\"))\nclassSizes <- ordered(classSizes,\n                    levels = c(\"small\", \"big\", \"huge\"))\nclassSizes## [1] big   small huge  huge  small big   small big  \n## Levels: small < big < huge"},{"path":"complex-datatypes-and-file-reading.html","id":"when-calculations-get-corrupted","chapter":"4 Complex Datatypes and File Reading","heading":"When calculations get corrupted","text":"Especially factor consists numeric levels, calculations can get mind screwed big time:way get numbers back numeric factors using trickBut makes really unintelligible code try prevent costs!","code":"\nx <- factor(c(3, 4, 5, 4))\nx + 1## Warning in Ops.factor(x, 1): '+' not meaningful for factors## [1] NA NA NA NA\nas.integer(x) + 1## [1] 2 3 4 3\nas.integer(levels(x)) + 1## [1] 4 5 6\nx## [1] 3 4 5 4\n## Levels: 3 4 5\nas.integer(levels(x))[x]## [1] 3 4 5 4"},{"path":"complex-datatypes-and-file-reading.html","id":"the-power-of-factors","chapter":"4 Complex Datatypes and File Reading","heading":"The power of factors","text":"Factors used time e.g. defining treated/untreated. ’s R knows deal well:see many many examples factors subsequent chapters ebook.’s time switch better plotting platform. plot ggplot2 library:, use base R plotting system quick--dirty visualizations, just like .","code":"\nwith(ChickWeight, plot(weight ~ Diet))\nggplot(data = ChickWeight,\n       mapping = aes(x = Diet, y = weight, fill = Diet)) +\n  geom_boxplot() +\n  theme(legend.position = \"none\")"},{"path":"complex-datatypes-and-file-reading.html","id":"lists","chapter":"4 Complex Datatypes and File Reading","heading":"4.2 Lists","text":"list ordered collection objects. objects can type: vectors (also different types), dataframes, lists.","code":""},{"path":"complex-datatypes-and-file-reading.html","id":"list-creation","chapter":"4 Complex Datatypes and File Reading","heading":"List creation","text":"Create list without element names:list(element1, element2, ...)list(name1 = element1, name2 = element2, ...)Without names:names:preferred way create use gives easier ways access elements makes much reradable code. ’s see lists named elements .","code":"\nx <- c(2, 3, 1);  y <- c(\"foo\", \"bar\")\nl <- list(x, y)\nl## [[1]]\n## [1] 2 3 1\n## \n## [[2]]\n## [1] \"foo\" \"bar\"\nx <- c(2, 3, 1)\ny <- c(\"foo\", \"bar\")\nl <- list(\"numbers\" = x, \"words\" = y)\nl## $numbers\n## [1] 2 3 1\n## \n## $words\n## [1] \"foo\" \"bar\""},{"path":"complex-datatypes-and-file-reading.html","id":"making-selections-on-lists","chapter":"4 Complex Datatypes and File Reading","heading":"Making selections on lists","text":"Accessing named elements can done three ways:index, within double single brackets: [[<index>]] [<index>]name element, within double single brackets: [[<name>]] [<name>]name element, using dollar sign list name: $<name>three:Single bracket selection list returns list; double brackets $ return vector.R, selections often chained. following example second vector element second list element selected.need multiple elements list, use single brackets. Remember: single brackets return list; ’s need single brackets .Accessing named elements limitations. can use variable combination dollar sign selector.Chaining selectors can become awkward, example demonstrates.","code":"\nl[[2]]        # index\nl[[\"words\"]]  # name of element with double brackets\nl$words       # name of element with dollar sign## [1] \"foo\" \"bar\"\n## [1] \"foo\" \"bar\"\n## [1] \"foo\" \"bar\"\nl[2]\nl[[2]]\nl$words## $words\n## [1] \"foo\" \"bar\"\n## \n## [1] \"foo\" \"bar\"\n## [1] \"foo\" \"bar\"\nl\nl[[2]][2] ## $numbers\n## [1] 2 3 1\n## \n## $words\n## [1] \"foo\" \"bar\"\n## \n## [1] \"bar\"\nl[c(1,2,1)]## $numbers\n## [1] 2 3 1\n## \n## $words\n## [1] \"foo\" \"bar\"\n## \n## $numbers\n## [1] 2 3 1\nselect <- \"words\"\nl[[select]] ## OK## [1] \"foo\" \"bar\"\nl$select ##fails - no element with name \"select\"## NULL\nl[2][\"words\"][1]$words  ## mind****## [1] \"foo\" \"bar\""},{"path":"complex-datatypes-and-file-reading.html","id":"dataframes","chapter":"4 Complex Datatypes and File Reading","heading":"4.3 Dataframes","text":"dataframe ordered collection vectors. vectors can differing types must equal lengths.dataframe similar square grid-like structures probably worked Excel. Variables columns elements type. Examples (observations) rows - can differing types.Dataframes can constructed using data.frame() function way list function:data.frame(column1 = vector1, column2 = vector2, ...)first example.wrapping dataframe modern variant data.frame, tibble, can see structure: column single datatype rows can differing types neighboring fields.","code":"\ngeneNames <- c(\"P53\",\"BRCA1\",\"VAMP1\", \"FHIT\")\nsig <- c(TRUE, TRUE, FALSE, FALSE)\nmeanExp <- c(4.5, 7.3, 5.4, 2.4)\ngenes <- data.frame(\n    \"name\" = geneNames,  \n    \"significant\" = sig,  \n    \"expression\" = meanExp)  \ngenes##    name significant expression\n## 1   P53        TRUE        4.5\n## 2 BRCA1        TRUE        7.3\n## 3 VAMP1       FALSE        5.4\n## 4  FHIT       FALSE        2.4\ndplyr::as_tibble(genes)## # A tibble: 4 × 3\n##   name  significant expression\n##   <chr> <lgl>            <dbl>\n## 1 P53   TRUE               4.5\n## 2 BRCA1 TRUE               7.3\n## 3 VAMP1 FALSE              5.4\n## 4 FHIT  FALSE              2.4"},{"path":"complex-datatypes-and-file-reading.html","id":"importing-dataframes-using-read.table","chapter":"4 Complex Datatypes and File Reading","heading":"4.3.1 Importing dataframes using read.table()","text":"Usually data comes file, loaded memory data.frame. common data transfer- storage format text. text file column separators can wide range characters called delimiters, tab- comma-delimited fields common.example dataset file (see whale_selenium.txt) separator space character:load data R session can use function read.table(). Let’s tryThat entirely correct: columns imported factor obviously numeric. cause , loading data,special consideration header linethe separator assumed spacethe decimal assumed dot “.”(assumptions)Therefore, read file correctly, specify format every detail. case,first line header column namesthe first column contains row namesHere new attempt format specifications:proceeding data, always perform checks. Several helper methods exist purpose:head() shows first n linesstr() gives structure description: types columns dimension data frame ?summary() gives 6-number sumary data","code":"whale liver.Se tooth.Se  \n1 6.23 140.16  \n2 6.79 133.32  \n3 7.92 135.34  \n...  \n19 41.23 206.30  \n20 45.47 141.31  \nwhale_selenium <- read.table(\"data/whale_selenium.txt\")\nhead(whale_selenium) # first rows##      V1       V2       V3\n## 1 whale liver.Se tooth.Se\n## 2     1     6.23   140.16\n## 3     2     6.79   133.32\n## 4     3     7.92   135.34\n## 5     4     8.02   127.82\n## 6     5     9.34   108.67\nstr(whale_selenium) # structure## 'data.frame':    21 obs. of  3 variables:\n##  $ V1: chr  \"whale\" \"1\" \"2\" \"3\" ...\n##  $ V2: chr  \"liver.Se\" \"6.23\" \"6.79\" \"7.92\" ...\n##  $ V3: chr  \"tooth.Se\" \"140.16\" \"133.32\" \"135.34\" ...\nwhale_selenium <- read.table(\n    file = \"data/whale_selenium.txt\",\n    header = TRUE,\n    row.names = 1)> head(whale_selenium, n=4) ##   liver.Se tooth.Se\n## 1     6.23   140.16\n## 2     6.79   133.32\n## 3     7.92   135.34\n## 4     8.02   127.82> str(whale_selenium) ## 'data.frame':    20 obs. of  2 variables:\n##  $ liver.Se: num  6.23 6.79 7.92 8.02 9.34 ...\n##  $ tooth.Se: num  140 133 135 128 109 ...> summary(whale_selenium) ##     liver.Se         tooth.Se    \n##  Min.   : 6.230   Min.   :108.7  \n##  1st Qu.: 9.835   1st Qu.:134.8  \n##  Median :14.905   Median :143.4  \n##  Mean   :20.685   Mean   :156.6  \n##  3rd Qu.:33.633   3rd Qu.:175.1  \n##  Max.   :45.470   Max.   :245.1"},{"path":"complex-datatypes-and-file-reading.html","id":"file-io-in-detail","chapter":"4 Complex Datatypes and File Reading","heading":"4.3.2 File I/O in detail","text":"Whatever contents file, always need address () questions:comment lines top?header line column names?column separator?quotes around character data?missing values encoded?numeric values encoded?dates (special challenge)type column?\ncharacter / numeric / factor / date-time\ncharacter / numeric / factor / date-time","code":""},{"path":"complex-datatypes-and-file-reading.html","id":"some-read.table-arguments","chapter":"4 Complex Datatypes and File Reading","heading":"Some read.table() arguments","text":"","code":""},{"path":"complex-datatypes-and-file-reading.html","id":"the-data-reading-workflow","chapter":"4 Complex Datatypes and File Reading","heading":"The data reading workflow","text":"Always apply sequence steps repeat satisfied result:read.table() arguments seem OKCheck result least str() head() verify columns correct data type.\nFactors numeric expected indicate missed “NA” values!\nFactors numeric expected indicate missed “NA” values!Adjust read.table parametersRinse repeat","code":""},{"path":"complex-datatypes-and-file-reading.html","id":"simple-dataframe-manipulations","chapter":"4 Complex Datatypes and File Reading","heading":"4.3.3 Simple dataframe manipulations","text":"various helper methods can use inspect contents nature dataframe columns rows:dim() gives rows columnsncol() gives number columnsnrow() gives number rowsnames() gives column names (synonym colnames())rownames() gives row namesBut visualizing data speaks thousand words course.","code":"\nggplot(data = whale_selenium,\n       mapping = aes(x = liver.Se, y = tooth.Se)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = \"y~x\", se = F) +\n  xlab(\"Liver Selenium\") +\n  ylab(\"Tooth Selenium\")"},{"path":"complex-datatypes-and-file-reading.html","id":"changing-column-names","chapter":"4 Complex Datatypes and File Reading","heading":"Changing column names","text":"Sometimes existing column names convenient work (unclear, long etc.). case may good idea change column names. can use either names() colnames().","code":"\nnames(whale_selenium) <- c(\"liver\", \"tooth\")\nhead(whale_selenium, n=2)##   liver  tooth\n## 1  6.23 140.16\n## 2  6.79 133.32\n##or\ncolnames(whale_selenium) <- c(\"pancreas\", \"colon\")\nhead(whale_selenium, n=2)##   pancreas  colon\n## 1     6.23 140.16\n## 2     6.79 133.32"},{"path":"complex-datatypes-and-file-reading.html","id":"adding-columns","chapter":"4 Complex Datatypes and File Reading","heading":"Adding columns","text":"can add single column simply specifying name value(s) attached.Alternatively, use cbind. bit versatile can add multiple columns .","code":"\n## add simulated stomach data\nwhale_selenium$stomach <- rnorm(nrow(whale_selenium), 42, 6) \nhead(whale_selenium, n=2)##   liver  tooth  stomach\n## 1  6.23 140.16 52.53270\n## 2  6.79 133.32 50.69782\ncbind(whale_selenium, \"brain\" = c(1, 0)) #cycled values!##    liver  tooth  stomach brain\n## 1   6.23 140.16 52.53270     1\n## 2   6.79 133.32 50.69782     0\n## 3   7.92 135.34 39.30723     1\n## 4   8.02 127.82 42.84040     0\n## 5   9.34 108.67 39.75810     1\n## 6  10.00 146.22 34.76140     0\n## 7  10.57 131.18 26.03192     1\n## 8  11.04 145.51 41.84943     0\n## 9  12.36 163.24 41.79376     1\n## 10 14.53 136.55 51.85415     0\n## 11 15.28 112.63 30.02723     1\n## 12 18.68 245.07 38.02698     0\n## 13 22.08 140.48 47.28023     1\n## 14 27.55 177.93 44.05432     0\n## 15 32.83 160.73 42.73052     1\n## 16 36.04 227.60 38.27543     0\n## 17 37.74 177.69 43.20567     1\n## 18 40.00 174.23 40.58457     0\n## 19 41.23 206.30 42.68197     1\n## 20 45.47 141.31 38.53242     0"},{"path":"complex-datatypes-and-file-reading.html","id":"adding-rows-rbind","chapter":"4 Complex Datatypes and File Reading","heading":"Adding rows: rbind()","text":"Adding rows dataframe similar. however constraint: column names dataframes need match operation succeed.","code":"\nmy_data1 <- data.frame(colA = 1:3, colB = c(\"a\", \"b\", \"c\"))\nmy_data2 <- data.frame(colA = 4:5, colB = c(\"d\", \"e\"))\nmy_data_complete <- rbind(my_data1, my_data2)\nmy_data_complete##   colA colB\n## 1    1    a\n## 2    2    b\n## 3    3    c\n## 4    4    d\n## 5    5    e"},{"path":"complex-datatypes-and-file-reading.html","id":"selections-on-dataframes","chapter":"4 Complex Datatypes and File Reading","heading":"4.3.4 Selections on dataframes","text":"Making selections dataframes surprising already know vectors lists. one extension. fact square grid-like structure makes possible add extra way making selections: combining rows column selections subgrids. section extensively reviews means making selections.summary:Select single column using $ return vectorSelecting double brackets [[<name>]] [[<index>]] return vectorSelecting single brackets [<name>] [<index>] return dataframeSelecting row--column coordinates [row_selection, col_selection] returns either vector dataframe, depending selection made. , row_selection col_selection can \nnumerical vector length 1 \nlogical vector length 1 \nempty (select rows/columns)\nnumerical vector length 1 morea logical vector length 1 moreempty (select rows/columns)follow examples.vectors lists, R cycle selectors, can select element often want.dataframe much like list, entirely equal:dataframe can usually treated list, list can rarely treated dataframe.","code":"> genes[2,1]            #row 2, column 1## [1] \"BRCA1\"> genes[2, 1:2]     #row 2, columns 1 and 2##    name significant\n## 2 BRCA1        TRUE> genes[2, c(1, 3)] #row 2, column 1 and 3##    name expression\n## 2 BRCA1        7.3> genes$name          #column \"name\"## [1] \"P53\"   \"BRCA1\" \"VAMP1\" \"FHIT\"> genes[, c(\"name\", \"expression\")]  #columns \"name\" and \"expression\", all rows##    name expression\n## 1   P53        4.5\n## 2 BRCA1        7.3\n## 3 VAMP1        5.4\n## 4  FHIT        2.4> genes[, 1:2]      #columns 1 and 2, all rows##    name significant\n## 1   P53        TRUE\n## 2 BRCA1        TRUE\n## 3 VAMP1       FALSE\n## 4  FHIT       FALSE> genes[1:2, ]      #row 1 and 2, all columns##    name significant expression\n## 1   P53        TRUE        4.5\n## 2 BRCA1        TRUE        7.3\ngenes[c(T, F), 1]   #every uneven row, column 1## [1] \"P53\"   \"VAMP1\"\ngenes[c(1, 1, 1, 2), ]  #three times row 1 and row 2##      name significant expression\n## 1     P53        TRUE        4.5\n## 1.1   P53        TRUE        4.5\n## 1.2   P53        TRUE        4.5\n## 2   BRCA1        TRUE        7.3\ngenes[[\"name\"]] ## select column w. double brackets## [1] \"P53\"   \"BRCA1\" \"VAMP1\" \"FHIT\"\nclass(genes) ## it is NOT a list though## [1] \"data.frame\"\nstr(genes)## 'data.frame':    4 obs. of  3 variables:\n##  $ name       : chr  \"P53\" \"BRCA1\" \"VAMP1\" \"FHIT\"\n##  $ significant: logi  TRUE TRUE FALSE FALSE\n##  $ expression : num  4.5 7.3 5.4 2.4"},{"path":"complex-datatypes-and-file-reading.html","id":"selections-with-subset","chapter":"4 Complex Datatypes and File Reading","heading":"Selections with subset()","text":"section optional; going proceed dplyr package makes operations easier.Function subset() can serve alternative “bracket-based” selections ([ , ]).\ncan use subset() make column row selections. , using subset =, rows selected Solar.R available using .na() function.Note don’t even need use quotes column names.Select columns select = argument.course, can combine row colum selection:subset() can used sophisticated; however going see subset() steroids next course: functions package dplyr.","code":"\nhead(subset(airquality, subset = !is.na(Solar.R)))##   Ozone Solar.R Wind Temp Month Day\n## 1    41     190  7.4   67   May   1\n## 2    36     118  8.0   72   May   2\n## 3    12     149 12.6   74   May   3\n## 4    18     313 11.5   62   May   4\n## 7    23     299  8.6   65   May   7\n## 8    19      99 13.8   59   May   8\nhead(subset(airquality, select = c(Ozone, Solar.R)))##   Ozone Solar.R\n## 1    41     190\n## 2    36     118\n## 3    12     149\n## 4    18     313\n## 5    NA      NA\n## 6    28      NA\nhead(subset(airquality, \n            subset = !is.na(Solar.R), \n            select = c(Ozone, Solar.R)))##   Ozone Solar.R\n## 1    41     190\n## 2    36     118\n## 3    12     149\n## 4    18     313\n## 7    23     299\n## 8    19      99\n# shorthand notation\n#subset(airquality, Day == 1, select = -Temp)"},{"path":"ggplot2.html","id":"ggplot2","chapter":"5 Basics of the ggplot2 package","heading":"5 Basics of the ggplot2 package","text":"chapter, ’ll explore basics ggplot2 package. package one popular packages R, de facto standard creating publishable visualizations. later chapter present details possibilities.Whole books written ggplot2 (e.g. ggplot2 - Elegant Statistics Data Aanalysis); repeated . Instead, selected minimal amount information examples get going visualization endeavours biomedical research. reason, chapter deals base ggplot() function important usage scenarios.\nopinion, best prepared first learning ggplot “language” structure, complete listing possibilities. can check later . interested package offer, type help(package=\"ggplot2\") console.","code":""},{"path":"ggplot2.html","id":"getting-started-1","chapter":"5 Basics of the ggplot2 package","heading":"5.1 Getting started","text":"","code":""},{"path":"ggplot2.html","id":"keep-the-goal-in-mind","chapter":"5 Basics of the ggplot2 package","heading":"Keep the goal in mind","text":"always remember purpose create plot:Communicate results visual way. audience consists professionals: fellow scientists, students, project managers, CEO’s. scope reports, publications, presentations etc. plots immaculately annotated - title /caption, axis labels physical quantities (e.g. Temperature) measurement units (e.g. Celsius), legend (relevant).Create representation data visual inspection. audience . especially important Exploratory Data Analysis (EDA). visualize data order discover patterns, trends, outliers generate new questions hypotheses. biggest challenge select correct, appropriate visualization keeps moving research track.Besides , course choose relevant visualization data. instance, generating boxplot representing data points poor choice, scatterplot millions data points almost always .help imagination see possible really browse R Graph Gallery. code charts gallery.","code":""},{"path":"ggplot2.html","id":"a-first-plot","chapter":"5 Basics of the ggplot2 package","heading":"A first plot","text":"Install packages ggplot2 first, already installed.installing, ’ll need load packages.Let’s dive right create first plot, walk different parts code.\nFigure 5.1: scatter plot visualizing Ozone function Temperature\ntwo chained function calls: ggplot() geom_point(). chained using + operator. first function, ggplot(), creates base layer plot. receives data defines maps two axes. , ggplot(), display anything data. creates empty plot axes defined correct scale:\nFigure 5.2: empty plot pane\nnext function, geom_point(), builds base layer receives via + operator adds new layer plot, data representation using points.geom_point() function encounters rows missing data issues warning (Warning: Removed 37 rows...) proceeds anyway. two ways prevent annoying warning message. first put warning=FALSE statement RMarkdown chunk header. usually good idea explicit problem handling implementing data analysis workflow hinders reproducibility work. Therefore, removing missing values explicitly better solution:obtain similar plot created “base” R, done something like :\nFigure 5.3: visualization base R\ncan immediately see ggplot2 become popular. creating complex plots becomes obvious still, shown .","code":"\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\nggplot(data = airquality, mapping = aes(x = Temp, y = Ozone)) + \n  geom_point()## Warning: Removed 37 rows containing missing values (`geom_point()`).\nggplot(data = airquality, mapping = aes(x = Temp, y = Ozone))\nairqual <- na.omit(airquality)\n#convert to use month labels instead of numbers\nairqual$Month <- as.factor(month.abb[airqual$Month])\nggplot(data = airqual, mapping = aes(x = Temp, y = Ozone)) +\n  geom_point()\nwith(airqual, plot(x = Temp, y = Ozone))"},{"path":"ggplot2.html","id":"adding-a-dimension-using-color","chapter":"5 Basics of the ggplot2 package","heading":"Adding a dimension using color","text":"plot shows power ggplot2: building complex visualizations minimal code.\nFigure 5.4: Ozone function Temp plot symbols colored Month\n","code":"\nggplot(data = airqual, mapping = aes(x = Temp, y = Ozone, color = Month)) +\n  geom_point() "},{"path":"ggplot2.html","id":"inspecting-and-tuning-the-figure","chapter":"5 Basics of the ggplot2 package","heading":"Inspecting and tuning the figure","text":"can tell data measurements looking plot?Looking plot, notice thatthe temperature measurement probably degrees Fahrenheit. apparent plot. measurement unit Ozone missing. look ; datasets package doc says Parts Per Billion (ppb).temperature lowest fifth month -probably May make certain- highest months 8 9.ozone levels seem positively correlated temperature (Month), obvious linear waya detail: temperature measured whole degrees . give plotting artifacts: discrete vertical lines data points.plot fixes addresses issues create publication-ready figure. ’ll get details code proceed chapter. now message meticulous constructing plot.\nFigure 5.5: Ozone level dependency Temperature. Grey area: Loess smoother 95% confidence interval. Source: R dataset “Daily air quality measurements New York, May September 1973.”\n","code":"\nggplot(data = airqual, \n       mapping = aes(x = Temp, y = Ozone)) +\n  geom_point(mapping = aes(color = Month)) + \n  geom_smooth(method = \"loess\", formula = y ~ x) + #the default formula, but prevents a printed message\n  xlab(expression(\"Temperature \" (degree~F))) +\n  ylab(\"Ozone (ppb)\") "},{"path":"ggplot2.html","id":"overview-of-ggplot","chapter":"5 Basics of the ggplot2 package","heading":"5.2 Overview of ggplot","text":"","code":""},{"path":"ggplot2.html","id":"ggplot2-and-the-theory-of-graphics","chapter":"5 Basics of the ggplot2 package","heading":"5.2.1 ggplot2 and the theory of graphics","text":"","code":""},{"path":"ggplot2.html","id":"philosophy-of-ggplot2","chapter":"5 Basics of the ggplot2 package","heading":"Philosophy of ggplot2","text":"author ggplot2, Hadley Wickham, clear goal mind embarked development package:“emphasis ggplot2 reducing amount thinking time making easier go plot brain plot page.” (Wickham, 2012)way achieved “grammar graphics”","code":""},{"path":"ggplot2.html","id":"the-grammar-of-graphics","chapter":"5 Basics of the ggplot2 package","heading":"The grammar of graphics","text":"grammar graphics tells us statistical graphic mapping data geometric objects (points, lines, bars) aesthetic attributes (color, shape, size).plot may also contain statistical transformations data drawn specific coordinate system. Faceting -grid layout- can used generate plot different subsets dataset.\n(Wickham, 2010)","code":""},{"path":"ggplot2.html","id":"building-plots-with-ggplot2","chapter":"5 Basics of the ggplot2 package","heading":"5.2.2 Building plots with ggplot2","text":"","code":""},{"path":"ggplot2.html","id":"the-layered-plot-architecture","chapter":"5 Basics of the ggplot2 package","heading":"The layered plot architecture","text":"graph ggplot2 built using “layers”, building blocks.Table 5.1: three core ggplot2 layersFirst, data layer - input data want visualize:data layerNext, using aes() function, data mapped coordinate system. encompasses xy-coordinates also possible extra plot dimensions color shape.data aesthetic layersAs third step, data visually represented way, using geometry (dealt one many geom_....() functions). Examples geometries point scatterplots, boxplot, line etc.data, aesthetic geometry layersAt minimum, three layers used every plot create.Besides fundamental aspects elements may wish add modify: axis labels, legend, titles, etc. constitute additional, optional layers:layersExcept Statistics Coordinates, layers discussed detail subsequent paragraphs.","code":""},{"path":"ggplot2.html","id":"tidy-the-data","chapter":"5 Basics of the ggplot2 package","heading":"“Tidy” the data","text":"important aspect plotting using ggplot2: getting data way ggplot2 can deal . Sometimes may bit challenging get data format: form data mangling often required. get data like topic next chapter, ’ll already see little preview.ggplot2 function expects data come tidy format. dataset considered tidy formed according rules:variable column.observation row.value cell.Want know tidy data? Read paper Hadley Wickham: (tidy-data?).example dataset requires mangling, tidying, adhere rules.dataset tidy independent variable -dose- column; value now buried inside two column headers (dose10mg dose10mg). Also, actually single variable -response- now split two columns. Thus, row now contains two observations.Suppose want plot response function dose. quite possible right now ggplot2. want something likeThe problem specify mapping straightforward manner.\nNote base R probably :\nFigure 5.6: Selecting untidy data\n, need tidy dataframe since dose_10_response dose_100_response columns actually describe variable (measurement) different conditions.\nLuckily, nice package makes quite easy: tidyr.","code":"##    patient sex dose10mg dose100mg\n## 1      001   f       12        88\n## 2      002   f       11        54\n## 3      003   m       54        14\n## 4      004   m       71        21\n## 5      005   f       19        89\n## 6      006   f       22        99\n## 7      007   f       23        69\n## 8      008   m       68        31\n## 9      009   f       30        85\n## 10     010   m       83        18\n## 11     011   m       72        37\n## 12     012   m       48        28\n## 13     013   m       67        16\n## 14     014   f       13        79\n## 15     015   m       73        22\n## 16     016   f       20        84\n## 17     017   f       22        96\n## 18     018   m       40        14\n## 19     019   m       57        12\n## 20     020   f       26        63\n## 21     021   f       17        89\n## 22     022   f       29        77\n## 23     023   m       54        21\n## 24     024   m       61        10\n## 25     025   m       57        36\n## 26     026   f       11        80\nggplot(data=dose_response,\n       mapping = aes(x = \"<I want to get the dose levels here>\",\n                     y = \"<I want to get the response here>\")) +\n    geom_boxplot()\nboxplot(dose_response$dose10mg, dose_response$dose100mg)"},{"path":"ggplot2.html","id":"tidying-data-using-tidyrpivot_longer","chapter":"5 Basics of the ggplot2 package","heading":"Tidying data using tidyr::pivot_longer()","text":"data tidy now, ready use within ggplot2.’ll explore pivot_longer() function detail next chapter discussing tidyr package.Now, creating plot ggplot2 breezeWould proceed hypothetical drug?","code":"\n## tidy\ndose_response_tidy <- pivot_longer(data = dose_response,\n                                   cols = c(\"dose10mg\", \"dose100mg\"),\n                                   names_pattern = \"dose(\\\\d+)mg\",\n                                   names_to = \"dose\",\n                                   values_to = \"response\")\n\nDT::datatable(dose_response_tidy, \n              options = list(pageLength = 15,\n                             dom = 'tpli'))\ndr_plot <- ggplot(dose_response_tidy, aes(x = dose, y = response))\ndr_plot + \n    geom_boxplot()"},{"path":"ggplot2.html","id":"inheritance-of-aesthetics","chapter":"5 Basics of the ggplot2 package","heading":"5.2.3 Inheritance of aesthetics","text":"code creates figure see two calls aes() function: one ggplot() one geom_point(). Look code, aesthetics combined main ggplot call.\nFigure 5.7: Ozone level dependency Temperature. Grey area: Loess smoother 95% confidence interval. Source: R dataset “Daily air quality measurements New York, May September 1973.”\ndifference cause inheritance aesthetics!Like main ggplot() function, every geom_ function accepts mapping = aes(...). mapping inherited ggplot() function aes(...) mapping defined main ggplot() call applies subsequent layers. However, can specify “local” aesthetic mapping within geom_xxxx(). Aesthetics defined within geom_ function scoped function call .plot see another example works (nice plot ).aesthetics defined outside aes() function calls static properties dealt literal manner.Note can “override” global (ggplot()) aesthetics geom_xxx() can give unexpected behavior, seen paragraph Color.","code":"\nggplot(data = airqual, \n       mapping = aes(x = Temp, y = Ozone, color = Month)) +\n  geom_point() + \n  geom_smooth(method = \"loess\", formula = y ~ x) + #the default formula, but prevents a printed message\n  xlab(expression(\"Temperature \" (degree~F))) +\n  ylab(\"Ozone (ppb)\") \nggplot(data = airqual, mapping = aes(x = Solar.R, y = Ozone)) +\n    geom_smooth(aes(linetype = Month), method = \"lm\", formula = y ~ x) +\n    geom_point(aes(color = Month), alpha = 0.7) "},{"path":"ggplot2.html","id":"aesthetics","chapter":"5 Basics of the ggplot2 package","heading":"5.3 Aesthetics","text":"obtain tidy dataset pass ggplot must decide aesthetics : way data represented plot. roughly speaking, correlate aesthetics dimensions data want visualize. instance, given chapters’ first example airquality dataset, aesthetics defined three “dimensions”:\n- dimension “X” temperature,\n- dimension “Y” Ozone\n- dimension “color” month.Although color used often represent extra dimension data, aesthetics may consider shape, size, line width, line type facetting (making grid plots).","code":""},{"path":"ggplot2.html","id":"colors","chapter":"5 Basics of the ggplot2 package","heading":"Colors","text":"Colors can defined variety ways ggpplot (R general):color nameexisting color palettecustom color paletteBelow panel displaying named colors can use RWhen provide literal (character) color aesthetic simply color. want map property (e.g. “Month”) range colors, use color palette. Since ggplot build-color palettes, can simply use color=<-third-dimension-variable>. variable mapping color can either factor (discrete scale) numeric (continuous scale).\nggplot function map variable default color palette.aware big difference specify aesthetic. mapped onto variable (values within column) put within aes() call. want specify literal -static- aesthetic (e.g. color) place outside aes() call. misplace mapping get strange behavior:work either (evaluated gives error):specify twice ‘specific’ take precedence (legend label incorrect ):look paragraph “Inheritance aesthetics” detail.\nways work color palettes","code":"\nggplot(iris, aes(Sepal.Length, Sepal.Width)) + \n    geom_point(aes(color = 'Green'))\nggplot(iris, aes(Sepal.Length, Sepal.Width)) + \n    geom_point(color = Species)\nggplot(data = airqual, \n       mapping = aes(x = Ozone, y = Solar.R, color = Month)) +\n    geom_point(mapping = aes(color = Day))"},{"path":"ggplot2.html","id":"the-default-palette","chapter":"5 Basics of the ggplot2 package","heading":"The default palette","text":"","code":"\n#store it in variable \"sp\" for re-use in subsequenct chunks\nsp <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + \n    geom_point(aes(color = Species))\nsp"},{"path":"ggplot2.html","id":"manual-palettes","chapter":"5 Basics of the ggplot2 package","heading":"Manual palettes","text":"can specify colors using scale_color_manual() scatter plots scale_fill_manual() boxplots bar plots.palette defined using hexadecimal notation: color can specified mix Red, Green, Blue values range 0 255. Hexadecimal notation position 1 2 (Red), 3 4 (Green) 5 6 (Blue) hash sign (#). 00 equals zero FF equals 255 (16*16). quite universal encoding: gazillion websites style pages using notation.nice set colors:colorblind-friendly palette:pass palette longer number levels factor, R use many required:","code":"\nsp + scale_color_manual(values = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"))\ncustom_col <- c(\"#FFDB6D\", \"#C4961A\", \"#F4EDCA\", \n                \"#D16103\", \"#C3D7A4\", \"#52854C\", \"#4E84C4\", \"#293352\")\nshow_palette(custom_col, cols=length(custom_col))\n# The palette with grey:\ncbp1 <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\",\n          \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\nshow_palette(cbp1, cols=length(cbp1))\nsp + scale_color_manual(values = cbp1)"},{"path":"ggplot2.html","id":"shapes","chapter":"5 Basics of the ggplot2 package","heading":"Shapes","text":"shapes available ggplot2 (base R well).Warning: clutter plot many dimensions/aesthetics!","code":"\nshapes <- data.frame(\n  shape = c(0:19, 22, 21, 24, 23, 20),\n  x = 0:24 %/% 5,\n  y = -(0:24 %% 5)\n)\nggplot(shapes, aes(x, y)) + \n  geom_point(aes(shape = shape), size = 5, fill = \"red\") +\n  geom_text(aes(label = shape), hjust = 0, nudge_x = 0.15) +\n  scale_shape_identity() +\n  #expand_limits(x = 4.1) +\n  theme_void()"},{"path":"ggplot2.html","id":"lines","chapter":"5 Basics of the ggplot2 package","heading":"Lines","text":"Geoms draw lines “linetype” parameter.Legal values strings “blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”. Alternatively, numbers 0 6 can used (0 “blank”, 1 “solid”, …).can set line type constant value. use linetype geom parameter. instance, geom_line(data=d, mapping=aes(x=x, y=y), linetype=3) sets line type lines layer 3, corresponds dotted line), can also use dynamically.example female male deaths UK 72 successive months plotted. linetype = sex aesthetic well defined within global ggplot call. may bit logical specify applies geom.\nwant add lines type, color width, can use group= argument geom_line(). next example, chickens diet get colour:","code":"\ndeaths <- data.frame(\n    month = rep(1:72, times = 2), \n    sex = rep(factor(c(\"m\", \"f\")), each = 72),\n    deaths = c(mdeaths, fdeaths)\n)\n\nggplot(data = deaths, mapping = aes(x = month, y = deaths)) +\n    geom_line(aes(linetype = sex))\nggplot(data = ChickWeight,\n       mapping = aes(x = Time, y = weight, color = Diet)) +\n    geom_line(aes(group=Chick)) +\n    theme_classic()"},{"path":"ggplot2.html","id":"size","chapter":"5 Basics of the ggplot2 package","heading":"Size","text":"size plotting symbol can also used extra dimension visualization. example showing solar radiation airquality data third dimension.","code":"\nggplot(data = airqual, \n       mapping = aes(x = Wind, y = Ozone, size = Solar.R)) +\n    geom_point(color = \"red\", alpha = 0.5) +\n    labs(size = \"Solar radiation (Lang)\") "},{"path":"ggplot2.html","id":"geometries","chapter":"5 Basics of the ggplot2 package","heading":"5.4 Geometries","text":"","code":""},{"path":"ggplot2.html","id":"what-are-geometries","chapter":"5 Basics of the ggplot2 package","heading":"What are geometries","text":"Geometries ways data can visually represented. Boxplot, scatterplot histogram examples. many geoms available ggplot2; type geom_ console get listing. Even available outside ggplot2 package. ’ll explore used geoms science.","code":""},{"path":"ggplot2.html","id":"boxplot","chapter":"5 Basics of the ggplot2 package","heading":"Boxplot","text":"Boxplot one -used data visualizations. displays 5-number summary containing bottom top: minimum, first quartile, median (= second quartile), third quartile, maximum. Outliers, usually defined 1.5 * IQR median, displayed separate points. color added example .","code":"\ndr_plot <- ggplot(dose_response_tidy, aes(x = dose, y = response))\ndr_plot + geom_boxplot(fill='#E69F00')"},{"path":"ggplot2.html","id":"jitter","chapter":"5 Basics of the ggplot2 package","heading":"Jitter","text":"Jitter good alternative boxplot small sample sizes, discrete measurements many exact copies, resulting much overlap. Use width height attributes adjust jittering.Note vertical jitter set zero y-axis values already continuous scale. use vertical jittering discreet values otherwise overlap much., split sexes added. Suddenly, dramatic dosage effect becomes apparent smoothed two sexes combined.Alternatively, use grid plots emphasize contrast .","code":"\ndr_plot + geom_jitter(width = 0.1, height = 0)\ndr_plot + geom_jitter(width = 0.1, height = 0, aes(colour = sex))\ndr_plot + \n    geom_jitter(width = 0.1, height = 0, aes(colour = sex)) + \n    facet_wrap( . ~ sex)"},{"path":"ggplot2.html","id":"plot-overlays-boxplot-jitter","chapter":"5 Basics of the ggplot2 package","heading":"Plot overlays: boxplot + jitter","text":"example shows can overlay plots top much like. order define layers order stacked top graph. use feature:\ngridExtra package discussed complex setting , section “Advanced plotting aspects”.","code":"\nlibrary(gridExtra) ## \n## Attaching package: 'gridExtra'## The following object is masked from 'package:dplyr':\n## \n##     combine\ndr_plot <- ggplot(dose_response_tidy, aes(x = dose, y = response))\np1 <- dr_plot + \n    geom_boxplot(fill='#E69F00') +\n    geom_jitter(width = 0.1, height = 0, size = 2, alpha = 0.4)\np2 <- dr_plot + \n    geom_jitter(width = 0.1, height = 0, size = 2, alpha = 0.6) +\n    geom_boxplot(fill='#E69F00') \ngrid.arrange(p1, p2, nrow = 1) #create a panel of plots"},{"path":"ggplot2.html","id":"plot-overlays-smooth-ribbon","chapter":"5 Basics of the ggplot2 package","heading":"Plot overlays: smooth + ribbon","text":"another pair examples overlays different geoms. first, original datapoints included.Note method = \"loess\", formula = \"y ~ x\" arguments geom_smooth() defaults. However, omitted trigger message (\\geom_smooth()` using method = ‘loess’ formula ‘y ~ x’`) like output.\nsecond example, data points omitted altogether, making plot focus solely global trend.","code":"\nggplot(mpg, aes(displ, hwy)) +\n    geom_point(alpha = 0.4) +\n    geom_smooth(se = FALSE, color = \"darkgreen\", method = \"loess\", formula = \"y ~ x\") +\n    geom_ribbon(aes(ymin = 0,\n                    ymax = predict(loess(hwy ~ displ))),\n                alpha = 0.3, fill = 'green')\nggplot(mpg, aes(displ, hwy)) +\n    geom_smooth(se = FALSE, color = \"darkgreen\") +\n    geom_ribbon(aes(ymin = 10,\n                    ymax = predict(loess(hwy ~ displ))),\n                alpha = 0.3, fill = 'green') +\n    ylim(10, max(mpg$hwy))## `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"ggplot2.html","id":"scatterplot-points","chapter":"5 Basics of the ggplot2 package","heading":"Scatterplot: Points","text":"geom_point() function used create good old scatterplot seen several examples already.","code":""},{"path":"ggplot2.html","id":"line-plots","chapter":"5 Basics of the ggplot2 package","heading":"Line plots","text":"points can logically connected may good idea use line visualize trends, seen deaths plot section Aesthetics.want lines points need overlay . example take bit bu adding dimension ‘activity’ points geom . typical case geom_line since measurements two beavers taken sequentially, particular beaver.","code":"\nb1_start <- beaver1[1, \"time\"] / 60\nb2_start <- beaver1[2, \"time\"] / 60\n\nsuppressMessages(library(dplyr))\n#uses dplyr (later this course)\nbeaverA <- beaver1 %>% mutate(time_h = seq(from = b1_start, \n                                           to = b1_start + (nrow(beaver1)*10)/60, \n                                           length.out = nrow(beaver1)))\nbeaverB <- beaver2 %>% mutate(time_h = seq(from = b2_start, \n                                           to = b2_start + (nrow(beaver2)*10)/60, \n                                           length.out = nrow(beaver2)))\nbeavers_all <- bind_rows(beaverA, beaverB) %>%\n    mutate(beaver = c(rep(\"1\", nrow(beaverA)), rep(\"2\", nrow(beaverB))),\n           activity = factor(activ, levels = c(0, 1), labels = c(\"inactive\", \"active\")))\n\nggplot(data = beavers_all, aes(x = time_h, y = temp)) +\n    geom_line(aes(linetype = beaver)) +\n    geom_point(aes(color = activity)) +\n    xlab(\"time (h)\") +\n    ylab(expression('Temperature ('*~degree*C*')'))"},{"path":"ggplot2.html","id":"histograms-1","chapter":"5 Basics of the ggplot2 package","heading":"Histograms","text":"histogram means visualize distribution dataset, boxplot (geom_boxplot()), violin plot (geom_violin()) density plot (geom_freqpoly()).look eruption intervals “faithful” geyser. binwidth argument used adjust number bins. Alternative use bins argument.statistics available adjust shown y axis. default used geom_histogram stat(count), don’t specify anything used. want scaled maximum 1, use stat(count / max(count)). stat() function flag ggplot2 want use calculated aesthetics produced statistic.can use transformation statistic, e.g. y = stat(log2(count)).Alternatively, want percentages, can use y = stat(count / sum(count) * 100).","code":"\nggplot(data=faithful, mapping = aes(x = waiting)) + \n    geom_histogram(binwidth = 3)\nggplot(data=faithful, mapping = aes(x = waiting)) + \n    geom_histogram(binwidth = 3, aes(y = stat(count / max(count)))) + \n    ylab(label = \"normalized proportion\")## Warning: `stat(count / max(count))` was deprecated in ggplot2 3.4.0.\n## ℹ Please use `after_stat(count / max(count))` instead.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\nggplot(data=faithful, mapping = aes(x = waiting)) + \n    geom_histogram(binwidth = 3, mapping = aes(y = stat(count / sum(count) * 100))) + \n    ylab(label = \"%\")"},{"path":"ggplot2.html","id":"violin-plot","chapter":"5 Basics of the ggplot2 package","heading":"Violin plot","text":"violin plot compact display continuous distribution. blend geom_boxplot() geom_density(): violin plot mirrored density plot displayed way boxplot. seen often . example best explains.","code":"\nggplot(data=airqual, mapping = aes(x = Month, y = Temp, fill = Month)) +\n    geom_violin() + theme(legend.position = \"none\")"},{"path":"ggplot2.html","id":"barplot","chapter":"5 Basics of the ggplot2 package","heading":"Barplot","text":"bar plot similar histogram appearance, quite different intent. histogram visualizes density continuous variable, bar plot tries visualize counts (weights) distinct groups.don’t provide weight aesthetic, geom_bar count occurrences different values provided x-axis variable. example.can provide weight argument case counts replaced literal value found variable.\nsmall example ten subjects sleep dataset charted (x axis), extra column provided height bar, split two groups. used position argument get side--side bars instead stacked top .\nposition = argument \"dodge\" simple side--side plotting bars.","code":"\nggplot(data = esoph,\n       mapping = aes(x = alcgp)) +\n    geom_bar(fill = \"darkgreen\") +\n    theme_classic()\nggplot(data = sleep, mapping = aes(ID)) +\n    geom_bar(aes(weight = extra, fill = group), \n             position = position_dodge(width=0.7),\n             alpha = 0.6, color = \"black\") +\n    scale_fill_manual(values = c(\"darkblue\", \"red\")) +\n    labs(x = \"student ID\", y = \"increase in sleep (h)\", fill = \"Drug\") + \n    theme_classic()"},{"path":"ggplot2.html","id":"overview-of-the-main-geoms","chapter":"5 Basics of the ggplot2 package","heading":"Overview of the main geoms","text":"many geoms even outside ggplot2 package.\nsmall overview .Table 5.2: geomsIf want know , simply type ?geom_ select one looks like thing want, go tidyverse ggplot2 reference page.","code":""},{"path":"ggplot2.html","id":"faceting","chapter":"5 Basics of the ggplot2 package","heading":"5.5 Faceting","text":"Faceting process splitting multiple plots exactly coordinate system plot show subset data. can applied geom. figure improved slightly technique.","code":"\nggplot(data = airqual, mapping = aes(x = Solar.R, y = Ozone)) +\n    geom_smooth(aes(linetype = Month), method = \"lm\", formula = y ~ x) +\n    geom_point(aes(color = Month), alpha = 0.7) + \n    facet_wrap(. ~ Month)"},{"path":"built-in-functions.html","id":"built-in-functions","chapter":"6 Built-in Functions","heading":"6 Built-in Functions","text":"chapter deals -used functions R offer. clean installation R already contains hundreds functions; see complete listing functions base package.\nObviously, eBook platform discuss exhaustively. Therefore, chose deal ones use regularly.\nBesides , tidyverse packages tidyr dplyr offer functionality better alternatives many base R functions. packages discussed later chapters.","code":""},{"path":"built-in-functions.html","id":"descriptive-statistics","chapter":"6 Built-in Functions","heading":"6.1 Descriptive statistics","text":"R provides wealth descriptive statistics functions. important ones listed . ones asterisk described detail following paragraphs.","code":""},{"path":"built-in-functions.html","id":"the-quantile-function","chapter":"6 Built-in Functions","heading":"The quantile() function","text":"function gives data values corresponding specified quantiles. function defaults quantiles 0%  25%  50%  75% 100%: quartiles course.","code":"\nquantile(ChickWeight$weight)##   0%  25%  50%  75% 100% \n##   35   63  103  164  373\nquantile(ChickWeight$weight, probs = seq(0, 1, 0.2))##   0%  20%  40%  60%  80% 100% \n##   35   57   85  126  182  373"},{"path":"built-in-functions.html","id":"interquantile-range-iqr","chapter":"6 Built-in Functions","heading":"Interquantile range IQR()","text":"Function IQR() gives range 25% 75% quantiles.","code":"\nIQR(ChickWeight$weight)## [1] 101\n## same as\nquantile(ChickWeight$weight)[4] - quantile(ChickWeight$weight)[2]## 75% \n## 101\n## same as\ndiff(quantile(ChickWeight$weight, probs = c(0.25, 0.75)))## 75% \n## 101"},{"path":"built-in-functions.html","id":"boxplot-is-summary-visualized","chapter":"6 Built-in Functions","heading":"boxplot() is summary() visualized","text":"Boxplot graph 5-number summary, summary() also gives mean","code":"\nsummary(ChickWeight$weight)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##      35      63     103     122     164     373\nboxplot(ChickWeight$weight)"},{"path":"built-in-functions.html","id":"general-purpose-functions","chapter":"6 Built-in Functions","heading":"6.2 General purpose functions","text":"","code":""},{"path":"built-in-functions.html","id":"dealing-with-nas","chapter":"6 Built-in Functions","heading":"6.2.1 Dealing with NAs","text":"Dealing NA big thing. work external data always possibility values missing.aware possible test NA values (Available) values way; using == simply return NA:Important functions dealing na.omit() (drop_na() dplyr) complete.cases(). first drops rows dataframe contain least one NA; returns logical indicating rows complete; .e. without NA.\nBesides , many functions R (variant ) na.rm = argument. instance, sum() function encounters NA input vector, always return NA:","code":"\nx <- NA\nx == NA## [1] NA\nx <- c(1, 2, 3, NA)\nsum(x)## [1] NA\nsum(x, na.rm = TRUE)## [1] 6"},{"path":"built-in-functions.html","id":"convert-numeric-vector-to-factor-cut","chapter":"6 Built-in Functions","heading":"6.2.2 Convert numeric vector to factor: cut()","text":"Sometimes useful work factor instead numeric vector. instance, working Body Mass Index (bmi) variable may nice split factor analyses.\nfunction cut() used .\nSuppose following fictitious datasetYou can course look income function bmi using scatter plot:wouldn’t nice look bmi categories defined ? able , need split numeric bmi variable factor using cut().breaks = argument specifies split positions; right = F arguments specifies interval inclusive lower (left) boundary:interval written (5,10] means -excluding- 5 -including- 10.\nNote first example last value (10) becomes NA 10 exclusive interval specification.","code":"\n## body mass index\nbmi <- c(22, 32, 21, 37, 28, 34, 26, 29,\n         41, 18, 22, 27, 32, 31, 26)\n## year income * 1000 euros\nincome <- c(23, 14, 20, 13, 47, 15, 38, 29, \n            12, 25, 33, 24, 19, 42, 38)\nmy_data <- data.frame(bmi = bmi, income = income)\nwith(my_data, plot(income ~ bmi))\nmy_data$bmi_class <- cut(bmi,\n    breaks = c(0, 18.5, 25.0, 30.0, Inf), \n    right = F,\n    labels = c(\"underweight\", \"normal\", \"overweight\", \"obese\"),\n    ordered_result = T)\nwith(my_data, boxplot(income ~ bmi_class))\nx <- c(2, 5, 10)\ncut(x, breaks = c(0, 2, 5, 10), right = F)## [1] [2,5)  [5,10) <NA>  \n## Levels: [0,2) [2,5) [5,10)\ncut(x, breaks = c(0, 2, 5, 10), right = T)## [1] (0,2]  (2,5]  (5,10]\n## Levels: (0,2] (2,5] (5,10]"},{"path":"built-in-functions.html","id":"memory-management","chapter":"6 Built-in Functions","heading":"Memory management","text":"working large datasets may useful free memory (.e. intermediate results). Use ls() see memory; use rm() delete single several items: rm(genes), rm(x, y, z) clear typing rm(list = ls())","code":""},{"path":"built-in-functions.html","id":"file-system-operations","chapter":"6 Built-in Functions","heading":"File system operations","text":"Several functions exist working file system:getwd() returns current working directory.setwd(<\/path//folder>) sets current working directory.dir(), dir(path) lists contents current directory, path.path can defined \"E:\\\\emile\\\\datasets\" (Windows) , Linux/Mac using relative paths \"~/datasets\" absolute paths \"/home/emile/datasets\".","code":""},{"path":"built-in-functions.html","id":"glueing-character-elements-paste","chapter":"6 Built-in Functions","heading":"Glueing character elements: paste()","text":"Use paste() combine elements stringThere variant, paste0() uses separator default.","code":"\npaste(1, 2, 3)## [1] \"1 2 3\"\npaste(1, 2, 3, sep=\"-\")## [1] \"1-2-3\"\npaste(1:12, month.abb)##  [1] \"1 Jan\"  \"2 Feb\"  \"3 Mar\"  \"4 Apr\"  \"5 May\"  \"6 Jun\"  \"7 Jul\"  \"8 Aug\" \n##  [9] \"9 Sep\"  \"10 Oct\" \"11 Nov\" \"12 Dec\""},{"path":"built-in-functions.html","id":"a-local-namespace-with","chapter":"6 Built-in Functions","heading":"A local namespace: with()","text":"piece related code operating single dataset, use () don’t type name time.Local variables mdl end global environment.","code":"\nwith(airquality, {\n  mdl <- lm(Solar.R ~ Temp)\n  plot(Solar.R ~ Temp)\n  abline(mdl)\n})"},{"path":"built-in-functions.html","id":"writing-data-to-file","chapter":"6 Built-in Functions","heading":"Writing data to file","text":"write data frame, matrix vector file, use write.table(myData, file=\"file.csv\"). Standard comma-separated file column- row names, unless otherwise specified:col.names = Frow.names = Fsep = \";\"sep = \"\\t\" # tab-separated","code":""},{"path":"built-in-functions.html","id":"saving-r-objects-to-file","chapter":"6 Built-in Functions","heading":"Saving R objects to file","text":"Use save() function write R objects file later use.\nespecially handy intermediate results long-running analysis workflows.","code":"\nx <- stats::runif(20)\ny <- list(a = 1, b = TRUE, c = \"oops\")\nsave(x, y, file = \"xy.RData\")"},{"path":"built-in-functions.html","id":"writing-a-plot-to-file","chapter":"6 Built-in Functions","heading":"Writing a plot to file","text":"Use one functions png(), jpeg(), tiff(), bmp() specific file types. widely differing properties, especially respect file size.\nUse width height specify size. Default unit pixels. Use unit: units = \"mm\"ggplot figure can written file like :","code":"\npng(\"/path/to/your/file.png\",\n    width = 700, height = 350, units = \"mm\")\nplot(cars)\ndev.off() # don't forget this one!\npng(\"myplot.png\")\nmyplot <- ggplot(mtcars, aes(wt, mpg)) + \n  geom_point()\nprint(myplot)\ndev.off()"},{"path":"flow-control-and-scripting.html","id":"flow-control-and-scripting","chapter":"7 Flow control and scripting","heading":"7 Flow control and scripting","text":"far used functions build R, installed packages ggplot2. Moreover, R code seen written console code chunks RMarkdown document.code consisted (series ) R statements one function calls.\nconditional code, repeated operations extraction blocks code something reusable, custom function let alone standalone executable script.chapter deals . introduces conditional execution, custom functions scripts.","code":""},{"path":"flow-control-and-scripting.html","id":"flow-control","chapter":"7 Flow control and scripting","heading":"7.1 Flow control","text":"Flow control constitutes series code elements used control whether code blocks executed , many timesThese programming concepts structures used flow control:Conditional execution: (){} else (){} else{}Repeated execution: () {}Repeated conditional execution: (){}experience programming languages: switch expression. switch() function however, dealt eBook.","code":""},{"path":"flow-control-and-scripting.html","id":"conditional-execution-with-ifelse","chapter":"7 Flow control and scripting","heading":"7.1.1 Conditional execution with if/else","text":"several applications conditionals, differing language constructs:(COND) {<TRUE>} else {<FALSE>} code block controlling program flowthe (COND) <TRUE> else <FALSE> expression shorthand code blockthe ifelse(COND, <TRUE>, <FALSE>) function use dataframesAs can see always condition tested. expression return logical value: TRUE FALSE.three discussed following slides.","code":""},{"path":"flow-control-and-scripting.html","id":"the-if-else-code-block","chapter":"7 Flow control and scripting","heading":"The if() {} else {} code block","text":"(COND) {<TRUE>} else {<FALSE>} code block knows several required several optional elements.\nminimum (COND) {} element COND expression evaluating Logical.","code":"\nage <- 43\nif (age >= 18) {\n    print(\"Adult\")\n}## [1] \"Adult\""},{"path":"flow-control-and-scripting.html","id":"if-shorthand","chapter":"7 Flow control and scripting","heading":"if() shorthand","text":"one statement within block can omit curly braces:Remember semicolon end statement optional R usually omitted.","code":"\nage <- 43\nif (age >= 18) print(\"Adult\")## [1] \"Adult\""},{"path":"flow-control-and-scripting.html","id":"if-can-have-an-else","chapter":"7 Flow control and scripting","heading":"if() can have an else {}","text":"alternative course action test evaluates FALSE use else{} element structure.curly braces required:","code":"\nage <- 43\nif (age >= 18) {\n    print(\"Adult\")\n} else {\n    print(\"Junior\")\n}## [1] \"Adult\"age <- 43\nif (age >= 18) print(\"Adult\")\nelse print(\"Junior\")## Error: <text>:3:1: unexpected 'else'\n## 2: if (age >= 18) print(\"Adult\")\n## 3: else\n##    ^"},{"path":"flow-control-and-scripting.html","id":"if-can-have-else-if-blocks","chapter":"7 Flow control and scripting","heading":"if() can have else if() blocks","text":"two courses action, must reside else () blocks.\nCONDition test .","code":"\nage <- 43\nif (age < 18) {\n    print(\"Minor\")\n} else if (age >= 65){\n    print(\"Senior\")\n} else if(age >= 18 && age <= 30){\n    print(\"Young Adult\")\n} else {\n    print(\"Adult\")\n}## [1] \"Adult\""},{"path":"flow-control-and-scripting.html","id":"ifelse-real-life-example","chapter":"7 Flow control and scripting","heading":"if/else real life example","text":"code chunk checks file exists downloads present","code":"\nmy_data_file <- \"/some/file/on/disk\"\n## fetch file\nif (!file.exists(my_data_file)) {\n    print(paste(\"downloading\", my_data_file))\n    download.file(url = remote_url, destfile = my_data_file)\n} else {\n    print(paste(\"reading cached copy of\", my_data_file))\n}"},{"path":"flow-control-and-scripting.html","id":"ifelse-shorthand","chapter":"7 Flow control and scripting","heading":"if/else shorthand","text":"also shorthand (){} else{}. also called ternary.\nformif (COND) <EXPRESSION_FOR_TRUE> else <EXPRESSION_FOR_FALSE>","code":"\na <- 3\nx <- if (a %% 2 == 0) \"EVEN\" else \"UNEVEN\"\nx## [1] \"UNEVEN\""},{"path":"flow-control-and-scripting.html","id":"ifelse-on-dataframes-ifelse","chapter":"7 Flow control and scripting","heading":"if/else on dataframes: ifelse()","text":"want assign values vector based condition, need use third form, ifelse() function.use regular /else structures dataframes don’t get want:","code":"\n# In newer versions of R this yields an error; in older versions\n# only first value (row) is evaluated and this value is cycled.\n# The whole column gets value 1\n\n#airquality$foo <- if (airquality$Ozone < 30) 0 else 1 \n\n# This works\nairquality$bar <- ifelse(airquality$Ozone < 30, 0, 1)\nhead(airquality)##   Ozone Solar.R Wind Temp Month Day bar\n## 1    41     190  7.4   67   May   1   1\n## 2    36     118  8.0   72   May   2   1\n## 3    12     149 12.6   74   May   3   0\n## 4    18     313 11.5   62   May   4   0\n## 5    NA      NA 14.3   56   May   5  NA\n## 6    28      NA 14.9   66   May   6   0"},{"path":"flow-control-and-scripting.html","id":"executing-alternatives-with-lists","chapter":"7 Flow control and scripting","heading":"7.1.2 Executing alternatives with lists","text":"Besides decision making /else, can also make use list type combination fact function can passed around like object.course, even better wrapped inside function, discussed yet.","code":"\nmessage_maker <- list(\n    silent = function(message){\n        print(\"...\")\n    },\n    normal = function(message){\n        print(paste0(\"Your message '\", message, \"' was recorded on \", Sys.Date()))\n    },\n    verbose = function(message) {\n        print(paste0(\"Your message '\", message, \"' was recorded on \", Sys.Date(), \n                     \" with system details [\", paste(Sys.info()[1:4], collapse =\";\"), \"]\"))\n    }\n)\n\nmessage_maker[['verbose']](\"I need coffee\")## [1] \"Your message 'I need coffee' was recorded on 2023-06-26 with system details [Darwin;22.5.0;Darwin Kernel Version 22.5.0: Mon Apr 24 20:52:24 PDT 2023; root:xnu-8796.121.2~5/RELEASE_ARM64_T6000;MBP3.local]\""},{"path":"flow-control-and-scripting.html","id":"iteration-with-for","chapter":"7 Flow control and scripting","heading":"7.1.3 Iteration with for(){}","text":"Iteration used looping series values vector.\n_ use iterate columns rows dataframe: preferred way apply() relatives (next presentation)Sometimes need counter index iterating:causes strange results empty vectors, chunk .Therefore, advised use seq_along() looping iterables indexes:","code":"\nfor (greeting in c(\"Hello\", \"'Allo\", \"Moi\")) {\n    print(greeting)\n}## [1] \"Hello\"\n## [1] \"'Allo\"\n## [1] \"Moi\"\ngreetings <- c(\"Hello\", \"'Allo\", \"Moi\")\nfor (i in 1 : length(greetings)) {\n    print(paste(i, greetings[i]))\n}## [1] \"1 Hello\"\n## [1] \"2 'Allo\"\n## [1] \"3 Moi\"\ngreetings <- character(0)\nfor (i in 1 : length(greetings)) {\n    print(paste(i, greetings[i]))\n}## [1] \"1 NA\"\n## [1] \"0 \"\ngreetings <- c(\"Hello\", \"'Allo\", \"Moi\")\nfor (i in seq_along(greetings)) {\n    print(paste(i, greetings[i]))\n}## [1] \"1 Hello\"\n## [1] \"2 'Allo\"\n## [1] \"3 Moi\"\n## Does not do anything, as it should!\ngreetings <- character(0)\nfor (i in seq_along(greetings)) {\n    print(paste(i, greetings[i]))\n}"},{"path":"flow-control-and-scripting.html","id":"conditional-iteration-with-while","chapter":"7 Flow control and scripting","heading":"7.1.4 Conditional iteration with while(){}","text":"last flow control structure. used execute block long certain condition met. used much R.","code":"\ncounter <- 1\nwhile (counter %% 5 != 0) {\n    print(counter)\n    counter = counter + 1\n}## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4"},{"path":"flow-control-and-scripting.html","id":"creating-functions","chapter":"7 Flow control and scripting","heading":"7.2 Creating functions","text":"definition .function piece functionality can execute typing name, followed pair parentheses. Within parentheses, can pass data function work . Functions often, always, return value.Thus, functions named blocks code single well-defined purpose make reusable.\nalready used many predefined build functions R: str, max, read.table etc. type name function without parenthesis get definition.","code":"\nsum## function (..., na.rm = FALSE)  .Primitive(\"sum\")"},{"path":"flow-control-and-scripting.html","id":"anatomy-of-a-function","chapter":"7 Flow control and scripting","heading":"Anatomy of a function","text":"functionusually, always, name. next chapter see examples anonymous functions defined location needed.parameter list (sometimes size zero) parentheses. parameters constitute required input variables function operate.method body. block one lines code actual work performed.may return value. Ther result function usually, always returned. print function, instance, return value outputs console. Functions can retun one single value (vector). return values needed, need wrap complex datatype list.defined using _function keyword_Here function prototype. shows characteristics list properties.","code":"method_name <- function(arg, arg, ...) {\n    <function body>\n    return(return_value)\n}"},{"path":"flow-control-and-scripting.html","id":"a-first-function","chapter":"7 Flow control and scripting","heading":"A first function","text":"simple function determining whether number evenNote return() method call unlike programming languages.return statement optional.\nR, last statement method body implicit return value. Therefore, previous example equivalent :explicit always allowed implicit return possible, using return() forcing return values points required:","code":"\nis_even <- function(x) {\n    evens <- x %% 2 == 0\n    return(evens) \n}\nis_even(1:5)## [1] FALSE  TRUE FALSE  TRUE FALSE\nis_even <- function(x) {\n    x %% 2 == 0\n}\nis_even(1:5)## [1] FALSE  TRUE FALSE  TRUE FALSE\nmy_message <- function(age) {\n    if (age < 18) return(\"have a lemonade!\") # explicit return\n    \"have a beer!\" # implicit return statement\n}\nmy_message(20)## [1] \"have a beer!\""},{"path":"flow-control-and-scripting.html","id":"default-argument-values","chapter":"7 Flow control and scripting","heading":"Default argument values","text":"possible specify default values function arguments. value attached function parameter calling code provide one. default value specified parameter list, using construct: some_arg = <default-value>. Almost functions R (many) parameters default values.use default values function parameters whenever possible. make using function much easier. following function calculates exponent (power) number. power = value provided, defaults two.","code":"\nmy_power <- function(x, power = 2) {\n    x ^ power\n}\nmy_power(10, 3) ## custom power## [1] 1000\nmy_power(10) ## defaults to 2## [1] 100"},{"path":"flow-control-and-scripting.html","id":"argument-order-when-calling-a-function","chapter":"7 Flow control and scripting","heading":"Argument order when calling a function","text":"seen many times , need pass arguments name. example, names used. use names arguments, order pass important; must match order declared function. use names, order important:summarize: calling function,parameters without default value mandatorythe unnamed arguments come first passed order declaredpassing named arguments may done order","code":"\nmy_power(power = 4, x = 2)## [1] 16"},{"path":"flow-control-and-scripting.html","id":"errors-and-warnings","chapter":"7 Flow control and scripting","heading":"7.2.1 Errors and warnings","text":"someting right, enought quit execution, use warning let user () know something wrong:warning(\"happy\")something terribly wrong, continue, stop execution error message:stop(\"go \")small errors demo:","code":"\ndemo_inverse <- function(x) {\n    if (!is.numeric(x)) {\n        stop(\"non-numeric vector\")\n    }\n    return(x / 3)\n}\nresult1 <- demo_inverse(c(\"a\", \"b\")) #result1 not created!## Error in demo_inverse(c(\"a\", \"b\")): non-numeric vector\nresult2 <- demo_inverse(1:4)"},{"path":"flow-control-and-scripting.html","id":"scripting","chapter":"7 Flow control and scripting","heading":"7.3 Scripting","text":"R script text file extension .R contains R code. loaded, immediately evaluated. Functions loaded/evaluated, executed. Declared variables stored main memory - Global Environment precise.contents simple R script called source_demo.RYou can load script int R session sourcing ; just call source(path//source_demo.R). Alternatively, open RStudio editor, can click “source” button top right editor panel. , can use functions variables defined within script:","code":"\nx <- 42\nx # echo to console\nprint(paste0(\"x = \", x)) #explicit print\n\n# function defined but not called\ndemo_function <- function(message) {\n    print(paste(\"you said\", message))\n}\nsource(\"data/source_demo.R\")## [1] \"x = 42\"\nx## [1] 42\ndemo_function(\"hi!\")## [1] \"you said hi!\""},{"path":"flow-control-and-scripting.html","id":"why-scripts","chapter":"7 Flow control and scripting","heading":"Why scripts?","text":"store pieces functionality want reuse (e.g. different RMarkdown documents)store entire workflows outside RMarkdownTo run R code commandline (terminal)call scripts build applications packages","code":""},{"path":"flow-control-and-scripting.html","id":"coding_style","chapter":"7 Flow control and scripting","heading":"7.3.1 Some coding style rules rules for writing code","text":"Names variables start lower-case letterWords separated using underscoresBe descriptive namesFunction names verbsWrite code comments EnglishPreferentially use one statement per lineUse spaces sides operatorsUse space commaIndent code blocks -{}- 4 2 spaces, consistentFollow Hadleys’ style guide http://adv-r..co.nz/Style.html","code":""},{"path":"tidyr.html","id":"tidyr","chapter":"8 Tidying dataframes using Package tidyr","heading":"8 Tidying dataframes using Package tidyr","text":"chapter explores package tidyr part tidyverse set packages.package essential tool collection process organizing data tidy way.dataset considered tidy formed according rules:variable column.observation row.value cell.want tidy data?entire tidyverse works tidy data, especially ggplot2 package.Pivoting data also often used make specific data representations purposes.Finally: often receive “dirty” data needs processed order able carry analyses.example dataset, downloaded website \nNote: original data exported Excel csv, text editor used replace single quote occurrences (“’”) underscore. Otherwise, data corrupted.data concerns disease occurrences two diseases: measles rubella (“rode hond” Dutch).\nSuppose like analyse distribution timeline two diseases, relation .\ntwo problems :\n1. data needs clean\n2. data needs combined two files one dataframe.Let’s start first: measles.\npart measles data. tidy. ?Table 8.1: tidy dataset?monthly counts separate columns. However, really variable: measles cases. data needs tidied: one column called “cases” another column called “month”. maybe even single column “Date”? year month actually elements single unit course. ’ll leave later chapter.","code":""},{"path":"tidyr.html","id":"the-pivot_longer-function","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.1 The pivot_longer() function","text":"Tidying never simpler, using pivot_longer function:pivot_longer function, provide three pieces information:need tell columns collect data headers . , month columns collected: cols = 5:16. can also use names columns want gather.need tell columns collect data headers . , month columns collected: cols = 5:16. can also use names columns want gather.name column hold “old” column headers: names_to. name newly created column hold information now present column headers going collect - case, months names January-December. Hence, names_to = Month.name column hold “old” column headers: names_to. name newly created column hold information now present column headers going collect - case, months names January-December. Hence, names_to = Month.name values_to. value_to argument name column hold actual measurements. case, number cases 12 month columns “gathered” column. Hence, values_to = Cases.name values_to. value_to argument name column hold actual measurements. case, number cases 12 month columns “gathered” column. Hence, values_to = Cases.result “flattened elongated” data structure. data non-gathered columns (Region, ISO3, Country, Year) expanded/duplicated 12 month rows created.can see numbers verification process:Obviously, data gather single column must single measurement type!","code":"\nmeasles_tidy <- pivot_longer(data = measles,\n                             cols = 5:16,\n                             names_to = \"Month\",\n                             values_to = \"Cases\")\nknitr::kable(head(measles_tidy, n=15))\n## The original dimensions\ndim(measles)## [1] 1746   16\n## The tidied data\ndim(measles_tidy)## [1] 20952     6\n## 12 times 1746 is 20952 rows\nnrow(measles_tidy) / 12## [1] 1746"},{"path":"tidyr.html","id":"selecting-columns","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.1.1 Selecting columns","text":"cols= argument can specified using whole bunch different methods. listed .Later , ’ll encounter means select columns using tidyselect helpers.","code":"cols = -(1:4),\ncols = -(Region:Year),\ncols = January:December,\ncols = -c(Region, ISO3, Country, Year),"},{"path":"tidyr.html","id":"another-example","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.1.2 Another example","text":"extra example, dose_response data .processed pivot_longer well. time, Regular Expression used parse dose numbers header names.argument names_pattern = \"dose(10|100)mg\" specifies, using parentheses “” symbol | want extract numbers 10 100 column names. Regular expressions discussed another chapter (11)Note however still character values requires conversion:sophisticated techniques dealt chapter package dplyr (9).","code":"\ndose_response <- read.table(\"data/dose_response2.txt\",\n                            header = T,\n                            sep=\";\",\n                            colClasses=c(\"character\", \"factor\", \"integer\", \"integer\"))\nnames(dose_response)## [1] \"patient\"   \"sex\"       \"dose10mg\"  \"dose100mg\"\ntmp <- pivot_longer(data = dose_response,\n             cols = -c(\"patient\", \"sex\"),\n             names_to = \"dose\",\n             names_pattern = \"dose(10|100)mg\",\n             values_to = \"response\")\nknitr::kable(tmp[1:10, ])\nclass(tmp$dose)\ntmp$dose <- as.integer(tmp$dose)## [1] \"character\""},{"path":"tidyr.html","id":"a-more-complex-problem-two-sets-of-columns","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.1.3 A more complex problem: two sets of columns","text":"case two sets columns? , create example, tibble used. extension well-known data.frame type. also part tidyverse discussed detail well.measurements spread 4 columns column names actually represent levels two variables: Treatment Time.\nThus, tidy need mangle data form:solve requires another bit knowledge regular expressions:expression names_pattern = \"(T.).(Control|Treated)\" tells function two groups column names widened. groups defined two sets parentheses (). first group defined letter “T” follows single character specified dot . says “character”. second group (Control|Treated) tells function formed word Control Treated. random single underscore “_“.\nAlternatively, actually much simpler, names_sep argument used. instance, names_sep = '_' tells split column names underscore character character, yielding result:","code":"\nset.seed(1234)\ntwo_two_col <- tibble(subject = letters[1:5],\n              T0_Control = rnorm(5, 10, 1),\n              T0_Treated = rnorm(5, 9.5, 1.2),\n              T1_Control = rnorm(5, 11, 1.5),\n              T1_Treated = rnorm(5, 16, 2))\nknitr::kable(two_two_col)subject time treatment response\na       T0   Control   10.764\na       T0   Treated   8.681\na       T1   Control   13.057\na       T1   Treated   15.188\n...\ndose_response_long <- pivot_longer(data = two_two_col,\n             cols = -\"subject\",\n             names_pattern = \"(T.)_(Control|Treated)\",\n             names_to = c(\"Time\", \"Treatment\"),\n             values_to = \"Response\")\nknitr::kable(head(dose_response_long, 8))\nalt <- pivot_longer(data = two_two_col,\n             cols = -\"subject\",\n             names_sep = \"_\",\n             names_to = c(\"Time\", \"Treatment\"),\n             values_to = \"Response\")\nknitr::kable(head(alt, 8))"},{"path":"tidyr.html","id":"widening-with-pivot_wider","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.2 Widening with pivot_wider()","text":"opposite pivot_longer() pivot_wider(). First simple case single column:reverse operation pivot_wider:","code":"\nhead(dose_response_long)## # A tibble: 6 × 4\n##   subject Time  Treatment Response\n##   <chr>   <chr> <chr>        <dbl>\n## 1 a       T0    Control       8.79\n## 2 a       T0    Treated      10.1 \n## 3 a       T1    Control      10.3 \n## 4 a       T1    Treated      15.8 \n## 5 b       T0    Control      10.3 \n## 6 b       T0    Treated       8.81\ntmp <- pivot_wider(data = dose_response_long,\n                   names_from = c(Time, Treatment),\n                   values_from = Response)\nknitr::kable(head(tmp, 5))"},{"path":"tidyr.html","id":"other-utility-functions","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.3 Other utility functions","text":"","code":""},{"path":"tidyr.html","id":"split-columns-with-separate","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.3.1 Split columns with separate()","text":"function separate() split non-word character separator specified. separator prided telling split X two characters either side.","code":"\ntmp <- data.frame(x = 10:15, a = paste0(1:6, \"zXb\", letters[1:6]))\ntmp##    x     a\n## 1 10 1zXba\n## 2 11 2zXbb\n## 3 12 3zXbc\n## 4 13 4zXbd\n## 5 14 5zXbe\n## 6 15 6zXbf\nseparate(data = tmp, col = a, sep = \".X.\", into=c(\"b\", \"c\"))##    x b c\n## 1 10 1 a\n## 2 11 2 b\n## 3 12 3 c\n## 4 13 4 d\n## 5 14 5 e\n## 6 15 6 f"},{"path":"tidyr.html","id":"combine-columns-with-unite","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.3.2 Combine columns with unite()","text":"two columns logically combined one, use unite() function.\ninstance, dates times often placed separate columns two aspects single measurement: time.\nsmall example. later presentation, working dates times extensively treated.","code":"\nactivity <- data.frame(date = c(\"30/12/2019\", \"31/12/2019\", \"01/01/2020\", \"02/01/2020\", \"02/01/2020\"),\n                 time = c(\"14:55\", \"21:01\", \"08:22\", \"11:56\", \"16:38\"),\n                 activity = c(34, 48, 5, 19, 22))\nunite(activity, \"datetime\", date, time, sep = \"T\")##           datetime activity\n## 1 30/12/2019T14:55       34\n## 2 31/12/2019T21:01       48\n## 3 01/01/2020T08:22        5\n## 4 02/01/2020T11:56       19\n## 5 02/01/2020T16:38       22"},{"path":"tidyr.html","id":"drop-rows-with-missing-values-drop_na","chapter":"8 Tidying dataframes using Package tidyr","heading":"8.3.3 Drop rows with missing values: drop_na()","text":"function extremely simple useful. drops rows missing dataframe returns cured copy:course equivalent base R: na.omit().","code":"\nhead(drop_na(airquality))##   Ozone Solar.R Wind Temp Month Day bar\n## 1    41     190  7.4   67   May   1   1\n## 2    36     118  8.0   72   May   2   1\n## 3    12     149 12.6   74   May   3   0\n## 4    18     313 11.5   62   May   4   0\n## 5    23     299  8.6   65   May   7   0\n## 6    19      99 13.8   59   May   8   0"},{"path":"mangling.html","id":"mangling","chapter":"9 Old school data mangling","heading":"9 Old school data mangling","text":"chapter deals old-school data mangling using base R functions. presented completeness’ sake, also sometimes functions simply convenient compared dplyr offer.Dataframes ubiquitous R-based data analyses. Many R functions packages tailored specifically DF manipulations - already seen cbind(), rbind() subset().\npresentation, ’ll explore new functions techniques working DFs:apply()lapply()sapply()tapply()aggregate()split()","code":""},{"path":"mangling.html","id":"the-apply-family-of-functions","chapter":"9 Old school data mangling","heading":"9.1 The apply() family of functions","text":"Looping may tempting, highly discouraged R inefficient. Usually one functions better (course dplyr functions discussed ):apply: Apply function “margins” dataframe - rows columns bothlapply: Loop list evaluate function element; returns list lengthsapply: lapply try simplify resulttapply: Apply function subsets vector (read: split factor)important ones.","code":""},{"path":"mangling.html","id":"apply-apply-functions-over-array-margins","chapter":"9 Old school data mangling","heading":"9.1.0.1 apply(): Apply Functions Over Array Margins","text":"Suppose want know means columns dataframe.apply() needs know\nDF apply (X)\nmargin(s) - columns /rows (MARGIN)\nfunction apply (FUN)\nDF apply (X)margin(s) - columns /rows (MARGIN)function apply (FUN), function applied columns rows(Ok, bit lame: minus_one_squared(df) )Body Mass Index, BMI, calculated \\((weight / height ^ 2) * 703\\) weight pounds height inches. calculated build dataset women.","code":"\napply(X = cars, MARGIN = 2, FUN = mean) # apply over columns## speed  dist \n##  15.4  43.0\ndf <- data.frame(x = 1:5, y = 6:10)\nminus_one_squared <- function(x) (x-1)^2\napply(X = df, MARGIN = c(1,2), FUN = minus_one_squared)##       x  y\n## [1,]  0 25\n## [2,]  1 36\n## [3,]  4 49\n## [4,]  9 64\n## [5,] 16 81\nhead(women, n=3)##   height weight\n## 1     58    115\n## 2     59    117\n## 3     60    120\nwomen$bmi <- apply(X = women, \n                   MARGIN = 1, \n                   FUN = function(x) (x[2] / x[1]^2) * 703)\nhead(women, n=4)##   height weight  bmi\n## 1     58    115 24.0\n## 2     59    117 23.6\n## 3     60    120 23.4\n## 4     61    123 23.2"},{"path":"mangling.html","id":"pass-arguments-to-the-applied-function","chapter":"9 Old school data mangling","heading":"Pass arguments to the applied function","text":"Sometimes applied function needs arguments passed besides row column. ... argument apply() makes possible (type ?apply see info)Note: ... argument works ..apply.. functions.","code":"\n# function sums and powers up\nspwr <- function(x, p = 2) {sum(x)^p}\n# a simple dataframe\ndf <- data.frame(a = 1:5, b = 6:10)\ndf##   a  b\n## 1 1  6\n## 2 2  7\n## 3 3  8\n## 4 4  9\n## 5 5 10\n# spwr will use the default value for p (p = 2)\napply(X = df, MARGIN = 1, FUN = spwr) ## [1]  49  81 121 169 225\n# pass power p = 3 to function spwr (argument names omitted)\napply(df, 1, spwr, p = 3) ## [1]  343  729 1331 2197 3375"},{"path":"mangling.html","id":"lapply-apply-a-function-over-a-list-or-vector","chapter":"9 Old school data mangling","heading":"9.1.0.2 lapply(): Apply a Function over a List or Vector","text":"Function lapply() applies function elements list returns list length, element result applying functionHere list, now sqrt() applied. Notice nature applied function influences result.","code":"\nmyNumbers = list(\n    one = c(1, 3, 4), \n    two = c(3, 2, 6, 1), \n    three = c(5, 7, 6, 8, 9))\nlapply(X = myNumbers, FUN = mean)## $one\n## [1] 2.67\n## \n## $two\n## [1] 3\n## \n## $three\n## [1] 7\nlapply(X = myNumbers, FUN = sqrt)## $one\n## [1] 1.00 1.73 2.00\n## \n## $two\n## [1] 1.73 1.41 2.45 1.00\n## \n## $three\n## [1] 2.24 2.65 2.45 2.83 3.00"},{"path":"mangling.html","id":"sapply-apply-a-function-over-a-list-or-vector-and-simplify","chapter":"9 Old school data mangling","heading":"9.1.0.3 sapply(): Apply a Function over a List or Vector and Simplify","text":"using example , sapply, get vector returned. Note resulting vector named vector, convenient feature sapplyWhen result can simplified, get list lapply():","code":"\nmyNumbers = list(\n    one = c(1, 3, 4),\n    two = c(3, 2, 6, 1),\n    three = c(5, 7, 6, 8, 9))\nsapply(X = myNumbers, FUN = mean)##   one   two three \n##  2.67  3.00  7.00\nsapply(X = myNumbers, FUN = sqrt)## $one\n## [1] 1.00 1.73 2.00\n## \n## $two\n## [1] 1.73 1.41 2.45 1.00\n## \n## $three\n## [1] 2.24 2.65 2.45 2.83 3.00"},{"path":"mangling.html","id":"wasnt-a-dataframe-also-a-list","chapter":"9 Old school data mangling","heading":"9.1.0.4 wasn’t a dataframe also a list?","text":"Yes! also list(ish). lapply() sapply() work just fine dataframes:way, sapply lapply also work vectors.","code":"\nlapply(X = cars, FUN = mean)## $speed\n## [1] 15.4\n## \n## $dist\n## [1] 43\nsapply(X = cars, FUN = mean) ## speed  dist \n##  15.4  43.0"},{"path":"mangling.html","id":"tapply-apply-a-function-over-a-ragged-array","chapter":"9 Old school data mangling","heading":"9.1.0.5 tapply(): Apply a Function Over a Ragged Array","text":"tapply() apply function subsets vector; splits vector groups according levels second vector applies given function group.","code":"\ntapply(X = chickwts$weight, INDEX = chickwts$feed, FUN = sd)##    casein horsebean   linseed  meatmeal   soybean sunflower \n##      64.4      38.6      52.2      64.9      54.1      48.8"},{"path":"mangling.html","id":"other-data-mangling-functions","chapter":"9 Old school data mangling","heading":"9.2 Other data mangling functions","text":"","code":""},{"path":"mangling.html","id":"split-divide-into-groups-and-reassemble","chapter":"9 Old school data mangling","heading":"9.2.0.1 split(): Divide into Groups and Reassemble","text":"similar tapply() sense uses factor split first argument. tapply() splits vector, split() splits dataframe - list dataframes.\nuse split() dataframe needs divided depending value grouping variable.\nresponse Treated (T) Untreated (UT) subjectsNote trivial example also done boxplot(myData$response ~ myData$treatment).can see split() also works vectors.","code":"\nmyData <- data.frame(\n    response = c(5, 8, 4, 5, 9, 3, 6, 7, 3, 6, 5, 2),\n    treatment = factor(\n        c(\"UT\", \"T\", \"UT\", \"UT\", \"T\", \"UT\", \"T\", \"T\", \"UT\", \"T\", \"T\", \"UT\")))\nsplData <- split(x = myData, f = myData$treatment)\nstr(splData)## List of 2\n##  $ T :'data.frame':  6 obs. of  2 variables:\n##   ..$ response : num [1:6] 8 9 6 7 6 5\n##   ..$ treatment: Factor w/ 2 levels \"T\",\"UT\": 1 1 1 1 1 1\n##  $ UT:'data.frame':  6 obs. of  2 variables:\n##   ..$ response : num [1:6] 5 4 5 3 3 2\n##   ..$ treatment: Factor w/ 2 levels \"T\",\"UT\": 2 2 2 2 2 2\nboxplot(splData$T$response, splData$UT$response, \n        names = c(\"Treated\", \"Untreated\"))\nsplit(x = rnorm(10), f = rep(c(\"sick\", \"healthy\"), each=5))## $healthy\n## [1] -1.4482  0.5748 -1.0237 -0.0151 -0.9359\n## \n## $sick\n## [1]  0.134 -0.491 -0.441  0.460 -0.694"},{"path":"mangling.html","id":"aggregate-compute-summary-statistics-of-data-subsets","chapter":"9 Old school data mangling","heading":"9.2.0.2 aggregate(): Compute Summary Statistics of Data Subsets","text":"Splits data subsets, computes summary statistics , returns result convenient form.Aggregate two usage techniques:formula:aggregate(formula, data, FUN, ...)formula:aggregate(formula, data, FUN, ...)list:aggregate(x, , FUN, ...)list:aggregate(x, , FUN, ...)really like aggregate(), especially first form. , got know dplyr package.forms aggregate() demonstrated","code":"\naggregate(Temp ~ Month, \n          data = airquality, \n          FUN = mean)##       Month Temp\n## 1       May 65.5\n## 2      June 79.1\n## 3      July 83.9\n## 4    August 84.0\n## 5 September 76.9"},{"path":"mangling.html","id":"aggregate-with-formula","chapter":"9 Old school data mangling","heading":"Aggregate with formula","text":"left part formula accepts one, several columns dependent variables.right part can also accept multiple independent variables","code":"\n##two dependents\naggregate(cbind(Temp, Ozone) ~ Month, \n          data = airquality, \n          FUN = mean)##       Month Temp Ozone\n## 1       May 66.7  23.6\n## 2      June 78.2  29.4\n## 3      July 83.9  59.1\n## 4    August 84.0  60.0\n## 5 September 76.9  31.4\n##all\naggregate(. ~ Month, \n          data = airquality, \n          FUN = mean)##       Month Ozone Solar.R  Wind Temp  Day   bar\n## 1       May  24.1     182 11.50 66.5 16.1 0.333\n## 2      June  29.4     184 12.18 78.2 14.3 0.333\n## 3      July  59.1     216  8.52 83.9 16.2 0.808\n## 4    August  60.0     173  8.86 83.7 17.2 0.696\n## 5 September  31.4     168 10.08 76.9 15.1 0.345\nairquality$Temp_factor <- cut(airquality$Temp, \n                              breaks = 2, \n                              labels = c(\"low\", \"high\"))\naggregate(Ozone ~ Month + Temp_factor, \n          data = airquality, \n          FUN = mean)##        Month Temp_factor Ozone\n## 1        May         low  18.9\n## 2       June         low  20.5\n## 3       July         low  13.0\n## 4     August         low  16.0\n## 5  September         low  17.6\n## 6        May        high  80.0\n## 7       June        high  36.6\n## 8       July        high  63.0\n## 9     August        high  63.6\n## 10 September        high  48.5"},{"path":"mangling.html","id":"the-by-list...-form","chapter":"9 Old school data mangling","heading":"The by = list(...) form","text":"form aggregate. elaborate opinion need te spell vectors want work .another example:better wrap ():","code":"\naggregate(x = chickwts$weight, \n          by = list(feed = chickwts$feed), \n          FUN = mean)##        feed   x\n## 1    casein 324\n## 2 horsebean 160\n## 3   linseed 219\n## 4  meatmeal 277\n## 5   soybean 246\n## 6 sunflower 329\naggregate(x = airquality$Wind, \n          by = list(month = airquality$Month, temperature = airquality$Temp_factor), \n          FUN = mean)##        month temperature     x\n## 1        May         low 11.71\n## 2       June         low  9.85\n## 3       July         low 10.60\n## 4     August         low 11.43\n## 5  September         low 11.39\n## 6        May        high 10.30\n## 7       June        high 10.51\n## 8       July        high  8.83\n## 9     August        high  8.51\n## 10 September        high  8.79\nwith(airquality, aggregate(x = Wind, \n                           by = list(month = Month, temperature = Temp_factor), \n                           FUN = mean))"},{"path":"mangling.html","id":"many-roads-lead-to-rome","chapter":"9 Old school data mangling","heading":"9.2.1 Many roads lead to Rome","text":"next series examples essentially . message : one way !assame assame asAnd topic next part chapter:","code":"\naggregate(weight ~ feed, \n          data = chickwts, \n          FUN = mean)##        feed weight\n## 1    casein    324\n## 2 horsebean    160\n## 3   linseed    219\n## 4  meatmeal    277\n## 5   soybean    246\n## 6 sunflower    329\nhead(aggregate(x = chickwts$weight, \n               by = list(feed = chickwts$feed), \n               FUN = mean), n=3)##        feed   x\n## 1    casein 324\n## 2 horsebean 160\n## 3   linseed 219\ntapply(chickwts$weight, chickwts$feed, mean)##    casein horsebean   linseed  meatmeal   soybean sunflower \n##       324       160       219       277       246       329\nwith(chickwts, tapply(weight, feed, mean))##    casein horsebean   linseed  meatmeal   soybean sunflower \n##       324       160       219       277       246       329\nsapply(split(chickwts, chickwts$feed), function(x){mean(x$weight)})##    casein horsebean   linseed  meatmeal   soybean sunflower \n##       324       160       219       277       246       329\nlibrary(dplyr)\ngroup_by(chickwts, feed) %>% \n  summarise(mean_weigth = mean(weight))## # A tibble: 6 × 2\n##   feed      mean_weigth\n##   <fct>           <dbl>\n## 1 casein           324.\n## 2 horsebean        160.\n## 3 linseed          219.\n## 4 meatmeal         277.\n## 5 soybean          246.\n## 6 sunflower        329."},{"path":"dplyr.html","id":"dplyr","chapter":"10 Data mangling with dplyr","heading":"10 Data mangling with dplyr","text":"","code":""},{"path":"dplyr.html","id":"the-dplyr-package","chapter":"10 Data mangling with dplyr","heading":"10.1 The dplyr package","text":"package, also tidyverse, quite versatile. can use wide range activities.\nexamples areselecting, filtering sampling casessummarizing data; e.g. counting, ranking,manipulating data; creating new changing existing variablescombining tablesIn chapter small selection package discussed.excellent cheat sheet package. can find . convenience, primarily gitbook also used offline mode examinations, included well: dplyr-data-transformation.pdfBefore embarking overview important functions, let’s first look tibble %>% chaining operator.sections copied (adapted) part dplyr tibble vignettes can found hereIn chapter often use term case instead row variable instead column since precisely describe essence. Also, terms used tidyverse packages.many functions dplyr package; exhaustively covered .\nAlso, get deprecated/superseded disturbing pace. therefore always check latest recommended strategy.","code":""},{"path":"dplyr.html","id":"tibbles","chapter":"10 Data mangling with dplyr","heading":"10.1.1 Tibbles","text":"Tibbles modern take data frames. keep features stood test time, drop features used convenient now frustrating (.e. converting character vectors factors). entire package dedicated tibbles, surprisingly called tibble usually load package dplyr tidyr already (depend ).Use tibble() constructor create literals. several advantages old data.frame constructor:never changes input’s type (.e., stringsAsFactors = FALSE!).never adjusts names variables: name space become name..space.evaluates arguments lazily sequentially:never uses row.names(). whole point tidy data store variables consistent way. never stores variable special attribute.recycles vectors length 1. recycling vectors greater lengths frequent source bugs.Coercion\ncomplement tibble(), tibble provides as_tibble() coerce objects tibbles.","code":"\ntibble(x = 1:5, y = x ^ 2)## # A tibble: 5 × 2\n##       x     y\n##   <int> <dbl>\n## 1     1     1\n## 2     2     4\n## 3     3     9\n## 4     4    16\n## 5     5    25"},{"path":"dplyr.html","id":"tibbles-vs-data-frames","chapter":"10 Data mangling with dplyr","heading":"Tibbles vs data frames","text":"three key differences tibbles data frames: printing, subsetting, recycling rules.Printing\n- print tibble, shows first ten rows columns fit one screen. also prints abbreviated description column type, uses font styles color highlighting.\n- can control default appearance options:\n- options(tibble.print_max = n, tibble.print_min = m): n rows, print first m rows. Use options(tibble.print_max = Inf) always show rows.\n- options(tibble.width = Inf) always print columns, regardless width screen.Subsetting\nTibbles quite strict subsetting. [ always returns another tibble. Contrast data frame: sometimes [ returns data frame sometimes just returns vector.Recycling\nconstructing tibble, values length 1 recycled. first column length different one determines number rows tibble, conflicts lead error. also extends tibbles zero rows, sometimes important programming:","code":""},{"path":"dplyr.html","id":"the-str-equivalent-glimpse","chapter":"10 Data mangling with dplyr","heading":"10.1.1.1 The str() equivalent: glimpse()","text":"glimpse() function dplyr equivalent str():","code":"\nglimpse(dose_response_long)## Rows: 52\n## Columns: 4\n## $ patient  <chr> \"001\", \"002\", \"003\", \"004\", \"005\", \"006\", \"007\", \"008\", \"009\"…\n## $ sex      <fct> f, f, m, m, f, f, f, m, f, m, m, m, m, f, m, f, f, m, m, f, f…\n## $ Dose     <chr> \"dose10mg\", \"dose10mg\", \"dose10mg\", \"dose10mg\", \"dose10mg\", \"…\n## $ Response <int> 12, 11, 54, 71, 19, 22, 23, 68, 30, 83, 72, 48, 67, 13, 73, 2…"},{"path":"dplyr.html","id":"the-chaining-operator","chapter":"10 Data mangling with dplyr","heading":"10.1.2 The chaining operator %>%","text":"workflow, happens time apply function dataframe, store result new variable (overwrite first) apply second function dataframe. .\ntwo undesirable results . first cluttered code: many variables; going name ? Just look previous chapter ’ll understand. second -much worse working big dataframes- cluttering environment memory footprint.chaining operator comes . helps create clean workflows intermediate results stored opportune.comes simple notion: x %>% f(y)) equivalent f(x, y) f function.good old dose-response example , converted tibble.Suppose want remove cases missing values (aren’t - sake argument), select female subjects calculate mean response two doses.\nbase R, something like .know, exaggerated bit variable names.workflow, using dplyr, intermediate variables. even explicit operation extra (group_by())., finally, dplyr supposed used.Isn’t treat eyes? highly readable, minimal piece code, ’s - environment clogged data forget clean .\nNote drop_na actually tidyr package. However, works seamlessly chaining context dplyr functions.power dplyr chaining operator!\nactually want result stored, need assign single variable beginning chain.work ggplot2 well?don’t know , kind thing makes happy!\nthing bothers slightly + instead %>% ggplot2 context.\nhand layering, chaining ggplot2 , clear distinction.seen essence tidyverse: clean chained workflows.sections copied (adapted) large part dplyr vignette can found hereDplyr aims provide function basic verb data manipulation:filter() unique() select cases based (uniqueness ) values.\narrange() reorder cases.\nselect() rename() select variables based names.\nmutate() transmute() add new variables functions existing variables.\nsummarise() condense multiple values single value.\nsample_n() sample_frac() take random samples.","code":"\ndose_response_long## # A tibble: 52 × 4\n##   patient sex   Dose     Response\n##   <chr>   <fct> <chr>       <int>\n## 1 001     f     dose10mg       12\n## 2 002     f     dose10mg       11\n## 3 003     m     dose10mg       54\n## 4 004     m     dose10mg       71\n## 5 005     f     dose10mg       19\n## 6 006     f     dose10mg       22\n## # ℹ 46 more rows\ndose_response_long_no_na <- na.omit(dose_response_long)\ndose_response_long_no_na_only_female <- subset(x = dose_response_long_no_na, subset = sex == \"f\")\naggregate(Response ~ Dose, data = dose_response_long_no_na_only_female, FUN = mean)##        Dose Response\n## 1 dose100mg     80.9\n## 2  dose10mg     19.6\ndose_response_long_no_na <- drop_na(dose_response_long)\ndose_response_long_no_na_only_female <- filter(dose_response_long_no_na, sex == \"f\")\ndose_response_long_no_na_only_female_grouped <- group_by(dose_response_long_no_na_only_female,\n                                                         Dose)\nsummarize(dose_response_long_no_na_only_female_grouped, mean_response = mean(Response))## # A tibble: 2 × 2\n##   Dose      mean_response\n##   <chr>             <dbl>\n## 1 dose100mg          80.9\n## 2 dose10mg           19.6\ndose_response_long %>%\n    drop_na() %>%\n    filter(sex == \"f\") %>%\n    group_by(Dose) %>%\n    summarize(mean_response = mean(Response))## # A tibble: 2 × 2\n##   Dose      mean_response\n##   <chr>             <dbl>\n## 1 dose100mg          80.9\n## 2 dose10mg           19.6\ndose_response_long %>%\n    drop_na() %>%\n    ggplot(mapping = aes(x = sex, y = Response)) +\n        geom_boxplot() +\n        facet_wrap(Dose ~ .)"},{"path":"dplyr.html","id":"selecting","chapter":"10 Data mangling with dplyr","heading":"10.2 Selecting","text":"","code":""},{"path":"dplyr.html","id":"selecting-rows","chapter":"10 Data mangling with dplyr","heading":"10.2.1 Selecting rows","text":"","code":""},{"path":"dplyr.html","id":"selecting-rows-by-index-slice","chapter":"10 Data mangling with dplyr","heading":"Selecting rows by index: slice()","text":"simply want select rows index, use slice()functions head() tail() work expected; work tibbles well (overloading) context chained actions.","code":"\nslice(dose_response_long, 2:4)## # A tibble: 3 × 4\n##   patient sex   Dose     Response\n##   <chr>   <fct> <chr>       <int>\n## 1 002     f     dose10mg       11\n## 2 003     m     dose10mg       54\n## 3 004     m     dose10mg       71"},{"path":"dplyr.html","id":"get-unique-cases-with-distinct","chapter":"10 Data mangling with dplyr","heading":"Get unique cases with distinct()","text":"distinct() function retains unique/distinct cases input tbl data.frame. provide variables use determining uniqueness. multiple cases given combination inputs, first case preserved. omitted, use variables. .keep_all argument specifies whether variables tbl kept.","code":"\ndose_response_long %>% distinct(sex, Dose, .keep_all = T)## # A tibble: 4 × 4\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 001     f     dose10mg        12\n## 2 003     m     dose10mg        54\n## 3 001     f     dose100mg       88\n## 4 003     m     dose100mg       14\ndose_response_long %>% distinct(Dose)## # A tibble: 2 × 1\n##   Dose     \n##   <chr>    \n## 1 dose10mg \n## 2 dose100mg"},{"path":"dplyr.html","id":"filter-cases","chapter":"10 Data mangling with dplyr","heading":"filter() cases","text":"function similar subset argument subset() function.filter function filter() allows select subset cases data frame. first argument tibble data frame. second subsequent arguments refer variables within data frame, selecting cases expression TRUE.want filter rows based regular expression pattern matching character value can something like chunk , thing select needs logical vector.Using str_detect() stringr tidyverse package also possible:","code":"\ndose_response_long %>% filter(Dose == \"dose10mg\" & Response > 60)## # A tibble: 7 × 4\n##   patient sex   Dose     Response\n##   <chr>   <fct> <chr>       <int>\n## 1 004     m     dose10mg       71\n## 2 008     m     dose10mg       68\n## 3 010     m     dose10mg       83\n## 4 011     m     dose10mg       72\n## 5 013     m     dose10mg       67\n## 6 015     m     dose10mg       73\n## 7 024     m     dose10mg       61\n(t <- tibble(x = c(\"abb\", \"bbc\", \"dbbd\", \"aacc\"), y = 1:4))## # A tibble: 4 × 2\n##   x         y\n##   <chr> <int>\n## 1 abb       1\n## 2 bbc       2\n## 3 dbbd      3\n## 4 aacc      4\nt %>% filter(grepl(\"bb\", x))## # A tibble: 3 × 2\n##   x         y\n##   <chr> <int>\n## 1 abb       1\n## 2 bbc       2\n## 3 dbbd      3\nt %>% filter(str_detect(x, \"bb\"))## # A tibble: 3 × 2\n##   x         y\n##   <chr> <int>\n## 1 abb       1\n## 2 bbc       2\n## 3 dbbd      3"},{"path":"dplyr.html","id":"filter-across-multiple-columns","chapter":"10 Data mangling with dplyr","heading":"filter() across multiple columns","text":"Suppose dataframe multiple columns holding numeric data, want apply filter step taking columns account. instance, suppose dataset:Now, want filter rows rows Resting Heart rate 62, .function function(x) x > 60 (preferably ) replaced Lambda expression (discussed later chapter):Note particular case, pivot_longer function followed normal filter operation also done job. try .related function, if_all() works .","code":"\n(patient_data <- tibble(ID = LETTERS[1:6],\n                       age = c(33, 21, 57, 28, 82, 72),\n                       RHR_day1 = c(48, 54, 61, 55, 66, 62),\n                       RHR_day2 = c(49, 52, 56, 61, 62, 65),\n                       RHR_day3 = c(52, 56, 53, 60, 64, 69)))## # A tibble: 6 × 5\n##   ID      age RHR_day1 RHR_day2 RHR_day3\n##   <chr> <dbl>    <dbl>    <dbl>    <dbl>\n## 1 A        33       48       49       52\n## 2 B        21       54       52       56\n## 3 C        57       61       56       53\n## 4 D        28       55       61       60\n## 5 E        82       66       62       64\n## 6 F        72       62       65       69\nfilter(patient_data,\n       if_any(3:5, function(x) x > 62))## # A tibble: 2 × 5\n##   ID      age RHR_day1 RHR_day2 RHR_day3\n##   <chr> <dbl>    <dbl>    <dbl>    <dbl>\n## 1 E        82       66       62       64\n## 2 F        72       62       65       69\nfilter(patient_data,\n       if_any(3:5, ~ .x > 62)) "},{"path":"dplyr.html","id":"selecting-from-ranked-data","chapter":"10 Data mangling with dplyr","heading":"Selecting from ranked data","text":"top_n() function makes easy select cases based ranking value:see 4 cases returned third rank two cases.especially interesting grouped data:","code":"\ndose_response_long %>% top_n(3, Response)## # A tibble: 4 × 4\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 005     f     dose100mg       89\n## 2 006     f     dose100mg       99\n## 3 017     f     dose100mg       96\n## 4 021     f     dose100mg       89\ndose_response_long %>% group_by(Dose) %>% top_n(3, Response)## # A tibble: 7 × 4\n## # Groups:   Dose [2]\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 010     m     dose10mg        83\n## 2 011     m     dose10mg        72\n## 3 015     m     dose10mg        73\n## 4 005     f     dose100mg       89\n## 5 006     f     dose100mg       99\n## 6 017     f     dose100mg       96\n## 7 021     f     dose100mg       89"},{"path":"dplyr.html","id":"sorting-with-arrange","chapter":"10 Data mangling with dplyr","heading":"Sorting with arrange()","text":"want sort rows dataframe/tibble values one columns, use arrange()Use function desc() reverse orderingNote previous chunk equivalent thisSo natural ordering low high, top_n() function always orders high low. can reverse well using desc() function.","code":"\ndose_response_long %>% arrange(Response) %>% slice(1:3)## # A tibble: 3 × 4\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 024     m     dose100mg       10\n## 2 002     f     dose10mg        11\n## 3 026     f     dose10mg        11\ndose_response_long %>% arrange(desc(Response)) %>% head(1)## # A tibble: 1 × 4\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 006     f     dose100mg       99\ndose_response_long %>% top_n(1, Response)## # A tibble: 1 × 4\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 006     f     dose100mg       99"},{"path":"dplyr.html","id":"random-sampling","chapter":"10 Data mangling with dplyr","heading":"Random sampling","text":"two functions available random sampling: sample_n() sample_frac().workings sample_n() obvious guess.","code":"\nsample_frac(dose_response_long, 0.05, replace = TRUE)## # A tibble: 3 × 4\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 012     m     dose100mg       28\n## 2 025     m     dose100mg       36\n## 3 006     f     dose10mg        22"},{"path":"dplyr.html","id":"selecting-columns-1","chapter":"10 Data mangling with dplyr","heading":"10.2.2 Selecting columns","text":"","code":""},{"path":"dplyr.html","id":"selecting-variables-select","chapter":"10 Data mangling with dplyr","heading":"Selecting variables: select()","text":"function similar select argument subset() function.Choose variables table. Closely related rename() discussed ; select() keeps listed variables rename() keeps variables.use key = value format result rename variable.Use minus sign want select everything variable:can use colon operator indicate range variables:","code":"\nselect(dose_response_long, patient, gender = sex)## # A tibble: 52 × 2\n##   patient gender\n##   <chr>   <fct> \n## 1 001     f     \n## 2 002     f     \n## 3 003     m     \n## 4 004     m     \n## 5 005     f     \n## 6 006     f     \n## # ℹ 46 more rows\nselect(dose_response_long, -patient, -sex)## # A tibble: 52 × 2\n##   Dose     Response\n##   <chr>       <int>\n## 1 dose10mg       12\n## 2 dose10mg       11\n## 3 dose10mg       54\n## 4 dose10mg       71\n## 5 dose10mg       19\n## 6 dose10mg       22\n## # ℹ 46 more rows\n## same as \n#select(dose_response_long, -c(patient, sex))\nselect(dose_response_long, patient:Dose)## # A tibble: 52 × 3\n##   patient sex   Dose    \n##   <chr>   <fct> <chr>   \n## 1 001     f     dose10mg\n## 2 002     f     dose10mg\n## 3 003     m     dose10mg\n## 4 004     m     dose10mg\n## 5 005     f     dose10mg\n## 6 006     f     dose10mg\n## # ℹ 46 more rows"},{"path":"dplyr.html","id":"conditionally-select-columns","chapter":"10 Data mangling with dplyr","heading":"Conditionally select columns","text":"patient_data :wanted select heart rate column average 60?OK, also want ID age column retained. took figure . feeling done better.uses (), one tidyselect helpers ’ll see used . discussed next.","code":"\npatient_data## # A tibble: 6 × 5\n##   ID      age RHR_day1 RHR_day2 RHR_day3\n##   <chr> <dbl>    <dbl>    <dbl>    <dbl>\n## 1 A        33       48       49       52\n## 2 B        21       54       52       56\n## 3 C        57       61       56       53\n## 4 D        28       55       61       60\n## 5 E        82       66       62       64\n## 6 F        72       62       65       69\npatient_data %>%\n    select(-ID, -age) %>%\n    select_if(~ mean(.x) > 58)## # A tibble: 6 × 1\n##   RHR_day3\n##      <dbl>\n## 1       52\n## 2       56\n## 3       53\n## 4       60\n## 5       64\n## 6       69\npatient_data %>%\n    select(ID, age, where(~ is.numeric(.) && mean(.) > 58)) ## # A tibble: 6 × 3\n##   ID      age RHR_day3\n##   <chr> <dbl>    <dbl>\n## 1 A        33       52\n## 2 B        21       56\n## 3 C        57       53\n## 4 D        28       60\n## 5 E        82       64\n## 6 F        72       69"},{"path":"dplyr.html","id":"tidyselect-helpers","chapter":"10 Data mangling with dplyr","heading":"Tidyselect helpers","text":"select() rename(), also mutate(across()) pivot functions tidyr, can use special helper functions tidyselect package:starts_with(): Starts prefix.ends_with(): Ends suffix.contains(): Contains literal string.matches(): Matches regular expression.num_range(): Matches numerical range like x01, x02, x03.one_of(): Matches variable names character vector.everything(): Matches variables.last_col(): Select last variable, possibly offset.(): Select condition (predicate applied column)","code":"\nselect(dose_response_long, contains(\"o\"))## # A tibble: 52 × 2\n##   Dose     Response\n##   <chr>       <int>\n## 1 dose10mg       12\n## 2 dose10mg       11\n## 3 dose10mg       54\n## 4 dose10mg       71\n## 5 dose10mg       19\n## 6 dose10mg       22\n## # ℹ 46 more rows"},{"path":"dplyr.html","id":"extract-a-column-as-vector","chapter":"10 Data mangling with dplyr","heading":"Extract a column as vector","text":"Using pull() can obtain atomic vectors.course dose_response_long[[4]] dose_response_long$Response difference pull() can applied %>% pipeline.\ndose_response_long[, 4] matters whether working tibble dataframe; tibble returns tibble dataframe returns vector.","code":"\npull(dose_response_long, Response)##  [1] 12 11 54 71 19 22 23 68 30 83 72 48 67 13 73 20 22 40 57 26 17 29 54 61 57\n## [26] 11 88 54 14 21 89 99 69 31 85 18 37 28 16 79 22 84 96 14 12 63 89 77 21 10\n## [51] 36 80"},{"path":"dplyr.html","id":"adding-and-changing-variables","chapter":"10 Data mangling with dplyr","heading":"10.3 Adding and changing variables","text":"","code":""},{"path":"dplyr.html","id":"window-functions","chapter":"10 Data mangling with dplyr","heading":"10.3.1 Window functions","text":"new variable usually result operation one previous variables. data original variables processed old value new value generated. Functions carry kind operation called window functions. Thus, window functions functions take vector return another vector length.instance, cumsum() function returns cumulative sum numeric vector:main window functions. Note come base R. Later see use several concert mutate() function.dplyr::lead\nCopy values shifted 1.\n\nlead(c(1, 4, 2, 8))\n## [1]  4  2  8 NAdplyr::lead\nCopy values shifted 1.dplyr::lag\nCopy values lagged 1.\n\nlag(c(1, 4, 2, 8))\n## [1] NA  1  4  2dplyr::lag\nCopy values lagged 1.dplyr::min_rank\nRanks values, low high. Use desc() reverse.\n\nmin_rank(c(5, 4, 2, 8))\n## [1] 3 2 1 4dplyr::min_rank\nRanks values, low high. Use desc() reverse.dplyr::ntile\nBin vector n buckets.\n\nntile(c(5, 4, 2, 8, 1), 3)\n## [1] 2 2 1 3 1dplyr::ntile\nBin vector n buckets.dplyr::\nvalues b?\n\n(c(5, 4, 2, 8, 1), 3, 5)\n## [1]  TRUE  TRUE FALSE FALSE FALSEdplyr::\nvalues b?dplyr::cummean\nCumulative mean\n\ncummean(c(5, 4, 2, 8, 1))\n## [1] 5.00 4.50 3.67 4.75 4.00dplyr::cummean\nCumulative meancumsum\nCumulative sum\n\ncumsum(c(5, 4, 2, 8, 1))\n## [1]  5  9 11 19 20cumsum\nCumulative sumcummax\nCumulative maximum\n\ncummax(c(5, 4, 2, 8, 1))\n## [1] 5 5 5 8 8cummax\nCumulative maximumcummin\nCumulative minimum\n\ncummin(c(5, 4, 2, 8, 1))\n## [1] 5 4 2 2 1cummin\nCumulative minimumcumprod\nCumulative product\n\ncumprod(c(5, 4, 2, 8, 1))\n## [1]   5  20  40 320 320cumprod\nCumulative productpmax\nElement-wise maximum\n\npmax(c(5, 4, 2, 8, 1), c(2, 2, 3, 4, 3))\n## [1] 5 4 3 8 3pmax\nElement-wise maximumpmin\nElement-wise minimum\n\npmin(c(5, 4, 2, 8, 1), c(2, 2, 3, 4, 3))\n## [1] 2 2 2 4 1pmin\nElement-wise minimum","code":"\ncumsum(1:5)## [1]  1  3  6 10 15\nlead(c(1, 4, 2, 8))## [1]  4  2  8 NA\nlag(c(1, 4, 2, 8))## [1] NA  1  4  2\nmin_rank(c(5, 4, 2, 8))## [1] 3 2 1 4\nntile(c(5, 4, 2, 8, 1), 3)## [1] 2 2 1 3 1\nbetween(c(5, 4, 2, 8, 1), 3, 5)## [1]  TRUE  TRUE FALSE FALSE FALSE\ncummean(c(5, 4, 2, 8, 1))## [1] 5.00 4.50 3.67 4.75 4.00\ncumsum(c(5, 4, 2, 8, 1))## [1]  5  9 11 19 20\ncummax(c(5, 4, 2, 8, 1))## [1] 5 5 5 8 8\ncummin(c(5, 4, 2, 8, 1))## [1] 5 4 2 2 1\ncumprod(c(5, 4, 2, 8, 1))## [1]   5  20  40 320 320\npmax(c(5, 4, 2, 8, 1), c(2, 2, 3, 4, 3))## [1] 5 4 3 8 3\npmin(c(5, 4, 2, 8, 1), c(2, 2, 3, 4, 3))## [1] 2 2 2 4 1"},{"path":"dplyr.html","id":"mutate","chapter":"10 Data mangling with dplyr","heading":"10.3.2 Mutate","text":"","code":""},{"path":"dplyr.html","id":"renaming-variables-rename","chapter":"10 Data mangling with dplyr","heading":"Renaming variables: rename()","text":"Rename variables table.","code":"\ndose_response_long %>% rename(Patient = patient, Gender = sex)## # A tibble: 52 × 4\n##   Patient Gender Dose     Response\n##   <chr>   <fct>  <chr>       <int>\n## 1 001     f      dose10mg       12\n## 2 002     f      dose10mg       11\n## 3 003     m      dose10mg       54\n## 4 004     m      dose10mg       71\n## 5 005     f      dose10mg       19\n## 6 006     f      dose10mg       22\n## # ℹ 46 more rows"},{"path":"dplyr.html","id":"add-one-or-more-variables-mutate","chapter":"10 Data mangling with dplyr","heading":"Add one or more variables: mutate()","text":"function mutate() can used calculate append one columns.window functions previous section often-used helpers.instance, given ChickWeight dataset shows weight gain 50 chicks:Suppose want know daily weight gain chicks (challenge, try base R).Using lag() mutate() breeze (seems):…devil details:transition chick 1 chick 2 taken account!\nget weight gain chick, need split data first. dealt later section preview:Can use custom function mutate context? course can!’s , can make multiple columns one operation calculations subsequent columns interdependent.","code":"\nchicks <- as_tibble(ChickWeight) \nchicks %>% head(5)## # A tibble: 5 × 4\n##   weight  Time Chick Diet \n##    <dbl> <dbl> <ord> <fct>\n## 1     42     0 1     1    \n## 2     51     2 1     1    \n## 3     59     4 1     1    \n## 4     64     6 1     1    \n## 5     76     8 1     1\n(chicks <- chicks %>% mutate(weight_gain = weight - lag(weight)))## # A tibble: 578 × 5\n##   weight  Time Chick Diet  weight_gain\n##    <dbl> <dbl> <ord> <fct>       <dbl>\n## 1     42     0 1     1              NA\n## 2     51     2 1     1               9\n## 3     59     4 1     1               8\n## 4     64     6 1     1               5\n## 5     76     8 1     1              12\n## 6     93    10 1     1              17\n## # ℹ 572 more rows\nchicks %>% slice(10:15)## # A tibble: 6 × 5\n##   weight  Time Chick Diet  weight_gain\n##    <dbl> <dbl> <ord> <fct>       <dbl>\n## 1    171    18 1     1              22\n## 2    199    20 1     1              28\n## 3    205    21 1     1               6\n## 4     40     0 2     1            -165\n## 5     49     2 2     1               9\n## 6     58     4 2     1               9\nchicks <- chicks %>% \n    group_by(Chick) %>% #split on chicks\n    mutate(weight_gain = weight - lag(weight)) %>% \n    ungroup() #put together again\nslice(chicks, 10:15)## # A tibble: 6 × 5\n##   weight  Time Chick Diet  weight_gain\n##    <dbl> <dbl> <ord> <fct>       <dbl>\n## 1    171    18 1     1              22\n## 2    199    20 1     1              28\n## 3    205    21 1     1               6\n## 4     40     0 2     1              NA\n## 5     49     2 2     1               9\n## 6     58     4 2     1               9\nmy_z <- function(x) {\n    abs((abs(x - mean(x)) / sd(x)))\n}\nwomen %>% \n    mutate(z_score = my_z(weight)) %>% \n    head()##   height weight  bmi z_score\n## 1     58    115 24.0   1.402\n## 2     59    117 23.6   1.273\n## 3     60    120 23.4   1.080\n## 4     61    123 23.2   0.886\n## 5     62    126 23.0   0.693\n## 6     63    129 22.8   0.499\nwomen %>% \n    mutate(z_score = my_z(weight),\n           z_bin = ntile(z_score, 3)) %>% \n    head()##   height weight  bmi z_score z_bin\n## 1     58    115 24.0   1.402     3\n## 2     59    117 23.6   1.273     3\n## 3     60    120 23.4   1.080     2\n## 4     61    123 23.2   0.886     2\n## 5     62    126 23.0   0.693     2\n## 6     63    129 22.8   0.499     1"},{"path":"dplyr.html","id":"multi-column-mutate-or-summary","chapter":"10 Data mangling with dplyr","heading":"Multi-column mutate or summary","text":"want apply mutate operation selection multiple columns need use across() function.general signature:can see, across() function takes two main arguments: selection columns - often result one tidyselect helpers - function list functions apply columns. .names= argument can used specify column names generated ... arguments passing arguments applied functions, just like wehave seen apply().","code":"\nacross(.cols = everything(), .fns = NULL, ..., .names = NULL)"},{"path":"dplyr.html","id":"many-ways-to-select-columns","chapter":"10 Data mangling with dplyr","heading":"Many ways to select columns","text":"first example tidyselect helper function everything() used.\nsimilar usage base R apply() function.Suppose want calculate log2 numeric values iris dataset.\nbase R probably like :mutate(across(...)) similar solution:tidyselect helper everything() expect given name. Notice original columns dropped new columns name original ones.select(-Species) %>% however, bit redundant use across() function full potential combination tidyselect helpers. examples (first evaluated output similar ).Using indices:Using column names (quotes required):Using text matching column names:Finally: Using (.numeric) apply logical filter column type:Execute help(package = \"tidyselect\") see listing possibilities.\nseen, alternatives selecting columns almost endless.","code":"\nhead(apply(iris[, -5], MARGIN = 2, FUN = log2))##      Sepal.Length Sepal.Width Petal.Length Petal.Width\n## [1,]         2.35        1.81        0.485       -2.32\n## [2,]         2.29        1.58        0.485       -2.32\n## [3,]         2.23        1.68        0.379       -2.32\n## [4,]         2.20        1.63        0.585       -2.32\n## [5,]         2.32        1.85        0.485       -2.32\n## [6,]         2.43        1.96        0.766       -1.32\niris %>% \n    select(-Species) %>%\n    mutate(across(everything(), log2)) %>%\n    head(3)##   Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1         2.35        1.81        0.485       -2.32\n## 2         2.29        1.58        0.485       -2.32\n## 3         2.23        1.68        0.379       -2.32\niris %>% summarize(across(1:4, mean))##   Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1         5.84        3.06         3.76         1.2\niris %>% summarize(across(c(Sepal.Length, Sepal.Width), mean))\niris %>% summarize(across(starts_with(\"P\"), mean))\niris %>% summarize(across(contains(\".\"), mean))\niris %>% summarize(across(where(is.numeric), mean))"},{"path":"dplyr.html","id":"many-ways-to-apply-functions","chapter":"10 Data mangling with dplyr","heading":"Many ways to apply functions","text":"Besides single function name apply, can provide lists functions, anonymous functions lambdas. examples.can provide named list apply one function. case list name used column name. Surprisingly enough, original columns maintained use case (also list contains one entry)!don’t give entries names (e.g. list(log2, sqrt) instead list(log = log2, sqrt = sqrt)) resulting column names receive simple serial numbers.However, use tibble::list() instead, function names get used even though don’t provide names (results omitted):can also pass lambdas across() instead function name. Lambda’s anonymous function-like expressions. Although form harder grasp, make easier pass arguments function want executed (case tcenter = FALSE scale)., can also pass (named) list:expression ~ mean(.x, trim = 0.2) therefore equivalent something like\nfunction (.x) mean(.x, trim = 0.2) tilde shorthand function (.x). Instead .x single dot . also allowed, syntax used locations tidyverse - see group_map() related functions.","code":"\niris %>% \n    select(-Species) %>%\n    mutate(across(everything(), list(log = log2, sqrt = sqrt))) %>%\n    head(3)##   Sepal.Length Sepal.Width Petal.Length Petal.Width Sepal.Length_log\n## 1          5.1         3.5          1.4         0.2             2.35\n## 2          4.9         3.0          1.4         0.2             2.29\n## 3          4.7         3.2          1.3         0.2             2.23\n##   Sepal.Length_sqrt Sepal.Width_log Sepal.Width_sqrt Petal.Length_log\n## 1              2.26            1.81             1.87            0.485\n## 2              2.21            1.58             1.73            0.485\n## 3              2.17            1.68             1.79            0.379\n##   Petal.Length_sqrt Petal.Width_log Petal.Width_sqrt\n## 1              1.18           -2.32            0.447\n## 2              1.18           -2.32            0.447\n## 3              1.14           -2.32            0.447\niris %>% \n    select(-Species) %>%\n    mutate(across(everything(), list(log = log2, sqrt = sqrt)))\niris %>% \n    mutate(across(1:4, ~ scale(.x, center = FALSE))) %>%\n    head(5)##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1        0.861       1.130        0.336        0.14  setosa\n## 2        0.828       0.968        0.336        0.14  setosa\n## 3        0.794       1.033        0.312        0.14  setosa\n## 4        0.777       1.001        0.360        0.14  setosa\n## 5        0.844       1.162        0.336        0.14  setosa\niris %>% \n    mutate(across(1:4, list(scaled = ~ scale(., center = FALSE), \n                            mean = ~ mean(., trim = 0.2)))) %>%\n    head(5)##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Length_scaled\n## 1          5.1         3.5          1.4         0.2  setosa               0.861\n## 2          4.9         3.0          1.4         0.2  setosa               0.828\n## 3          4.7         3.2          1.3         0.2  setosa               0.794\n## 4          4.6         3.1          1.5         0.2  setosa               0.777\n## 5          5.0         3.6          1.4         0.2  setosa               0.844\n##   Sepal.Length_mean Sepal.Width_scaled Sepal.Width_mean Petal.Length_scaled\n## 1               5.8              1.130             3.04               0.336\n## 2               5.8              0.968             3.04               0.336\n## 3               5.8              1.033             3.04               0.312\n## 4               5.8              1.001             3.04               0.360\n## 5               5.8              1.162             3.04               0.336\n##   Petal.Length_mean Petal.Width_scaled Petal.Width_mean\n## 1              3.84               0.14              1.2\n## 2              3.84               0.14              1.2\n## 3              3.84               0.14              1.2\n## 4              3.84               0.14              1.2\n## 5              3.84               0.14              1.2"},{"path":"dplyr.html","id":"change-values-of-a-variable-recode-and-recode_factor","chapter":"10 Data mangling with dplyr","heading":"Change values of a variable: recode() and recode_factor()","text":"two functions help quickly change values variable. , Dose variable overwritten new -numeric- values. Note original dose_response_long tibble modified!Similarly, sex variable can recoded recode_factor() function. example ,\n- Response variable created based sex variable,\n- sex variable deleted \n- variables reordered original format","code":"\nhead(dose_response_long, 2)## # A tibble: 2 × 4\n##   patient sex   Dose     Response\n##   <chr>   <fct> <chr>       <int>\n## 1 001     f     dose10mg       12\n## 2 002     f     dose10mg       11\ndose_response_long %>% \n    mutate(Dose = recode(Dose, dose10mg = 10, dose100mg = 100)) %>%\n    head(2)## # A tibble: 2 × 4\n##   patient sex    Dose Response\n##   <chr>   <fct> <dbl>    <int>\n## 1 001     f        10       12\n## 2 002     f        10       11\ndose_response_long %>%\n    mutate(Gender = recode_factor(sex, f = \"female\", m = \"male\"), \n           sex = NULL) %>%\n    select(patient, Gender, Dose, Response) %>%\n    head(3)## # A tibble: 3 × 4\n##   patient Gender Dose     Response\n##   <chr>   <fct>  <chr>       <int>\n## 1 001     female dose10mg       12\n## 2 002     female dose10mg       11\n## 3 003     male   dose10mg       54"},{"path":"dplyr.html","id":"operations-on-groups","chapter":"10 Data mangling with dplyr","heading":"10.3.3 Operations on groups","text":"Often want know something groups data. instance, previous examples chickens, interesting know average weight gain chickens diet. group_by() function comes , counterpart ungroup().One important thing realize group_by() split data. instead, adds metadata tibble (data.frame) marks rows grouped. long metadata -.e. called ungroup()- won’t able change factors columns involved grouping.really want split, like base R split() function, use group_split() function.","code":""},{"path":"dplyr.html","id":"group_by-and-ungroup","chapter":"10 Data mangling with dplyr","heading":"group_by() and ungroup()","text":"used set grouping functions. usually followed summary function -discussed - sometimes, case weight gain outlined section 10.3.2, want progress data combined. case need ungroup .summary use case. need ungrouping.course can group multiple variables.grouping variable, sometimes interested top bottom n rows. head() function work , surprisingly enough. Suppose want bottom 2 responses males females dose100mg group. Surprisingly enough work:Instead, select top n values grouping need use either slice() filter(row_number() <-logical-test>). correct solution.rather lengthy use case ungrouping: z-score calculated per sex group, Dose-specific calculation summarizing. required ungroup .","code":"\ndose_response_long %>% \n    group_by(sex) %>% \n    summarise(mean = mean(Response))## # A tibble: 2 × 2\n##   sex    mean\n##   <fct> <dbl>\n## 1 f      50.3\n## 2 m      41.7\ndose_response_long %>% \n    group_by(Dose, sex) %>% \n    summarize(mean = mean(Response))## `summarise()` has grouped output by 'Dose'. You can override using the\n## `.groups` argument.## # A tibble: 4 × 3\n## # Groups:   Dose [2]\n##   Dose      sex    mean\n##   <chr>     <fct> <dbl>\n## 1 dose100mg f      80.9\n## 2 dose100mg m      21.5\n## 3 dose10mg  f      19.6\n## 4 dose10mg  m      61.9\ndose_response_long %>%\n    filter(Dose == \"dose100mg\") %>%\n    group_by(sex) %>%\n    arrange(Response) %>%\n    head(2) %>%\n    ungroup() ## # A tibble: 2 × 4\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 024     m     dose100mg       10\n## 2 019     m     dose100mg       12\ndose_response_long %>%\n    filter(Dose == \"dose100mg\") %>%\n    group_by(sex) %>%\n    arrange(Response) %>%\n    slice(1:2) %>%\n    #filter(row_number() %in% 1:2) %>% #also works\n    ungroup() #ungrouping not required but I added it for clarity of code## # A tibble: 4 × 4\n##   patient sex   Dose      Response\n##   <chr>   <fct> <chr>        <int>\n## 1 002     f     dose100mg       54\n## 2 020     f     dose100mg       63\n## 3 024     m     dose100mg       10\n## 4 019     m     dose100mg       12\ndose_response_long %>%\n    group_by(sex) %>%\n    mutate(Response_Z = my_z(Response)) %>%\n    ungroup() %>% ##ungroup for other grouping\n    group_by(Dose) %>%\n    mutate(Response_scaled = scale(Response)) %>%\n    summarize(Z = mean(Response_Z), Scaled_Mean_sd = sd(Response_scaled))## # A tibble: 2 × 3\n##   Dose          Z Scaled_Mean_sd\n##   <chr>     <dbl>          <dbl>\n## 1 dose100mg 0.906              1\n## 2 dose10mg  0.912              1"},{"path":"dplyr.html","id":"group_split-and-group_keys","chapter":"10 Data mangling with dplyr","heading":"group_split() and group_keys()","text":"group_split() function equivalent base R split() function. uses grouping structure group_by() therefore subject data mask. Also, name elements list based grouping. example (unevaluated), split() return list two named elements ($m $f), list returned group_split() accessible [[1]] [[2]].last grouping-related function, group_keys(), returns tibble explaining grouping structure:","code":"\ndose_response_long %>%\n    group_split(sex)\n##same as\nsplit(as.data.frame(dose_response_long), dose_response_long$sex)\ndose_response_long %>%\n    group_keys(sex, Dose)## Warning: The `...` argument of `group_keys()` is deprecated as of dplyr 1.0.0.\n## ℹ Please `group_by()` first\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.## # A tibble: 4 × 2\n##   sex   Dose     \n##   <fct> <chr>    \n## 1 f     dose100mg\n## 2 f     dose10mg \n## 3 m     dose100mg\n## 4 m     dose10mg"},{"path":"dplyr.html","id":"apply-a-function-to-each-group","chapter":"10 Data mangling with dplyr","heading":"Apply a function to each group","text":"group_map(), group_modify() group_walk() functions can used iterate grouped tibbles.group_modify() returns grouped tibble. Therefore supplied function must return data frame/tibble able combine results individual subsets.group_map() returns list results, element result calling supplied function groupgroup_walk() calls supplied function side effects returns input .tbl, invisibly. makes possible , instance, print intermediate results write file without breaking workflow.example group_map(). can see takes lambda expression seen :another example, resulting list three dataframes combined single dataframe (result printed):example group_modify.course, nicer put quantiles separate columns.much nicer course:Use group_walk() want peek group processing .","code":"\ndose_response_long %>%\n    group_by(Dose) %>%\n    group_map(~ quantile(.x$Response, probs = seq(0, 1, 0.2)))## [[1]]\n##   0%  20%  40%  60%  80% 100% \n##   10   18   31   69   85   99 \n## \n## [[2]]\n##   0%  20%  40%  60%  80% 100% \n##   11   19   26   54   67   83\niris %>%\n    group_by(Species) %>%\n    group_map(.f = ~ data.frame(Sep.rat = .x$Sepal.Length / .x$Sepal.Width,\n                                Pet.rat = .x$Petal.Length / .x$Petal.Width)) %>%\n    bind_rows() \niris %>%\n    group_by(Species) %>%\n    group_modify(~ tibble(quant = quantile(.x$Petal.Length, probs = seq(0, 1, 0.25))))## # A tibble: 15 × 2\n## # Groups:   Species [3]\n##   Species    quant\n##   <fct>      <dbl>\n## 1 setosa      1   \n## 2 setosa      1.4 \n## 3 setosa      1.5 \n## 4 setosa      1.58\n## 5 setosa      1.9 \n## 6 versicolor  3   \n## # ℹ 9 more rows\niris %>%\n    group_by(Species) %>%\n    group_modify(~ tibble(quant = quantile(.x$Petal.Length, probs = seq(0, 1, 0.2)))) %>%\n    ungroup() %>%\n    mutate(prob = rep(seq(0, 1, 0.2), times = 3)) %>%\n    pivot_wider(names_from = prob, values_from = quant)## # A tibble: 3 × 7\n##   Species      `0` `0.2` `0.4` `0.6` `0.8`   `1`\n##   <fct>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n## 1 setosa       1     1.3  1.4    1.5   1.6   1.9\n## 2 versicolor   3     3.9  4.2    4.5   4.7   5.1\n## 3 virginica    4.5   5.1  5.36   5.6   6     6.9\niris %>%\n    group_by(Species) %>%\n    group_map(~ c(.y, quantile(.x$Petal.Length, probs = seq(0, 1, 0.2)))) %>%\n    bind_rows()## # A tibble: 3 × 7\n##   Species     `0%` `20%` `40%` `60%` `80%` `100%`\n##   <fct>      <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>\n## 1 setosa       1     1.3  1.4    1.5   1.6    1.9\n## 2 versicolor   3     3.9  4.2    4.5   4.7    5.1\n## 3 virginica    4.5   5.1  5.36   5.6   6      6.9\ndose_response_long %>%\n    group_by(Dose) %>%\n    group_walk(~ print(head(.x, 2))) %>% \n    summarise(avg = mean(Response))## # A tibble: 2 × 3\n##   patient sex   Response\n##   <chr>   <fct>    <int>\n## 1 001     f           88\n## 2 002     f           54\n## # A tibble: 2 × 3\n##   patient sex   Response\n##   <chr>   <fct>    <int>\n## 1 001     f           12\n## 2 002     f           11## # A tibble: 2 × 2\n##   Dose        avg\n##   <chr>     <dbl>\n## 1 dose100mg  51.2\n## 2 dose10mg   40.8"},{"path":"dplyr.html","id":"operations-on-rows","chapter":"10 Data mangling with dplyr","heading":"10.3.4 Operations on rows","text":"Rows just special case groups.Suppose workflow want add column containing rowwise means selection columns data frame. instance, apply used calculate mean ratios Length/Width Sepals Petals iris dataset.works. want embed step tidyverse workflow?Using mutate() function, probably first try something like :OK, works, drag many columns involved.\nLet’s try something slightly different:get mean entire numeric part iris dataset!solution combination rowwise() c_across().Alternative selections beenThere restriction : unlike apply functions, data types selected columns must work.","code":"\nmean_ratios <- function(x) {\n    (x[1]/x[2] + x[3]/x[4])/2\n} \n\nmr <- apply(X = iris[, 1:4],\n      MARGIN = 1,\n      FUN = mean_ratios)\niris$mean_ratios <- mr\nhead(iris)##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species mean_ratios\n## 1          5.1         3.5          1.4         0.2  setosa        4.23\n## 2          4.9         3.0          1.4         0.2  setosa        4.32\n## 3          4.7         3.2          1.3         0.2  setosa        3.98\n## 4          4.6         3.1          1.5         0.2  setosa        4.49\n## 5          5.0         3.6          1.4         0.2  setosa        4.19\n## 6          5.4         3.9          1.7         0.4  setosa        2.82\niris %>% \n    mutate(mean_ratio = (Sepal.Length/Sepal.Width + Petal.Length/Petal.Width)/2) %>% \n    head(n = 10)##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species mean_ratios\n## 1           5.1         3.5          1.4         0.2  setosa        4.23\n## 2           4.9         3.0          1.4         0.2  setosa        4.32\n## 3           4.7         3.2          1.3         0.2  setosa        3.98\n## 4           4.6         3.1          1.5         0.2  setosa        4.49\n## 5           5.0         3.6          1.4         0.2  setosa        4.19\n## 6           5.4         3.9          1.7         0.4  setosa        2.82\n## 7           4.6         3.4          1.4         0.3  setosa        3.01\n## 8           5.0         3.4          1.5         0.2  setosa        4.49\n## 9           4.4         2.9          1.4         0.2  setosa        4.26\n## 10          4.9         3.1          1.5         0.1  setosa        8.29\n##    mean_ratio\n## 1        4.23\n## 2        4.32\n## 3        3.98\n## 4        4.49\n## 5        4.19\n## 6        2.82\n## 7        3.01\n## 8        4.49\n## 9        4.26\n## 10       8.29\niris %>% \n    mutate(rowmeans = mean(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))) %>% \n    select(-mean_ratios, -Species) %>%\n    head()##   Sepal.Length Sepal.Width Petal.Length Petal.Width rowmeans\n## 1          5.1         3.5          1.4         0.2     3.46\n## 2          4.9         3.0          1.4         0.2     3.46\n## 3          4.7         3.2          1.3         0.2     3.46\n## 4          4.6         3.1          1.5         0.2     3.46\n## 5          5.0         3.6          1.4         0.2     3.46\n## 6          5.4         3.9          1.7         0.4     3.46\niris %>%\n    rowwise() %>%\n    mutate(rowmeans = mean(c_across(1:4))) %>% \n    head()## # A tibble: 6 × 7\n## # Rowwise: \n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species mean_ratios rowmeans\n##          <dbl>       <dbl>        <dbl>       <dbl> <fct>         <dbl>    <dbl>\n## 1          5.1         3.5          1.4         0.2 setosa         4.23     2.55\n## 2          4.9         3            1.4         0.2 setosa         4.32     2.38\n## 3          4.7         3.2          1.3         0.2 setosa         3.98     2.35\n## 4          4.6         3.1          1.5         0.2 setosa         4.49     2.35\n## 5          5           3.6          1.4         0.2 setosa         4.19     2.55\n## 6          5.4         3.9          1.7         0.4 setosa         2.82     2.85\nrowmeans = mean(c_across(contains(\".\")))\nrowmeans = mean(c_across(where(is.numeric)))\nrowmeans = mean(c_across(-Species))\n## simpler but less generic\nrowmeans = mean(Sepal.Length, Sepal.Width, Petal.Lenght, Petal.Width)"},{"path":"dplyr.html","id":"summarizing-and-counting","chapter":"10 Data mangling with dplyr","heading":"10.4 Summarizing and counting","text":"seen summarize() function work times. essence, creates one summary statistics, group, existing.instance, calculate mean SD relative weight gain different diets, workflow :equivalent creates summary group variables: summarize_all(), summarize_at() summareize_if() analogous mutate_xxx() methods. one example.able figure rest now.","code":"\nchicks %>% \n    group_by(Chick) %>% #split on chicks\n    mutate(rel_weight_gain = (weight - lag(weight))/weight) %>% \n    ungroup() %>%\n    group_by(Diet) %>%\n    summarize(mean_rel_gain = mean(rel_weight_gain, na.rm = T), \n              sd = sd(rel_weight_gain, na.rm = T))## # A tibble: 4 × 3\n##   Diet  mean_rel_gain     sd\n##   <fct>         <dbl>  <dbl>\n## 1 1             0.111 0.0743\n## 2 2             0.131 0.0742\n## 3 3             0.153 0.0657\n## 4 4             0.142 0.0748\niris %>% \n    summarize_if(is.numeric, list(mean = mean, sd = sd))##   Sepal.Length_mean Sepal.Width_mean Petal.Length_mean Petal.Width_mean\n## 1              5.84             3.06              3.76              1.2\n##   mean_ratios_mean Sepal.Length_sd Sepal.Width_sd Petal.Length_sd\n## 1             3.13           0.828          0.436            1.77\n##   Petal.Width_sd mean_ratios_sd\n## 1          0.762           1.13"},{"path":"dplyr.html","id":"simple-counting-of-occurrences","chapter":"10 Data mangling with dplyr","heading":"Simple counting of occurrences","text":"often used operation simple counting occurrences course:shorthand type count: tally():even shorter :want counts sorted, use sort = TRUE argument count, e.g.mtcars %>% count(cyl, sort = TRUE)want count column dataset, use add_tally() add_count()add_count() useful groupwise filtering, instance want show details group occurs least.","code":"\ndose_response_long %>%\n    group_by(sex, Dose) %>%\n    summarize(count = n())## `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n## argument.## # A tibble: 4 × 3\n## # Groups:   sex [2]\n##   sex   Dose      count\n##   <fct> <chr>     <int>\n## 1 f     dose100mg    13\n## 2 f     dose10mg     13\n## 3 m     dose100mg    13\n## 4 m     dose10mg     13\ndose_response_long %>%\n    group_by(sex, Dose) %>%\n    tally()## # A tibble: 4 × 3\n## # Groups:   sex [2]\n##   sex   Dose          n\n##   <fct> <chr>     <int>\n## 1 f     dose100mg    13\n## 2 f     dose10mg     13\n## 3 m     dose100mg    13\n## 4 m     dose10mg     13\ndose_response_long %>%\n    count(sex, Dose)## # A tibble: 4 × 3\n##   sex   Dose          n\n##   <fct> <chr>     <int>\n## 1 f     dose100mg    13\n## 2 f     dose10mg     13\n## 3 m     dose100mg    13\n## 4 m     dose10mg     13\ndose_response_long %>%\n    group_by(sex) %>%\n    add_tally()## # A tibble: 52 × 5\n## # Groups:   sex [2]\n##   patient sex   Dose     Response     n\n##   <chr>   <fct> <chr>       <int> <int>\n## 1 001     f     dose10mg       12    26\n## 2 002     f     dose10mg       11    26\n## 3 003     m     dose10mg       54    26\n## 4 004     m     dose10mg       71    26\n## 5 005     f     dose10mg       19    26\n## 6 006     f     dose10mg       22    26\n## # ℹ 46 more rows\n##same as below, but slightly more readable:\n#add_count(sex)\nmtcars %>% \n    add_count(cyl) %>%\n    filter(n == min(n)) %>%\n    select(1:5, n)##    mpg cyl disp  hp drat n\n## 1 21.0   6  160 110 3.90 7\n## 2 21.0   6  160 110 3.90 7\n## 3 21.4   6  258 110 3.08 7\n## 4 18.1   6  225 105 2.76 7\n## 5 19.2   6  168 123 3.92 7\n## 6 17.8   6  168 123 3.92 7\n## 7 19.7   6  145 175 3.62 7"},{"path":"dplyr.html","id":"combining-data","chapter":"10 Data mangling with dplyr","heading":"10.5 Combining data","text":"","code":""},{"path":"dplyr.html","id":"merging","chapter":"10 Data mangling with dplyr","heading":"Merging","text":"functions, left_join(), right_join(), inner_join(), full_join(); full_join() discussed ; others variations behaving differently missing data one data frames combine. base R merge() responsible kind operations.Suppose two tibbles:Since common variable “ID” can simply combine two single tibble:column names differ can specify full_join(x, y, = c(\"\" = \"b\")) match variable tibble x variable b tibble y.\ncan course also workflow setting:","code":"\n(trA <- tribble(\n  ~ID, ~var1,\n  \"a\",   4,\n  \"b\",   6,\n  \"c\",   1,\n))## # A tibble: 3 × 2\n##   ID     var1\n##   <chr> <dbl>\n## 1 a         4\n## 2 b         6\n## 3 c         1\n(trB <- tribble(\n  ~ID, ~var2,\n  \"a\",   7,\n  \"b\",   3,\n  \"d\",   5\n))## # A tibble: 3 × 2\n##   ID     var2\n##   <chr> <dbl>\n## 1 a         7\n## 2 b         3\n## 3 d         5\nfull_join(trA, trB, by = \"ID\")## # A tibble: 4 × 3\n##   ID     var1  var2\n##   <chr> <dbl> <dbl>\n## 1 a         4     7\n## 2 b         6     3\n## 3 c         1    NA\n## 4 d        NA     5\ntrA %>% full_join(trB, by = \"ID\")## # A tibble: 4 × 3\n##   ID     var1  var2\n##   <chr> <dbl> <dbl>\n## 1 a         4     7\n## 2 b         6     3\n## 3 c         1    NA\n## 4 d        NA     5"},{"path":"dplyr.html","id":"adding-rows-and-columns","chapter":"10 Data mangling with dplyr","heading":"Adding rows and columns","text":"add rows, use bind_rows() add columns, use bind_cols() look docs details. pretty much self-explanatory, analogous base R cbind() rbind() functions. difference bind_rows() bind_cols() accept multiple dataframes.","code":""},{"path":"regex.html","id":"regex","chapter":"11 Text processing with regex","heading":"11 Text processing with regex","text":"","code":""},{"path":"regex.html","id":"regex-syntax","chapter":"11 Text processing with regex","heading":"11.1 Regex syntax","text":"","code":""},{"path":"regex.html","id":"why-regexes","chapter":"11 Text processing with regex","heading":"11.1.1 Why regexes?","text":"chapter deals processing data textual form: character data.\nworking text, really need able work regular expressions. dealt first, together base R regex functions. functions stringr package discussed.easy enough look word “Chimpanzee” vector containing animal species names:going multiple variants word looking ? ?solution using literals, describe patterns.Look example. describe pattern correctly identify Chimpanzee occurrences?pattern something like ?letter C upper-lower case followed ‘himp’ followed nothing ‘anzee’programming use regular expressions RegEx describe pattern formal concise way:[Cc]himp(anzee)?apply pattern R, use one several functions dedicated task. one, grepl(), returns TRUE regex matched vector element.Pattern matching process finding, locating, extracting replacing patterns character data usually literally described.","code":"\nanimals = c(\"Chimpanzee\", \"Cow\", \"Camel\")\nanimals == \"Chimpanzee\"## [1]  TRUE FALSE FALSE\nanimals = c(\"Chimpanzee\", \"Chimp\", \"chimpanzee\", \"Camel\")\nanimals == \"Chimpanzee\" | animals == \"Chimp\" | animals == \"chimpanzee\"## [1]  TRUE  TRUE  TRUE FALSE\ngrepl(\"[Cc]himp(anzee)?\", animals)## [1]  TRUE  TRUE  TRUE FALSE"},{"path":"regex.html","id":"base-functions-using-regex","chapter":"11 Text processing with regex","heading":"Base functions using regex","text":"several base R functions dedicated finding patters character data.\ndiffer intent output. Later, stringr counterparts discussed.finding element contain pattern (TRUE/FALSE)? grepl(pattern, string)locating elements contain pattern (INDEX)? grep(pattern, string)extracting Get content matching elements grep(pattern, string, value = TRUE)replace Replace first occurrence pattern sub(pattern, replacement, string)replace Replace occurrences pattern gsub(pattern, replacement, string)Note stringr package tidyverse many user-friendly functions field well. Two dealt exercises.","code":""},{"path":"regex.html","id":"regex-components","chapter":"11 Text processing with regex","heading":"11.1.2 Regex components","text":"regular expression can build combination ofcharacter sequences - Literal character sequences ‘chimp’character classes - listing possibilities single position.\nbrackets: [adgk] means ‘’ ‘d’ ‘g’ ‘k’.\nUse hyphen create series: [3-9] means digits 3 9 [-zA-Z] means alphabet characters.\nNegate using ^. [^adgk] means anything , d, g k.\nspecial case dot .: character matches.\nMany special character classes exist (digits, whitespaces etc). discussed later paragraph.\nbrackets: [adgk] means ‘’ ‘d’ ‘g’ ‘k’.Use hyphen create series: [3-9] means digits 3 9 [-zA-Z] means alphabet characters.Negate using ^. [^adgk] means anything , d, g k.special case dot .: character matches.Many special character classes exist (digits, whitespaces etc). discussed later paragraph.alternatives - defined pipe symbol |: “”quantifiers - many times preceding block occur. See next paragraph.anchors - ^ means matching start string. $ means end.excellent cheat sheet RStudio website also included\n","code":""},{"path":"regex.html","id":"quantifiers","chapter":"11 Text processing with regex","heading":"Quantifiers","text":"Use quantifiers specify many times character series characters occur.{n}: exactly n times{n, }: least n times{ ,n}: n times{n, m}: least n m times.*: 0 times; {0, }+: 1 times; {1, }?: 0 1 time; {0, 1}","code":""},{"path":"regex.html","id":"anchoring","chapter":"11 Text processing with regex","heading":"Anchoring","text":"Using anchoring, can make sure string longer explicitly state:Now date matching correct.","code":"\ndates <- c(\"15/2/2019\", \"15-2-2019\", \"15-02-2019\", \"015/2/20191\", \"15/2/20191\")\ndateRegex <- \"^[0-9]{2}[/-][0-9]{1,2}[/-][0-9]{4}$\"\ngrep(pattern = dateRegex, x = dates, value = TRUE)## [1] \"15/2/2019\"  \"15-2-2019\"  \"15-02-2019\""},{"path":"regex.html","id":"metacharacters-special-character-classes","chapter":"11 Text processing with regex","heading":"Metacharacters: Special character classes","text":"Since patterns [0-9] occur frequently, dedicated character classes [[:digit:]]. important ones aredigits [[:digit:]] \\\\d: equivalent [0-9]alphabet characters [[:alpha:]]: equivalent [-zA-Z]lowercase characters [[:lower:]]: equivalent [-z]uppercase characters [[:upper:]]: equivalent [-Z]whitespace characters [[:space:]] \\\\s: Space, tab, vertical tab, newline, form feed, carriage returnpunctuation characters [[:punct:]]: One !“#$%&’()*+,-./:;<=>?@[]^_`{|}~(look cheat sheet )example, time using predefined character classes","code":"\ndates <- c(\"15/2/2019\", \"15-2-2019\", \"15-02-2019\", \"15022019\", \"15/2/20191\")\ndateRegex <- \"[[:digit:]]{2}[/-]\\\\d{1,2}[/-]\\\\d{4}\"\ngrep(pattern = dateRegex, x = dates, value = TRUE)## [1] \"15/2/2019\"  \"15-2-2019\"  \"15-02-2019\" \"15/2/20191\""},{"path":"regex.html","id":"alternatives","chapter":"11 Text processing with regex","heading":"Alternatives","text":"apply two alternative choices single regex element use pipe symbol |. can us parentheses (foo[]) fence alternatives .","code":"\ncolumn_names <- c(\"Subject\", \"Age\", \"T0_creatine\", \"T0_calcium\", \"T1_creatine\", \"T1_calcium\") \ngrep(pattern = \"T[01]_(creatine|calcium)\", x = column_names, value = TRUE)## [1] \"T0_creatine\" \"T0_calcium\"  \"T1_creatine\" \"T1_calcium\""},{"path":"regex.html","id":"some-examples","chapter":"11 Text processing with regex","heading":"11.1.3 Some examples","text":"","code":""},{"path":"regex.html","id":"restriction-enzymes","chapter":"11 Text processing with regex","heading":"Restriction enzymes","text":"recognition sequence HincII restriction endonuclease:reading : define regular expression precisely describes recognition sequence?Molecular biology sequence ambiguity codes can found\n","code":"5'-GTYRAC-3'\n3'-CARYTG-5'\nHincII_rs <- \"GT[CT][AG]AC\"\nsequences <- c(\"GTCAAC\",\n               \"GTCGAC\",\n               \"GTTGAC\",\n               \"aGTTAACa\",\n               \"GTGCAC\")\ngrep(pattern = HincII_rs, x = sequences, value = TRUE)## [1] \"GTCAAC\"   \"GTCGAC\"   \"GTTGAC\"   \"aGTTAACa\""},{"path":"regex.html","id":"dutch-dates","chapter":"11 Text processing with regex","heading":"Dutch dates","text":"Dutch dates, different accepted formats. last two correct notation.\nCreate RegEx determine whether element contains Dutch date string.last two matched?\npattern , albeit embedded longer string.\nanchor pattern specific.","code":"\ndates <- c(\"15/2/2019\", \"15-2-2019\", \"15-02-2019\", \"015/2/20191\", \"15/2/20191\")\ndateRegex <- \"[0-9]{2}[/-][0-9]{1,2}[/-][0-9]{4}\"\ngrep(pattern = dateRegex, x = dates, value = TRUE)## [1] \"15/2/2019\"   \"15-2-2019\"   \"15-02-2019\"  \"015/2/20191\" \"15/2/20191\""},{"path":"regex.html","id":"exercise-postal-codes","chapter":"11 Text processing with regex","heading":"Exercise: Postal codes","text":"Dutch zip (postal) codes, different accepted formats. last two correct notation.\nCan create RegEx determine whether element contains Dutch zip code?","code":"\nzips <- c(\"1234 AA\", \"2345-BB\", \"3456CC\", \"4567 dd\", \"56789aa\", \"6789a_\")\nzips## [1] \"1234 AA\" \"2345-BB\" \"3456CC\"  \"4567 dd\" \"56789aa\" \"6789a_\""},{"path":"regex.html","id":"exercise-prosite-patterns","chapter":"11 Text processing with regex","heading":"Exercise: Prosite patterns","text":"Prosite database amino acid sequence motifs. One Histidine Triad profile (PDOC00694).Write RegExWas efficient? Using gsub() function, can convert RegEx using code? may take several iterations. efficient?Next, use appropriate function find , , pattern located within sequences file data/hit_proteins.txt ()Amino Acid codes Prosite pattern encoding can found\n","code":"[NQAR]-x(4)-[GSAVY]-x-[QFLPA]-x-[LIVMY]-x-[HWYRQ]-\n[LIVMFYST]-H-[LIVMFT]-H-[LIVMF]-[LIVMFPT]-[PSGAWN]"},{"path":"regex.html","id":"the-stringr-package","chapter":"11 Text processing with regex","heading":"11.2 The stringr package","text":"last presentation tidyverse series. revolves around processing textual data: finding, extracting, replacing patterns. Central task pattern matching using regular expressions. Pattern matching process finding, locating, extracting replacing patterns character data usually literally described. Regular expression syntax language patterns described wide range programming languages, including R.topic dealt introductory manner previously (course DAVuR1). repeated expanded . Instead base R functions now switch stringr package.packages tidyverse, stringr many many functions (type help(package = \"stringr\") see ). package great cheat sheet well., reviewed.","code":""},{"path":"regex.html","id":"a-few-remarks-on-locale","chapter":"11 Text processing with regex","heading":"11.2.1 A few remarks on “locale”","text":"Many functions tidyverse packages related time text (currency) accept arguments specifying locale.\nlocale container location-specific display information.\nThinkCharacter set languageTime zone, Daylight savings timeThousands separator decimal symbolCurrency symbolDealing locales big challenge indeed programming language. However, since introductory course stick US English work current locale times .\nnote make aware concept remember appropriate time comes.","code":""},{"path":"regex.html","id":"the-stringr-essentials","chapter":"11 Text processing with regex","heading":"11.2.2 The stringr essentials","text":"","code":""},{"path":"regex.html","id":"case-conversion","chapter":"11 Text processing with regex","heading":"Case conversion","text":"functions change capitalization () word characters input string. ignore non-word characters punctuation symbols.str_to_upper() converts word characters uppercasestr_to_lower() converts word characters lowercasestr_to_title() capitalizes first characters wordsstr_to_sentence() capitalizes first character string, every period","code":"\nsntc <- \"the path of the righteous man is beset on all sides by the iniquities of the selfish,  and the tyranny of evil men. --quote from?\"\n\nstr_to_title(sntc)## [1] \"The Path Of The Righteous Man Is Beset On All Sides By The Iniquities Of The Selfish,  And The Tyranny Of Evil Men. --Quote From?\"\nstr_to_sentence(sntc)## [1] \"The path of the righteous man is beset on all sides by the iniquities of the selfish,  and the tyranny of evil men. --quote from?\""},{"path":"regex.html","id":"split-join-and-substring","chapter":"11 Text processing with regex","heading":"Split, join and substring","text":"Combining two vectors one, one vector one, reverse: splitting. string-based operation carried scripting quite often.joining operations, using str_c():want combine variables text str_glue() comes handy:friendly approach paste().Splitting slightly tricky since accepts regex pattern split argument. instance, can get words sentence splitting like :two ways get parts character strings, substrings. first index. can omit start end arguments; default start end string, respectively.can even use function change substring removedThis work literals! following chunk gives error:","code":"\nl1 <- letters[1:5]\nl2 <- letters[6:10]\n\nstr_c(l1, collapse = \"=\")## [1] \"a=b=c=d=e\"\nstr_c(l1, l2, sep = \"+\")## [1] \"a+f\" \"b+g\" \"c+h\" \"d+i\" \"e+j\"\nstr_c(l1, l2, sep = \"+\", collapse = \"=\")## [1] \"a+f=b+g=c+h=d+i=e+j\"\nstr_glue(\"The value of pi is {pi} and the first month of the year is {month.name[1]}\")## The value of pi is 3.14159265358979 and the first month of the year is January\nwords <- str_split(sntc, \"([[:punct:]]|[[:space:]])+\")\nwords\n##alternative\n#str_split(sntc, \"[^a-zA-Z]+\")## [[1]]\n##  [1] \"the\"        \"path\"       \"of\"         \"the\"        \"righteous\" \n##  [6] \"man\"        \"is\"         \"beset\"      \"on\"         \"all\"       \n## [11] \"sides\"      \"by\"         \"the\"        \"iniquities\" \"of\"        \n## [16] \"the\"        \"selfish\"    \"and\"        \"the\"        \"tyranny\"   \n## [21] \"of\"         \"evil\"       \"men\"        \"quote\"      \"from\"      \n## [26] \"\"\nnucs <- c(\"Adenine\", \"Guanine\", \"Cytosine\", \"Thymine\")\nstr_sub(nucs, end = 3)## [1] \"Ade\" \"Gua\" \"Cyt\" \"Thy\"\nstr_sub(nucs, start = 4) <- \"......\"\nnucs## [1] \"Ade......\" \"Gua......\" \"Cyt......\" \"Thy......\"\nstr_sub(c(\"Adenine\", \"Guanine\", \"Cytosine\", \"Thymine\"), start = 4) <- \"......\"## Error in str_sub(c(\"Adenine\", \"Guanine\", \"Cytosine\", \"Thymine\"), start = 4) <- \"......\": target of assignment expands to non-language object"},{"path":"regex.html","id":"matching","chapter":"11 Text processing with regex","heading":"Matching","text":"match pattern string, usually want know , elements , located elements often present. question dedicated function:str_detect(string, pattern) detects presence pattern match string.\n\nstr_detect(fruits, \"[Aa]\")\n## [1]  TRUE  TRUE  TRUE FALSEstr_detect(string, pattern) detects presence pattern match string.str_subset(string, pattern) returns strings contain pattern match\n\nstr_subset(fruits, \"[Aa]\")\n## [1] \"Banana\" \"Apple\"  \"Orange\"str_subset(string, pattern) returns strings contain pattern matchstr_which(string, pattern) finds indexes strings contain pattern match.\n\nstr_which(fruits, \"[Aa]\")\n## [1] 1 2 3str_which(string, pattern) finds indexes strings contain pattern match.str_count(string, pattern) counts number matches string.\n\nstr_count(fruits, \"[Aa]\")\n## [1] 3 1 1 0str_count(string, pattern) counts number matches string.str_locate(string, pattern) str_locate_all(string, pattern) locate positions pattern matches string\n\nstr_locate_all(fruits, \"[Aa]\")\n## [[1]]\n##      start end\n## [1,]     2   2\n## [2,]     4   4\n## [3,]     6   6\n## \n## [[2]]\n##      start end\n## [1,]     1   1\n## \n## [[3]]\n##      start end\n## [1,]     3   3\n## \n## [[4]]\n##      start endstr_locate(string, pattern) str_locate_all(string, pattern) locate positions pattern matches string","code":"\nstr_detect(fruits, \"[Aa]\")## [1]  TRUE  TRUE  TRUE FALSE\nstr_subset(fruits, \"[Aa]\")## [1] \"Banana\" \"Apple\"  \"Orange\"\nstr_which(fruits, \"[Aa]\")## [1] 1 2 3\nstr_count(fruits, \"[Aa]\")## [1] 3 1 1 0\nstr_locate_all(fruits, \"[Aa]\")## [[1]]\n##      start end\n## [1,]     2   2\n## [2,]     4   4\n## [3,]     6   6\n## \n## [[2]]\n##      start end\n## [1,]     1   1\n## \n## [[3]]\n##      start end\n## [1,]     3   3\n## \n## [[4]]\n##      start end"},{"path":"regex.html","id":"extracting-and-replacing","chapter":"11 Text processing with regex","heading":"Extracting and replacing","text":"want obtain character sequences matching pattern can use str_extract() str_extract_all() functions:Finally, replacing occurrences pattern carried using str_replace() str_replace_all().","code":"\nstr_extract_all(fruits, \"an\")## [[1]]\n## [1] \"an\" \"an\"\n## \n## [[2]]\n## character(0)\n## \n## [[3]]\n## [1] \"an\"\n## \n## [[4]]\n## character(0)\nstr_replace_all(fruits, \"an\", \"..\")## [1] \"B....a\" \"Apple\"  \"Or..ge\" \"Cherry\""},{"path":"ggplot2-adv.html","id":"ggplot2-adv","chapter":"12 Package ggplot2 revisited","heading":"12 Package ggplot2 revisited","text":"chapter deals advanced aspects plotting ggplot.","code":""},{"path":"ggplot2-adv.html","id":"dedicated-plots","chapter":"12 Package ggplot2 revisited","heading":"12.1 Dedicated plots","text":"","code":""},{"path":"ggplot2-adv.html","id":"binning-geoms-for-too-many-points","chapter":"12 Package ggplot2 revisited","heading":"12.1.1 Binning geoms for too many points","text":"Sometimes simply many data points scatter plot intelligible, even minimum point size maximum transparency. case need binning points, form data reduction.instance, work:cases binning comes handy. several available:geom_hex(): hexagonal heatmapgeom_bin_2d(): rectangular heatmapgeom_density_2d() geom_density_2d_filled(): two-dimensional densityHere geom_hex() example custom color scale:","code":"\nsize <- 10000\nsim_data <- tibble(x = rnorm(size, 100, 10), \n                   y = x + rnorm(x, mean = 5, 5))\nggplot(data = sim_data, mapping = aes(x, y)) +\n    geom_point() +\n    theme_classic()\nggplot(data = sim_data, mapping = aes(x, y)) +\n    geom_hex() +\n    scale_fill_gradient(low = \"white\", high = \"red\") +\n    theme_classic()"},{"path":"ggplot2-adv.html","id":"multiple-y-axis-values-for-a-single-x-axis-value","chapter":"12 Package ggplot2 revisited","heading":"12.1.2 Multiple y-axis values for a single x-axis value","text":"multiple measurements single x-axis point already several options available :\nSince growth data caried log2-transformation weight variable\n- geom_line(): Multiple lines; tend get cluttered really quick\n- geom_point() geom_jitter(): Tend lead away observing patternsgeom_boxplot(): Multiple boxplots already better also get cluttered.\n- geom_violin(): Multiple violin plots; sufficient data presentgeom_errorbar() related (geom_linerange(), geom_crossbar() geom_pointrange()): Sometimes best solution focus data patterns. , added shift x-axis (Time) order prevent points error bars overlap.","code":"\nggplot(data = ChickWeight,\n       mapping = aes(x = Time, y = weight, color = Diet)) +\n    geom_line(aes(group=Chick)) +\n    scale_y_log10() +\n    theme_classic()\nggplot(data = ChickWeight,\n       mapping = aes(x = Time, y = weight, color = Diet)) +\n    geom_point() +\n    scale_y_log10() +\n    theme_classic()\nggplot(data = ChickWeight,\n       mapping = aes(x = factor(Time), y = weight, fill = Diet)) +\n    geom_boxplot() +\n    scale_y_log10() +\n    theme_classic()\nggplot(data = ChickWeight,\n       mapping = aes(x = factor(Time), y = weight, fill = Diet)) +\n    geom_violin() +\n    scale_y_log10() +\n    theme_classic()\nChickWeight %>%\n    group_by(Diet, Time) %>%\n    summarize(mean = mean(weight), \n              min = min(weight),\n              max = max(weight), \n              .groups = \"drop\") %>%\n    mutate(Time = Time + 0.20 * as.numeric(Diet)) %>% # shift to prevent overlap\n    ggplot(mapping = aes(x = Time, y = mean, color = Diet)) +\n        geom_point(size = 2) +\n        geom_errorbar(aes(ymin = min, ymax = max), width = 0.2, linewidth = 0.3) + \n        scale_y_log10() +\n        theme_classic()"},{"path":"ggplot2-adv.html","id":"multivariate-categorical-data","chapter":"12 Package ggplot2 revisited","heading":"12.1.3 Multivariate Categorical Data","text":"Visualizing multivariate categorical data requires another approach. Scatter- line plots histograms unsuitable factor data. plotting examples work well categorical data. Copied adapted STHDA site.first example deals builtin dataset HairEyeColor. contingency table table object must converted dataframe use.","code":"\nhair_eye_col_df <- as.data.frame(HairEyeColor)\nhead(hair_eye_col_df)##    Hair   Eye  Sex Freq\n## 1 Black Brown Male   32\n## 2 Brown Brown Male   53\n## 3   Red Brown Male   10\n## 4 Blond Brown Male    3\n## 5 Black  Blue Male   11\n## 6 Brown  Blue Male   50"},{"path":"ggplot2-adv.html","id":"bar-plots-of-contingency-tables","chapter":"12 Package ggplot2 revisited","heading":"Bar plots of contingency tables","text":"","code":"\nggplot(hair_eye_col_df, aes(x = Hair, y = Freq)) +\n    geom_bar(aes(fill = Eye), \n           stat = \"identity\", \n           color = \"white\",\n           position = position_dodge(0.7)) + #causes overlapping bars\n    facet_wrap(~ Sex) "},{"path":"ggplot2-adv.html","id":"balloon-plot","chapter":"12 Package ggplot2 revisited","heading":"Balloon plot","text":"dataset called housetasks contains data tasks within household.balloon plot excellent way visualize kind data. function ggballoonplot() part ggpubr package (“‘ggplot2’ Based Publication Ready Plots”). look page nice review possibilities.can see counts map size color.\nBalloon plots can also faceted.","code":"\n(housetasks <- read.delim(\n  system.file(\"demo-data/housetasks.txt\", package = \"ggpubr\"),\n  row.names = 1))##            Wife Alternating Husband Jointly\n## Laundry     156          14       2       4\n## Main_meal   124          20       5       4\n## Dinner       77          11       7      13\n## Breakfeast   82          36      15       7\n## Tidying      53          11       1      57\n## Dishes       32          24       4      53\n## Shopping     33          23       9      55\n## Official     12          46      23      15\n## Driving      10          51      75       3\n## Finances     13          13      21      66\n## Insurance     8           1      53      77\n## Repairs       0           3     160       2\n## Holidays      0           1       6     153\nggpubr::ggballoonplot(housetasks, fill = \"value\")\nggpubr::ggballoonplot(hair_eye_col_df, x = \"Hair\", y = \"Eye\", size = \"Freq\",\n              fill = \"Freq\", facet.by = \"Sex\",\n              ggtheme = theme_bw()) +\n  scale_fill_viridis_c(option = \"C\")"},{"path":"ggplot2-adv.html","id":"the-corrplotcorrplot-function","chapter":"12 Package ggplot2 revisited","heading":"12.1.4 The corrplot::corrplot() function","text":"R package corrplot provides visualization interface correlation matrices. many parameters. simple example airquality datasetLook docs details.","code":"\nlibrary(corrplot)## corrplot 0.92 loaded\nM = cor(na.omit(airquality[, 1:4]))\ncorrplot(M,  order = 'AOE', type = 'lower')"},{"path":"ggplot2-adv.html","id":"the-ggallyggpairs-function","chapter":"12 Package ggplot2 revisited","heading":"12.1.5 The GGally::ggPairs() function","text":"ggpairs() function GGally package allows build scatterplot matrix just like base R pairs() function.Scatterplots pair numeric variable drawn left part figure. Pearson correlation displayed right. Variable distribution available diagonal.Look https://www.r-graph-gallery.com/199-correlation-matrix--ggally.html examples.","code":"\nairquality_no_na <- na.omit(airquality)\nGGally::ggpairs(airquality_no_na[1:4], progress = FALSE)"},{"path":"ggplot2-adv.html","id":"marginal-plots-using-ggextraggmarginal","chapter":"12 Package ggplot2 revisited","heading":"12.1.6 Marginal plots using ggExtra::ggMarginal()","text":"can use ggMarginal() add marginal distributions X Y axis ggplot2 scatterplot.\ncan done using histogram, boxplot density plot using ggExtra packageSee https://www.r-graph-gallery.com/277-marginal-histogram--ggplot2.html details.","code":"\nlibrary(ggExtra)\nairquality <- airquality %>% \n    mutate(Month_f = factor(month.abb[Month]))\n\n# base plot\np <- ggplot(airquality, aes(x=Temp, y=Ozone, color=Month_f)) +\n      geom_point() +\n      theme(legend.position=\"none\")\n\np1 <- ggMarginal(p, type=\"histogram\")\np2 <- ggMarginal(p, type=\"density\")\np3 <- ggMarginal(p, type=\"boxplot\")\n\ngridExtra::grid.arrange(p1, p2, p3, nrow = 1)"},{"path":"ggplot2-adv.html","id":"advanced-plotting-aspects","chapter":"12 Package ggplot2 revisited","heading":"12.2 Advanced plotting aspects","text":"","code":""},{"path":"ggplot2-adv.html","id":"secondary-y-axis","chapter":"12 Package ggplot2 revisited","heading":"12.2.1 Secondary y-axis","text":"Adding second y-axis series surprisingle non-intuitive ggplot. minimal example found R Graph Gallery:","code":"\n# Build dummy data\ndata <- data.frame(\n  day = as.Date(\"2023-01-01\") + 0:99,\n  temperature = runif(100) + seq(1,100)^2.5 / 10000,\n  price = runif(100) + seq(100,1)^1.5 / 10\n)\n\n# Value used to transform the data of the second axis\ncoeff <- 10\n\ntemp_color <- \"#69b3a2\"\nprice_color <- \"deepskyblue3\"\nggplot(data = data, mapping = aes(x=day)) +\n  geom_line(mapping = aes(y = temperature), linewidth = 2, color = temp_color) + \n  geom_line(mapping = aes(y=price / coeff), linewidth = 2, color = price_color) +\n  scale_y_continuous(\n    # Features of the first axis\n    name = \"Temperature (Celsius °)\",\n    # Add a second axis and specify its features\n    sec.axis = sec_axis(~ . * coeff, name = \"Price ($)\")\n  ) +\n  theme_classic() +\n  theme(\n    axis.title.y = element_text(color = temp_color, size=13),\n    axis.title.y.right = element_text(color = price_color, size=13)\n  )"},{"path":"ggplot2-adv.html","id":"plot-panels-from-for-loops-using-gridextragrid.arrange","chapter":"12 Package ggplot2 revisited","heading":"12.2.2 Plot panels from for loops using gridExtra::grid.arrange()","text":"Sometimes may wish create panel plots using loop, similarly use par(mfrow = c(rows, cols)) base R. caveats seemingly simple notion.instance, create set boxplots columns airquality dataset, something like base R:naively migrate structure ggplot setting, become something like .surely plot expected: single straight line, panel plots. turns can use variables selectors aes().\nrecently, needed use aes_string() purpose; see (evaluated):However, since ggplot2 version 3.0.0. need use different technique.\ncan using !! operator variable call sym(). unquote evaluate variable surrounding environment.recent version.Also note omit print(plt) call outputs nothing, really quite confusing. need explicitely print plot, implicitly normally can.works required except panel--plots part. mfrow option par() work ggplot2. can fixed use gridExtra package.rules usage -loop create panel plots:use aes_string() specify columnsstore plots listuse grid.arrange() create panel, wrapped .call() function.","code":"\n# set the number of rows and columns\npar(mfrow = c(2, 2))\n\n# iterate the column names\nfor (n in names(airquality[, 1:4])) {\n    boxplot(airquality[, n], \n            xlab = n)\n}\n# reset par\npar(mfrow = c(1, 1))\npar(mfrow = c(2, 2))\n\nfor (n in names(airquality[, 1:4])) {\n    plt <- ggplot(data = airquality,\n                  mapping = aes(y = n)) +\n        geom_boxplot() +\n        xlab(n)\n    print(plt)\n}\npar(mfrow = c(1, 1))\npar(mfrow = c(2, 2))\n\nfor (name in names(airquality[, 1:4])) {\n    plt <- ggplot(data = na.omit(airquality),\n                  mapping = aes_string(x = factor(\"\"), y = name)) +\n        geom_boxplot() +\n        xlab(NULL) +\n        xlab(name)\n    print(plt)\n}\n\npar(mfrow = c(1, 1))\npar(mfrow = c(2, 2))\n\nfor (name in names(airquality[, 1:4])) {\n    plt <- ggplot(data = na.omit(airquality),\n                  mapping = aes(x = factor(\"\"), y = !!sym(name))) +\n        geom_boxplot() +\n        xlab(NULL) +\n        xlab(name)\n    print(plt)\n}\npar(mfrow = c(1, 1))\nlibrary(gridExtra)\n\n# a list to store the plots\nmy_plots <- list()\n\n#use of indices instead of names is important!\nfor (i in 1:4) {\n    n <- names(airquality)[i]\n    plt <- ggplot(data = airquality_no_na,\n                  mapping = aes(y = !!sym(n))) +\n        geom_boxplot() +\n        xlab(n)\n    my_plots[[i]] <- plt   # has to be integer, not name!\n}\ngrid.arrange(grobs = my_plots, nrow = 2)\n#OR: use do.call() to process the list in grid.arrange\n#do.call(grid.arrange, c(my_plots, nrow = 2))"},{"path":"ggplot2-adv.html","id":"plot-adjustments","chapter":"12 Package ggplot2 revisited","heading":"12.2.3 Plot adjustments","text":"section describes aspects fall outside standard realm plot construction.","code":""},{"path":"ggplot2-adv.html","id":"scales-coordinates-and-annotations","chapter":"12 Package ggplot2 revisited","heading":"Scales, Coordinates and Annotations","text":"Scales Coordinates used adjust way data mapped displayed. , log10 scale applied y axis using scale_y_log10() x axis reversed (high low values instead low high) using scale_x_reverse().contexts, geographic information analysis, scale extremely important.\ndefault coordinate system ggplot2 coord_cartesian(). plot , different coordinate system used.","code":"\nggplot(data = cars, mapping = aes(x = speed, y = dist)) + \n    geom_point() +\n    scale_y_log10() + \n    scale_x_reverse() \n# function to compute standard error of mean\nse <- function(x) sqrt(var(x)/length(x)) \n\nDF <- data.frame(variable = as.factor(1:10), value = log2(2:11))\n\nggplot(DF, aes(variable, value, fill = variable)) +\n    geom_bar(width = 1, stat = \"identity\", color = \"white\") +\n    geom_errorbar(aes(ymin = value - se(value), \n                      ymax = value + se(value), \n                      color = variable), \n                      width = .2) + \n    scale_y_continuous(breaks = 0:nlevels(DF$variable)) +\n    coord_polar() "},{"path":"ggplot2-adv.html","id":"labels","chapter":"12 Package ggplot2 revisited","heading":"Labels","text":"seen xlab(), ylab(), labs() functions work already.","code":""},{"path":"ggplot2-adv.html","id":"themes","chapter":"12 Package ggplot2 revisited","heading":"Themes","text":"theme used make changes overall appearance plot. Two approaches exist. simplest one selecting specific theme make minor adjustments .\nminimal theme text sizes modified somewhat.Note color = Month_f aesthetic put main ggplot call, smoother split Month groups.Alternatively, theme can specified completely, show .can see, element_text(), element_line() element_rect() functions specify types plot elements. element_blank() function can used various theme aspects prevent displayed.","code":"\nggplot(data = airquality, mapping=aes(x=Temp, y=Ozone)) +\n  geom_point(mapping = aes(color = Month_f)) + \n  geom_smooth(method = \"loess\", formula = y ~ x) +\n  xlab(expression(\"Temperature \" (degree~F))) +\n  ylab(\"Ozone (ppb)\") +\n  labs(color = \"Month\") +\n  theme_minimal(base_size = 14)## Warning: Removed 37 rows containing non-finite values (`stat_smooth()`).## Warning: Removed 37 rows containing missing values (`geom_point()`).\nggplot(data = na.omit(airquality), mapping = aes(x = Temp, y = Ozone)) +\n  geom_point(mapping = aes(color = Month_f)) + \n  geom_smooth(method = \"loess\") +\n  xlab(\"Temperature (F)\") +\n  ylab(\"Ozone (ppb)\") +\n  labs(color = \"Month\") +\n  theme(axis.text.x = element_text(size = 12, colour = \"blue\", face = \"bold\"),\n        axis.text.y = element_text(size = 12, colour = \"red\", face = \"bold\"),\n        axis.title.x = element_text(size = 16, colour = \"blue\", face = \"bold.italic\"),\n        axis.title.y = element_text(size = 14, colour = \"red\", face = \"bold.italic\"),\n        axis.line = element_line(colour = \"darkblue\", size = 1, linetype = \"solid\"),\n        panel.background = element_rect(fill = \"lightblue\", size = 0.5, linetype = \"solid\"),\n        panel.grid.minor = element_blank())## Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n## ℹ Please use the `linewidth` argument instead.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.## Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n## ℹ Please use the `linewidth` argument instead.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.## `geom_smooth()` using formula = 'y ~ x'"},{"path":"ggplot2-adv.html","id":"adjust-or-set-global-theme","chapter":"12 Package ggplot2 revisited","heading":"Adjust or set global theme","text":"can specify within document R session certain theme used throughout. can using theme_set(), theme_update() theme_replace() functions, esoteric %+replace% operator. Type ?theme_set find .","code":""},{"path":"ggplot2-adv.html","id":"annotation","chapter":"12 Package ggplot2 revisited","heading":"Annotation","text":"final layer can added one containing annotations. Annotations elements added manually plot. can text label, fictitious data point, shaded box arrow indicating region interest.annotate() method, specify geom wish add (e.g. “text”, “point”)\npanel demonstrates .Note geom_rectangle() well, discovered much sorrow, behaves quite unexpectedly using alpha = argument fill color. annotation purposes always use annotate() function.","code":"\n(outlier <- airquality[!is.na(airquality$Ozone) & airquality$Ozone > 150, ])##     Ozone Solar.R Wind Temp  Month Day bar Temp_factor Month_f\n## 117   168     238  3.4   81 August  25   1        high     Apr\nggplot(data = na.omit(airquality), mapping = aes(x = Temp, y = Ozone)) +\n  annotate(\"rect\", xmin = 72, xmax = 77, ymin = 0, ymax = 50, \n           alpha = 0.1, color = \"blue\", fill = \"blue\") +\n  annotate(\"point\", x = outlier$Temp, y = outlier$Ozone, \n           color = \"darkred\", size = 4, alpha = 0.3) + \n  geom_point(mapping = aes(color = Month_f)) + \n  geom_smooth(method = \"loess\", formula = y ~ x) +\n  xlab(\"Temperature (F)\") +\n  ylab(\"Ozone (ppb)\") + \n  annotate(\"text\", x = outlier$Temp, y = outlier$Ozone -5, label = \"Outlier\") + \n  annotate(\"segment\", x = outlier$Temp + 5, xend = outlier$Temp + 1, \n           y = outlier$Ozone + 4, yend = outlier$Ozone, \n           color = \"darkred\", size = 2, arrow = arrow()) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."},{"path":"ggplot2-adv.html","id":"developing-a-custom-visualization","chapter":"12 Package ggplot2 revisited","heading":"12.3 Developing a custom visualization","text":"","code":""},{"path":"ggplot2-adv.html","id":"an-experimental-ptsd-treatment","chapter":"12 Package ggplot2 revisited","heading":"12.3.1 An experimental PTSD treatment","text":"chapter shows iterative process building visualization audience data story taken consideration.story revolves around data collected research effort investigating effect treatment subjects PTSD (Post-traumatic stress disorder). one variable dataset shown , stress score.Since group size low, control group, statistical analysis really feasible.question : indication positive effect reason continue investigations?\nattempt made developing visualization answer question.","code":""},{"path":"ggplot2-adv.html","id":"the-data","chapter":"12 Package ggplot2 revisited","heading":"The data","text":"collected data distress score collected three time points: 0 months (null measure, T0), 3 months (T1) 12 months (T2) questionnaires.\nTable 12.1: Distress data\ncan see really small dataset.","code":""},{"path":"ggplot2-adv.html","id":"choose-a-visualization","chapter":"12 Package ggplot2 revisited","heading":"Choose a visualization","text":"starting visualization, several aspects considered:audience:\npeople want read lots numbers table\ncase knowledge statistics (usually case)\npeople want read lots numbers tablein case knowledge statistics (usually case)data:\n, small sample size issue\ndataset connected measurements (timeseries-like)\n, small sample size issuethis dataset connected measurements (timeseries-like)dataset chose jitterplot basis well suited small samples. boxplot tends indicative information simply small datasets. Moreover, boxplot certain complexity people schooled statistics problems .","code":""},{"path":"ggplot2-adv.html","id":"tidy-the-data-1","chapter":"12 Package ggplot2 revisited","heading":"Tidy the data","text":"work ggplot2, tidy (“long”) version data required.\nnext chapter dealt detail.\nT0, T1 T2 columns gathered single column actually represent single variable: Time. measured stress values, also single variable, gathered single column well. causes flattening data (less columns, rows).\nTable 12.2: Tidied data\n","code":"\ndistress_data_tidy <- pivot_longer(data = distress_data,\n                                   cols = c(T0, T1, T2),\n                                   names_to = \"Timepoint\",\n                                   values_to = \"Stress\")\n\ndistress_data_tidy$Timepoint <- factor(distress_data_tidy$Timepoint, ordered = T)\nknitr::kable(head(distress_data_tidy, n = 10), caption = \"Tidied data\")"},{"path":"ggplot2-adv.html","id":"a-first-version","chapter":"12 Package ggplot2 revisited","heading":"A first version","text":"first version visualization. jitter created geom_jitter. plot symbols made transparent keep overlapping points visible. plot symbols made bigger support embedding (PowerPoint) presentations. little horizontal jitter introduced less overlap symbols, much - discrete time points still stand well. Vertical jitter omitted since data already measured continuous scale. typical use case vertical jitter discrete () y-axis measurements.\nFigure 12.1: first attempt\n","code":"\nggplot(distress_data_tidy, aes(x=Timepoint, y=Stress)) +\n    geom_jitter(width = 0.1, size = 2, alpha = 0.6)"},{"path":"ggplot2-adv.html","id":"add-mean-and-sd","chapter":"12 Package ggplot2 revisited","heading":"Add mean and SD","text":"emphasize trend timeseries, means standard deviations mean added using stat_summary(). Always aware orders layers plot! , stat_summary placed “” plot symbols. , size increased enhanced visibility presentations. median? audience! Everybody knows mean , know median - especially management level.\nFigure 12.2: mean standard deviation\n","code":"\nmean_sd <- function(x) {\n  c(y = mean(x), ymin = (mean(x) - sd(x)), ymax = (mean(x) + sd(x)))\n}\n\nggplot(distress_data_tidy, aes(x = Timepoint, y = Stress)) +\n    stat_summary(fun.data = mean_sd, color = \"darkred\", size = 1.5) +\n    geom_jitter(width = 0.1, size = 2, alpha = 0.6)"},{"path":"ggplot2-adv.html","id":"emphasize-worst-cases","chapter":"12 Package ggplot2 revisited","heading":"Emphasize worst cases","text":"emphasize development subjects worst shape onset research (T0), top 25% respect distress score T0 highlighted.color added using aes(color = high_at_T0) within geom_jitter() call.","code":"\ndistress_data$high_at_T0 <- ifelse(distress_data$T0 > quantile(distress_data$T0, 0.75), \"Q4\", \"Q1-Q3\")\n\ndistress_data_tidy <- gather(distress_data,\n                        key=Timepoint,\n                        value=Stress, \"T0\", \"T1\", \"T2\")\ndistress_data_tidy$Timepoint <- factor(distress_data_tidy$Timepoint, ordered = T)\nknitr::kable(head(distress_data))\np <- ggplot(distress_data_tidy, aes(x=Timepoint, y=Stress)) +\n    stat_summary(fun.data=mean_sd, color = \"darkred\", size = 1.5) +\n    geom_jitter(width = 0.1, size = 2, alpha = 0.6, aes(color = high_at_T0))\np"},{"path":"ggplot2-adv.html","id":"last-tweaks-fonts-and-legend","chapter":"12 Package ggplot2 revisited","heading":"12.3.2 Last tweaks: fonts and legend","text":"plot less ready. Now time adjust plot “theme”.","code":"\np + theme_minimal(base_size = 14) +\n    theme(legend.position = \"top\") +\n    labs(color=\"Group\")"},{"path":"ggplot2-adv.html","id":"the-code","chapter":"12 Package ggplot2 revisited","heading":"12.3.3 The code","text":"code used data preparation:final code plot","code":"\ndistress_data$high_at_T0 <- ifelse(\n    distress_data$T0 > quantile(distress_data$T0, 0.75), \"Q4\", \"Q1-Q3\")\n\ndistress_data_tidy <- gather(distress_data,\n                        key=Timepoint,\n                        value=Stress, \"T0\", \"T1\", \"T2\")\ndistress_data_tidy$Timepoint <- factor(distress_data_tidy$Timepoint,\n                                       ordered = T)\n\nmean_sd <- function(x) {\n  c(y = mean(x), ymin=(mean(x)-sd(x)), ymax=(mean(x)+sd(x)))\n}\nggplot(distress_data_tidy, aes(x=Timepoint, y=Stress)) +\n    stat_summary(fun.data=mean_sd, color = \"darkred\", size = 1.5) +\n    geom_jitter(width = 0.1,\n                size = 2,\n                alpha = 0.6,\n                aes(color = high_at_T0)) +\n    labs(color=\"Group\") +\n    theme_minimal(base_size = 14) +\n    theme(legend.position = \"top\") +\n    labs(color=\"Group\")"},{"path":"date-time.html","id":"date-time","chapter":"13 Working with date-time data","heading":"13 Working with date-time data","text":"","code":""},{"path":"date-time.html","id":"the-lubridate-package","chapter":"13 Working with date-time data","heading":"13.1 The lubridate package","text":"","code":""},{"path":"date-time.html","id":"parsing-character-data","chapter":"13 Working with date-time data","heading":"13.1.1 Parsing character data","text":"working lab often encounter time-measured data. instance, growth curves, animal behavior observations etc.tidyverse package lubridate can help . quite expensive package; bare essentials dealt . bit complete overview look cheat sheet.small fictitious dataset used explore concepts. can found file data/time_series_drug_test.txt.simply want show timeseries plot, date time columns need combined first. tidyr package unite(), mutate()can see, original data columns lost operation. Using mutate() paste() keep intact however. take approach want old columns demonstration purposes.Let’s reshuffle. like dependent variable comes last.attempt plot response time subjects get trouble:Also, like calculate something like change per hour response level different measurements difficult indeed. Take minute think . know technique base R ’ve encountered far supports ?\nActually functions baser R can , ’ll stick tidyverse.area lubridate package. included library(lubridate) statement top document ’s needed anymore.Let’s start reading date time variables. many dedicated (wrapper) functions reading date time data. date variable format “Day/Month/Year” function dmy() fine :can see, type changed date. Let’s try plot :Now ’re getting somewhere. times taken account yet, simply mapped 00:00 hours day. Also, ’re really interested specific date, want know change T = 0. ’ll get .Parsing time parsing date, “Hour:Minute” format function take hm() (also hms()):yes, also dmy_hm() function:long format esoteric, lubridate figure separator quite well.want full control -simply want remember one two functions- take either one fast_strptime() parse_date_time(). take format string argument: string specify way date-time character data structured used symbols (although really also look help page):b B Abbreviated full month name current locale. C parser currently understands English month names.d Day month decimal number (01–31 0–31)H Hours decimal number (00–24 0–24).Hours decimal number (01–12 1–12).m Month decimal number (01–12 1–12).M Minute decimal number (00–59 0–59).p /PM indicator locale. Normally used conjunction H.S Second decimal number (00–61 0–61).y Year without century (00–99 0–99). parse_date_time() also matches year century (Y format).Y Year century.Function parse_date_time() lenient two respect format string:fast_strptime() much picky, much faster. specify date(-time) format using% sign together one symbols listed :think sticking first suffice.","code":"\nts <- read.table(\"data/time_series_drug_test.txt\", \n                 header = T,\n                 sep = \";\",\n                 as.is = 2:3)\nts <- as_tibble(ts)\nts## # A tibble: 48 × 5\n##   subject date       time  control response\n##   <fct>   <chr>      <chr> <fct>      <int>\n## 1 S001    29/12/2019 07:44 n              2\n## 2 S001    29/12/2019 12:06 n             68\n## 3 S001    29/12/2019 17:28 n            112\n## 4 S001    29/12/2019 22:01 n             82\n## 5 S001    30/12/2019 07:22 n             63\n## 6 S001    30/12/2019 12:05 n             57\n## # ℹ 42 more rows\nts %>% \n    unite(\"date_time\", date, time, sep = \"T\") %>% \n    head(3)## # A tibble: 3 × 4\n##   subject date_time        control response\n##   <fct>   <chr>            <fct>      <int>\n## 1 S001    29/12/2019T07:44 n              2\n## 2 S001    29/12/2019T12:06 n             68\n## 3 S001    29/12/2019T17:28 n            112\nts <- ts %>% \n    mutate(date_time = paste(date, time, sep=\" \"))\nhead(ts, 3)## # A tibble: 3 × 6\n##   subject date       time  control response date_time       \n##   <fct>   <chr>      <chr> <fct>      <int> <chr>           \n## 1 S001    29/12/2019 07:44 n              2 29/12/2019 07:44\n## 2 S001    29/12/2019 12:06 n             68 29/12/2019 12:06\n## 3 S001    29/12/2019 17:28 n            112 29/12/2019 17:28\nts <- ts %>% select(subject, date, time, date_time, control, response)\nhead(ts, 3)## # A tibble: 3 × 6\n##   subject date       time  date_time        control response\n##   <fct>   <chr>      <chr> <chr>            <fct>      <int>\n## 1 S001    29/12/2019 07:44 29/12/2019 07:44 n              2\n## 2 S001    29/12/2019 12:06 29/12/2019 12:06 n             68\n## 3 S001    29/12/2019 17:28 29/12/2019 17:28 n            112\nggplot(data = ts, \n       mapping = aes(x = date, y = response, linetype = subject)) + \n    geom_line()\nts <- ts %>% \n    mutate(date = dmy(ts$date))\nts %>% head(3)## # A tibble: 3 × 6\n##   subject date       time  date_time        control response\n##   <fct>   <date>     <chr> <chr>            <fct>      <int>\n## 1 S001    2019-12-29 07:44 29/12/2019 07:44 n              2\n## 2 S001    2019-12-29 12:06 29/12/2019 12:06 n             68\n## 3 S001    2019-12-29 17:28 29/12/2019 17:28 n            112\nggplot(data = ts, \n       mapping = aes(x = date, y = response, linetype = subject)) + \n    geom_line()\nhm(ts$time)[1:5]## [1] \"7H 44M 0S\"  \"12H 6M 0S\"  \"17H 28M 0S\" \"22H 1M 0S\"  \"7H 22M 0S\"\ndmy_hm(ts$date_time)[1:5]## [1] \"2019-12-29 07:44:00 UTC\" \"2019-12-29 12:06:00 UTC\"\n## [3] \"2019-12-29 17:28:00 UTC\" \"2019-12-29 22:01:00 UTC\"\n## [5] \"2019-12-30 07:22:00 UTC\"\nparse_date_time(ts$date_time, \"d.m-y H:M\")[1:5] ##doesn't care I have a typo in my format string## [1] \"2019-12-29 07:44:00 UTC\" \"2019-12-29 12:06:00 UTC\"\n## [3] \"2019-12-29 17:28:00 UTC\" \"2019-12-29 22:01:00 UTC\"\n## [5] \"2019-12-30 07:22:00 UTC\"\nts <- ts %>% mutate(date_time = parse_date_time(ts$date_time, \"d/m/y H:M\"))\nhead(ts, 3)## # A tibble: 3 × 6\n##   subject date       time  date_time           control response\n##   <fct>   <date>     <chr> <dttm>              <fct>      <int>\n## 1 S001    2019-12-29 07:44 2019-12-29 07:44:00 n              2\n## 2 S001    2019-12-29 12:06 2019-12-29 12:06:00 n             68\n## 3 S001    2019-12-29 17:28 2019-12-29 17:28:00 n            112\nfast_strptime('29/12/2019 07:44', '%d/%m/%Y %H:%M')## [1] \"2019-12-29 07:44:00 UTC\"\n## When in tibble context, you need to set `lt = F`...\nts %>% \n    mutate(date_time = fast_strptime(date_time, '%d/%m/%Y %H:%M', lt = F))"},{"path":"date-time.html","id":"current-time","chapter":"13 Working with date-time data","heading":"13.1.2 Current time","text":"functions today() now() friends.","code":"\n##output will vary!\npaste(\"the day is \", today())## [1] \"the day is  2023-06-26\"\npaste(\"and to be really exact: \", now())## [1] \"and to be really exact:  2023-06-26 15:39:11\""},{"path":"date-time.html","id":"getting-elements-from-date-time-objects","chapter":"13 Working with date-time data","heading":"13.1.3 Getting elements from date-time objects","text":"date-time object processed, can look individual elements.-- many functions related . look cheat sheet details. -used components:date(x) Date component leaving time .year(x) year.month(x, label, abbr) month. called without argument, get month number (e.g. 2). label = TRUE argument get text (e.g. Feb) abbr = FALSE get full name month (February).day(x) day month.wday(x,label,abbr) day week. Label abbr behaves month().hour(x) hourminute(x) Minutes.second(x) Seconds.week(x) Week year.use case demonstration: days samples taken times series used far?mean response different times day:split control/treatment group well:Finally, let’s close plotAs practice, try generate response plot like subjects 1 3 corrected values based non-treated group.","code":"\nts %>% \n    group_by(day_of_week = wday(date_time, label=T)) %>% \n    summarize(sample_count = n())\n# or, shorter\n#ts %>% group_by(day_of_week = wday(date_time, label=T)) %>% tally()## # A tibble: 2 × 2\n##   day_of_week sample_count\n##   <ord>              <int>\n## 1 Sun                   24\n## 2 Mon                   24\nts %>% \n    group_by(hour_of_day = hour(date_time)) %>% \n    summarize(mean = mean(response))## # A tibble: 4 × 2\n##   hour_of_day  mean\n##         <int> <dbl>\n## 1           7  19.8\n## 2          12  41.5\n## 3          17  68.8\n## 4          22  52\nts %>% \n    group_by(control, hour_of_day = hour(date_time)) %>% \n    summarize(mean = median(response),\n              n = n())## `summarise()` has grouped output by 'control'. You can override using the\n## `.groups` argument.## # A tibble: 8 × 4\n## # Groups:   control [2]\n##   control hour_of_day  mean     n\n##   <fct>         <int> <dbl> <int>\n## 1 n                 7  31       6\n## 2 n                12  60       6\n## 3 n                17  97       6\n## 4 n                22  65.5     6\n## 5 y                 7   6.5     6\n## 6 y                12  20.5     6\n## 7 y                17  42.5     6\n## 8 y                22  34.5     6\nggplot(data = ts, \n       mapping = aes(x = date_time, y = response, color = subject)) + \n    geom_line()"},{"path":"date-time.html","id":"calculations-with-date-time","chapter":"13 Working with date-time data","heading":"13.1.4 Calculations with date-time","text":"example shows basic calculation: difference two date-time objects.can define periods, durations work time intervals. However, outside scope course.\nadvanced time math refer cheat sheet official docs.","code":"\nts %>% \n    group_by(subject) %>%\n    select(subject, date_time) %>% \n    mutate(lagged = lag(date_time), \n           diff = date_time - lagged) ## # A tibble: 48 × 4\n## # Groups:   subject [6]\n##   subject date_time           lagged              diff      \n##   <fct>   <dttm>              <dttm>              <drtn>    \n## 1 S001    2019-12-29 07:44:00 NA                    NA hours\n## 2 S001    2019-12-29 12:06:00 2019-12-29 07:44:00 4.37 hours\n## 3 S001    2019-12-29 17:28:00 2019-12-29 12:06:00 5.37 hours\n## 4 S001    2019-12-29 22:01:00 2019-12-29 17:28:00 4.55 hours\n## 5 S001    2019-12-30 07:22:00 2019-12-29 22:01:00 9.35 hours\n## 6 S001    2019-12-30 12:05:00 2019-12-30 07:22:00 4.72 hours\n## # ℹ 42 more rows"},{"path":"eda-1.html","id":"eda-1","chapter":"14 Exploratory Data Analysis I","heading":"14 Exploratory Data Analysis I","text":"","code":""},{"path":"eda-1.html","id":"introduction-1","chapter":"14 Exploratory Data Analysis I","heading":"14.1 Introduction","text":"chapter introduces concept Exploratory Data Analysis (EDA). purpose EDA analysing dataset goal assessing main characteristics, including quality usability subsequent statistical modelling analysis. Data cleaning transformation strategies explored often already applied. Data summary techniques visualizations used EDA. fixed set activities; dataset poses questions challenges.Datasets often expensive time-consuming collect, therefore usually collected specific goal mind. EDA perform always goal mind: dataset sufficient quality answer scientific questions collected?current EDA first two; one mainly uses base R functionality (except plotting ggplot2 used) next one mainly employs tidyverse functionality.","code":""},{"path":"eda-1.html","id":"eda-outline","chapter":"14 Exploratory Data Analysis I","heading":"EDA outline","text":"EDA therefore may include:Dataset description: collected, data types variables , units physical quantities, missing data encoded, etc.Data summary: number cases, number variables, basic statistical description (.e. mean, median, sd etc.), variable distributions (normal , outliers, missing data, skewed distributions)Visual summaries using boxplots, histograms, density plots.Recoding transformations variables may required get better results (e.g. numeric factor vice versa, log transformation exponential data)Exploration variable relations/covariance. always interesting know correlations variables, especially case dependent variable wish build statistical model later stage analysis.Note EDA results always accompanied text describes results discusses implications . figures well annotated caption legend relevant. EDA publication, usually short introduction, results section discussion. contrast publication usually show code. ensures complete transparency reproducibility.chapter demonstrate short EDA “Yeast dataset” UCI Machine Learning repository.outside scope short analysis delve deeply attribute background information, realize real analysis absolutely critical: without domain knowledge won’t insight identify strange, worrying surprising results.","code":""},{"path":"eda-1.html","id":"eda-of-the-yeast-dataset","chapter":"14 Exploratory Data Analysis I","heading":"14.2 EDA of the Yeast dataset","text":"","code":""},{"path":"eda-1.html","id":"introduction-2","chapter":"14 Exploratory Data Analysis I","heading":"14.2.1 Introduction","text":"data collected UCI Machine Learning website. ensure continued availability files copied personal repository.data accompanied short abstract: “Predicting Cellular Localization Sites Proteins”. data description states 1484 instances, 8 attributes (variables) class label. class label variable wish build model dependent variable.Attribute Information section describes variables:Sequence Name: Accession number SWISS-PROT databasemcg: McGeoch’s method signal sequence recognition.gvh: von Heijne’s method signal sequence recognition.alm: Score ALOM membrane spanning region prediction program.mit: Score discriminant analysis amino acid content N-terminal region (20 residues long) mitochondrial non-mitochondrial proteins.erl: Presence “HDEL” substring (thought act signal retention endoplasmic reticulum lumen). Binary attribute.pox: Peroxisomal targeting signal C-terminus.vac: Score discriminant analysis amino acid content vacuolar extracellular proteins.nuc: Score discriminant analysis nuclear localization signals nuclear non-nuclear proteins.sequence name interesting EDA: interested patterns, individuals. However, anomalous protein EDA possible retrace origin identifier stays dataset.seem two attributes (mcg gvh) measuring property - presence signal sequence N-terminal part protein signalling cellular machinery protein exported.simply put, scoring system perfect attributes (except mcg gvh) unequivocally “assign” protein question cellular location: Cellular external matrix, membrane inserted, mitochondrial, endoplasmic reticulum lumen, peroxisomal, vacuolar nuclear.tenth variable data dependent explanatory variable. yeast.names file describes like :tells different localizations means equally distributed; representation “cytosolic cytoskeletal” “nuclear” huge representation especially endoplasmic reticulum lumen proteins.","code":"Class Distribution. The class is the localization site. Please see Nakai &\n               Kanehisa referenced above for more details.\n  CYT (cytosolic or cytoskeletal)                    463\n  NUC (nuclear)                                      429\n  MIT (mitochondrial)                                244\n  ME3 (membrane protein, no N-terminal signal)       163\n  ME2 (membrane protein, uncleaved signal)            51\n  ME1 (membrane protein, cleaved signal)              44\n  EXC (extracellular)                                 37\n  VAC (vacuolar)                                      30\n  POX (peroxisomal)                                   20\n  ERL (endoplasmic reticulum lumen)                    5"},{"path":"eda-1.html","id":"data-loading-and-prepping","chapter":"14 Exploratory Data Analysis I","heading":"14.2.2 Data loading and prepping","text":"Since going rerun code notebook often going create local copy, load one.data seems loaded correctly , expected since stated original data description, missing data.column names defined data file fixed first. create data frame also holds column descriptions. put data small text file easy loading editing; attribute descriptions copied/pasted text file find/replace converted easy load form, new label column added use plotting. occurrences ' character always corrupt data import R. removed.make info easily accessible, function created can used fetch either description label.","code":"\nfile_name <- \"yeast.data\"\nyeast_data_url <- paste0(\"https://raw.githubusercontent.com/MichielNoback/datasets/master/UCI_yeast_protein_loc/\", file_name)\nyeast_local_location <- paste0(\"./data/\", file_name)\n\n#only download if not present\nif (! file.exists(yeast_local_location)) {\n    download.file(url = yeast_data_url, \n                  destfile = yeast_local_location)\n}\n\nyeast_data <- read.table(file = yeast_local_location,\n                         sep = \",\",\n                         as.is = 1)\nstr(yeast_data)## 'data.frame':    1484 obs. of  10 variables:\n##  $ V1 : chr  \"ADT1_YEAST\" \"ADT2_YEAST\" \"ADT3_YEAST\" \"AAR2_YEAST\" ...\n##  $ V2 : num  0.58 0.43 0.64 0.58 0.42 0.51 0.5 0.48 0.55 0.4 ...\n##  $ V3 : num  0.61 0.67 0.62 0.44 0.44 0.4 0.54 0.45 0.5 0.39 ...\n##  $ V4 : num  0.47 0.48 0.49 0.57 0.48 0.56 0.48 0.59 0.66 0.6 ...\n##  $ V5 : num  0.13 0.27 0.15 0.13 0.54 0.17 0.65 0.2 0.36 0.15 ...\n##  $ V6 : num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...\n##  $ V7 : num  0 0 0 0 0 0.5 0 0 0 0 ...\n##  $ V8 : num  0.48 0.53 0.53 0.54 0.48 0.49 0.53 0.58 0.49 0.58 ...\n##  $ V9 : num  0.22 0.22 0.22 0.22 0.22 0.22 0.22 0.34 0.22 0.3 ...\n##  $ V10: Factor w/ 10 levels \"CYT\",\"ERL\",\"EXC\",..: 7 7 7 8 7 1 7 8 7 1 ...\nattribute_info <- read.table(\"data/yeast_attribute_info.txt\", \n                             sep = \":\",\n                             header = TRUE,\n                             stringsAsFactors = FALSE)\n#attach column names\n(colnames(yeast_data) <- attribute_info$attribute)##  [1] \"accno\" \"mcg\"   \"gvh\"   \"alm\"   \"mit\"   \"erl\"   \"pox\"   \"vac\"   \"nuc\"  \n## [10] \"loc\"\nget_attribute_info <- function(attribute, resource = \"label\") {\n    if (! resource %in% c(\"label\", \"description\")) {\n        stop(paste0(\"type \", resource, \"is not an attribute resource\"))\n    }\n    return(attribute_info[attribute_info$attribute == attribute, resource])\n}\n\n#test it\nget_attribute_info(\"gvh\")\nget_attribute_info(\"accno\", \"description\")## [1] \"VonHeijne signal\"\n## [1] \"Accession number for the SWISS-PROT database\""},{"path":"eda-1.html","id":"data-verification","chapter":"14 Exploratory Data Analysis I","heading":"14.2.3 Data verification","text":"original data description stated 1484 instances 9 attributes + class label present.correct.\nmissing data supposed :Also correct.classes columns also OK data verified found correct.","code":"\ndim(yeast_data)## [1] 1484   10\nsum(complete.cases(yeast_data))## [1] 1484"},{"path":"eda-1.html","id":"attribute-summaries","chapter":"14 Exploratory Data Analysis I","heading":"14.2.4 Attribute summaries","text":"first scan attributes.attributes seem range zero one, except course localization attribute accession number. surprising since attributes probabilities. class distribution corresponds published data.\npox (Peroxisomal) erl ( ER-retention) attributes, seem really strange distribution investigated .numeric attributes single panel. chose histogram boxplot density plot fine-grained boxplot easy interpret.\nFigure 14.1: Distributions numeric variables\n, can seen attributes “ER-retention” “Peroxisomal” pretty much uninformative, problem probably largely caused low abundance proteins classes. Surprisingly enough, “Vacuolar” property also low-abundant, extreme distribution.also striking , although attributes probabilities targeting signals, none (exception two low-abundance ones) show less bi-modal distribution naively expect.","code":"\nsummary(yeast_data)##     accno                mcg            gvh            alm      \n##  Length:1484        Min.   :0.11   Min.   :0.13   Min.   :0.21  \n##  Class :character   1st Qu.:0.41   1st Qu.:0.42   1st Qu.:0.46  \n##  Mode  :character   Median :0.49   Median :0.49   Median :0.51  \n##                     Mean   :0.50   Mean   :0.50   Mean   :0.50  \n##                     3rd Qu.:0.58   3rd Qu.:0.57   3rd Qu.:0.55  \n##                     Max.   :1.00   Max.   :1.00   Max.   :1.00  \n##                                                                 \n##       mit             erl             pox             vac            nuc       \n##  Min.   :0.000   Min.   :0.500   Min.   :0.000   Min.   :0.00   Min.   :0.000  \n##  1st Qu.:0.170   1st Qu.:0.500   1st Qu.:0.000   1st Qu.:0.48   1st Qu.:0.220  \n##  Median :0.220   Median :0.500   Median :0.000   Median :0.51   Median :0.220  \n##  Mean   :0.261   Mean   :0.505   Mean   :0.007   Mean   :0.50   Mean   :0.276  \n##  3rd Qu.:0.320   3rd Qu.:0.500   3rd Qu.:0.000   3rd Qu.:0.53   3rd Qu.:0.300  \n##  Max.   :1.000   Max.   :1.000   Max.   :0.830   Max.   :0.73   Max.   :1.000  \n##                                                                                \n##       loc     \n##  CYT    :463  \n##  NUC    :429  \n##  MIT    :244  \n##  ME3    :163  \n##  ME2    : 51  \n##  ME1    : 44  \n##  (Other): 90\n# a list to store the plots\nmy_plots <- list()\n\nnames_to_plot <- colnames(yeast_data[2:9])\nfor (i in 1:length(names_to_plot)) {\n    col_to_plot <- names_to_plot[i]\n    plt <- ggplot(data = yeast_data,\n                  mapping = aes(x = !!sym(col_to_plot))) +\n        geom_histogram(bins = 30) +\n        xlab(col_to_plot)\n    my_plots[[i]] <- plt\n}\ngrid.arrange(grobs = my_plots, nrow = 2)"},{"path":"eda-1.html","id":"attribute-relationships","chapter":"14 Exploratory Data Analysis I","heading":"14.2.5 Attribute relationships","text":"quick scan variable relationship, excluding dependent variable. pairs() function used . excluded erl pox add information picture.\nFigure 14.2: Relations numeric variables\nNB: found suggestions adjust color, size etc . complicated , can simply use ggpairs(yeast_data[c(2, 3, 4, 5, 8, 9)], progress = FALSE)), alternatively, base R nice pairs() function creates similar less good looking plot.adding smoother made clear pair shows clear correlation pair mcg / gvh actually predict property. Therefore surprising indeed correlation. strength correlation -R-squared- strong.","code":"\n# Function to return points and geom_smooth\n# allow for the method to be changed\nwrap_fn <- function(data, mapping, method=\"loess\", ...){\n      p <- ggplot(data = data, mapping = mapping) + \n      geom_point(size = 0.5, alpha = 0.4, color = \"darkblue\") + \n      geom_smooth(method=method, formula = 'y ~ x', ...)\n      p\n    }\n\nggpairs(yeast_data[c(2, 3, 4, 5, 8, 9)], \n        progress = FALSE,\n        lower = list(continuous = wrap_fn))"},{"path":"eda-1.html","id":"correlations-to-the-dependent-variable","chapter":"14 Exploratory Data Analysis I","heading":"14.2.6 Correlations to the dependent variable","text":"first investigation, numeric variables split location variable. plots screated using base R plotting system.\nFigure 14.3: Correlations dependent variable\n\nFigure 14.4: Correlations dependent variable\n\nFigure 14.5: Correlations dependent variable\n\nFigure 14.6: Correlations dependent variable\n\nFigure 14.7: Correlations dependent variable\n\nFigure 14.8: Correlations dependent variable\n\nFigure 14.9: Correlations dependent variable\n\nFigure 14.10: Correlations dependent variable\nQuite variables correlate pretty well dependent variable. well: alm, mit, erl, pox. Others : nuc, vac, ambiguous - discriminate, exclusively: mcg, gvh.summary statistics numeric variables split dependent variable:","code":"\nlibrary(RColorBrewer)\ncolors <- RColorBrewer::brewer.pal(8, name = \"Accent\")\n#col = c(\"darkblue\", \"darkgreen\", \"magenta\", )\ncol_i <- 0\nfor (name in names(yeast_data[2:9])) {\n    col_i <- col_i + 1\n    boxplot(yeast_data[, name] ~ yeast_data$loc,\n            xlab = NULL,\n            ylab = get_attribute_info(name),\n            col = colors[col_i])\n}\noptions(digits=2)\n\ntmp <- t(aggregate( . ~ loc, data = yeast_data[, -1], FUN = mean))\nknitr::kable(tmp)\ntmp <- t(aggregate( . ~ loc, data = yeast_data[, -1], FUN = median))\nknitr::kable(tmp)"},{"path":"eda-2.html","id":"eda-2","chapter":"15 Exploratory Data Analysis II","heading":"15 Exploratory Data Analysis II","text":"","code":""},{"path":"eda-2.html","id":"introduction-3","chapter":"15 Exploratory Data Analysis II","heading":"15.1 Introduction","text":"last chapter ’ll step back data mangling look activity called Exploratory Data Analysis, EDA short. theory presented previous chapters applied two datasetsIn statistics, exploratory data analysis (EDA) approach analyzing data sets summarize main characteristics, often visual methods. statistical model can used , primarily EDA seeing data can tell us beyond formal modeling hypothesis testing task.\ns. (Wikipedia)","code":""},{"path":"eda-2.html","id":"the-cervical-cancer-dataset","chapter":"15 Exploratory Data Analysis II","heading":"The Cervical Cancer dataset","text":"UCI machine learning public dataset “Cervical cancer (Risk Factors) Data Set”:“… collected ‘Hospital Universitario de Caracas’ Caracas, Venezuela. dataset comprises demographic information, habits, historic medical records 858 patients. Several patients decided answer questions privacy concerns.”dataset contains thirty variables 858 subjects participated research. goal identify variables possibly related cervical cancer. Typically type research one dependent variable - variable want “explain”. However dataset last four variables markers cervical cancer.","code":""},{"path":"eda-2.html","id":"libraries","chapter":"15 Exploratory Data Analysis II","heading":"Libraries","text":"packages used EDA:","code":"\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(stringr)\n##library(ggbiplot)"},{"path":"eda-2.html","id":"the-eda","chapter":"15 Exploratory Data Analysis II","heading":"15.2 The EDA","text":"","code":""},{"path":"eda-2.html","id":"the-codebook","chapter":"15 Exploratory Data Analysis II","heading":"15.2.1 The codebook","text":"codebook describes contents, structure, layout dataset. well-documented codebook contains information intended complete self-explanatory variable data file.always create file called Codebook.txt store names, descriptions types variables, yet present alongside dataset received.makes much easier add human-readable labels plots, column headers tables supposed integrated report. label Hormonal Contraceptives (years) much better Hormonal.Contraceptives..years.following -part original codebook downloaded data- good codebook?","code":"(int) Age \n(int) Number of sexual partners \n(int) First sexual intercourse (age) \n(int) Num of pregnancies \n(int) Hormonal Contraceptives (years) \n(int) IUD (years) \n(bool) STDs \n(int) STDs (number) \n...\n(bool) Hinselmann: target variable \n(bool) Schiller: target variable \n(bool) Cytology: target variable \n(bool) Biopsy: target variable"},{"path":"eda-2.html","id":"elements-of-a-good-codebook-entry","chapter":"15 Exploratory Data Analysis II","heading":"Elements of a good codebook entry","text":"Name column name (num.sex.partner)Full name abbreviates (“Number sexual partners”)(optionally) Label label want use graphs tables.Data type One R data (derived) data types: int/numeric/Date/factor/boolean…Unit unit measurement (e.g. “mg/l plasma”)Description full description measured, way value collected (e.g. questionnaire, lab protocol xxxx).Now look codebook answer : good codebook?codebook present complete? several ways try fix :read original publicationsee whether publication (online) supplementscontact primary investigators.last resort: try deduce context domain knowledgeI cleaned bit came . still perfect; improve ?","code":"\ncodebook <- read.csv(\"data/risk_factors_cervical_cancer_codebook.csv\", \n                     as.is = 1:3)\nhead(codebook)##   abbreviation   class                      full.name\n## 1          age     int                            Age\n## 2 num.partners     int      Number of sexual partners\n## 3    first.sex     int First sexual intercourse (age)\n## 4     num.preg     int             Num of pregnancies\n## 5       smoker logical                         Smokes\n## 6  smoke.years     int                Smokes (years)"},{"path":"eda-2.html","id":"load-and-inspect-the-data","chapter":"15 Exploratory Data Analysis II","heading":"15.2.2 Load and inspect the data","text":"Load data check data type columns. Always beware unusual encodings missing data! one common causes erroneous analyses, besides data entry errors sample swaps.get data loading right iterative process, using several functions inspect result time adjusted parameter. Use head() -especially- str() . Tibbles print data type automatically gives advantage data.frame.first attempt:can see, many variables read incorrectly. can recognized fact read Factor instead expected int. closer look output also tells : missing values apparently encoded question mark.\nfixed iteration two:looks pretty OK . alert surprises line, though!","code":"\ndatafile <- \"data/risk_factors_cervical_cancer.csv\"\ndata <- read.table(datafile, \n                   sep=\",\", \n                   header = TRUE)\nstr(data)## 'data.frame':    858 obs. of  36 variables:\n##  $ Age                               : int  18 15 34 52 46 42 51 26 45 44 ...\n##  $ Number.of.sexual.partners         : chr  \"4.0\" \"1.0\" \"1.0\" \"5.0\" ...\n##  $ First.sexual.intercourse          : chr  \"15.0\" \"14.0\" \"?\" \"16.0\" ...\n##  $ Num.of.pregnancies                : chr  \"1.0\" \"1.0\" \"1.0\" \"4.0\" ...\n##  $ Smokes                            : chr  \"0.0\" \"0.0\" \"0.0\" \"1.0\" ...\n##  $ Smokes..years.                    : chr  \"0.0\" \"0.0\" \"0.0\" \"37.0\" ...\n##  $ Smokes..packs.year.               : chr  \"0.0\" \"0.0\" \"0.0\" \"37.0\" ...\n##  $ Hormonal.Contraceptives           : chr  \"0.0\" \"0.0\" \"0.0\" \"1.0\" ...\n##  $ Hormonal.Contraceptives..years.   : chr  \"0.0\" \"0.0\" \"0.0\" \"3.0\" ...\n##  $ IUD                               : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ IUD..years.                       : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs                              : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs..number.                     : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.condylomatosis               : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.cervical.condylomatosis      : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.vaginal.condylomatosis       : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.vulvo.perineal.condylomatosis: chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.syphilis                     : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.pelvic.inflammatory.disease  : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.genital.herpes               : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.molluscum.contagiosum        : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.AIDS                         : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.HIV                          : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.Hepatitis.B                  : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs.HPV                          : chr  \"0.0\" \"0.0\" \"0.0\" \"0.0\" ...\n##  $ STDs..Number.of.diagnosis         : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs..Time.since.first.diagnosis  : chr  \"?\" \"?\" \"?\" \"?\" ...\n##  $ STDs..Time.since.last.diagnosis   : chr  \"?\" \"?\" \"?\" \"?\" ...\n##  $ Dx.Cancer                         : int  0 0 0 1 0 0 0 0 1 0 ...\n##  $ Dx.CIN                            : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Dx.HPV                            : int  0 0 0 1 0 0 0 0 1 0 ...\n##  $ Dx                                : int  0 0 0 0 0 0 0 0 1 0 ...\n##  $ Hinselmann                        : int  0 0 0 0 0 0 1 0 0 0 ...\n##  $ Schiller                          : int  0 0 0 0 0 0 1 0 0 0 ...\n##  $ Citology                          : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Biopsy                            : int  0 0 0 0 0 0 1 0 0 0 ...\ndata <- read.table(datafile,\n                   sep=\",\", \n                   header = TRUE,\n                   na.strings = \"?\")\nstr(data)## 'data.frame':    858 obs. of  36 variables:\n##  $ Age                               : int  18 15 34 52 46 42 51 26 45 44 ...\n##  $ Number.of.sexual.partners         : num  4 1 1 5 3 3 3 1 1 3 ...\n##  $ First.sexual.intercourse          : num  15 14 NA 16 21 23 17 26 20 15 ...\n##  $ Num.of.pregnancies                : num  1 1 1 4 4 2 6 3 5 NA ...\n##  $ Smokes                            : num  0 0 0 1 0 0 1 0 0 1 ...\n##  $ Smokes..years.                    : num  0 0 0 37 0 ...\n##  $ Smokes..packs.year.               : num  0 0 0 37 0 0 3.4 0 0 2.8 ...\n##  $ Hormonal.Contraceptives           : num  0 0 0 1 1 0 0 1 0 0 ...\n##  $ Hormonal.Contraceptives..years.   : num  0 0 0 3 15 0 0 2 0 0 ...\n##  $ IUD                               : num  0 0 0 0 0 0 1 1 0 NA ...\n##  $ IUD..years.                       : num  0 0 0 0 0 0 7 7 0 NA ...\n##  $ STDs                              : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs..number.                     : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.condylomatosis               : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.cervical.condylomatosis      : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.vaginal.condylomatosis       : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.vulvo.perineal.condylomatosis: num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.syphilis                     : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.pelvic.inflammatory.disease  : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.genital.herpes               : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.molluscum.contagiosum        : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.AIDS                         : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.HIV                          : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.Hepatitis.B                  : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs.HPV                          : num  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs..Number.of.diagnosis         : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ STDs..Time.since.first.diagnosis  : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ STDs..Time.since.last.diagnosis   : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ Dx.Cancer                         : int  0 0 0 1 0 0 0 0 1 0 ...\n##  $ Dx.CIN                            : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Dx.HPV                            : int  0 0 0 1 0 0 0 0 1 0 ...\n##  $ Dx                                : int  0 0 0 0 0 0 0 0 1 0 ...\n##  $ Hinselmann                        : int  0 0 0 0 0 0 1 0 0 0 ...\n##  $ Schiller                          : int  0 0 0 0 0 0 1 0 0 0 ...\n##  $ Citology                          : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ Biopsy                            : int  0 0 0 0 0 0 1 0 0 0 ..."},{"path":"eda-2.html","id":"should-you-correct-typos","chapter":"15 Exploratory Data Analysis II","heading":"Should you correct typos?","text":"think - taken Attribute Information website:advertised boolean, ?\nkind inspection make aware possible problems going arise later . Booleans different numbers . even dangerous can treated interchangeably - R can treat logical integer integer boolean context.kind discrepancy first thing address loading data. ’ll get back shortly.now first change column names something shorter, using codebook. Also, data converted tibble really nicer data structure:Now let’s look smoke.years variable:\nFigure 15.1: histogram ‘smoke.years’ attribute\nfigure obvious attribute really number years subject smoked. can see, zero-years smoking absent - data relevant subjects smoker == 1. 1 actually logical (spot already data?).Obviously, smoke.years int . counts variable smokes.packs.year.","code":"(bool) Smokes (years) \n(bool) Smokes (packs/year) \nnames(data) <- codebook[,1]\ndata <- as_tibble(data)\ndata## # A tibble: 858 × 36\n##     age num.partners first.sex num.preg smoker smoke.years smokes.packs.year\n##   <int>        <dbl>     <dbl>    <dbl>  <dbl>       <dbl>             <dbl>\n## 1    18            4        15        1      0           0                 0\n## 2    15            1        14        1      0           0                 0\n## 3    34            1        NA        1      0           0                 0\n## 4    52            5        16        4      1          37                37\n## 5    46            3        21        4      0           0                 0\n## 6    42            3        23        2      0           0                 0\n## # ℹ 852 more rows\n## # ℹ 29 more variables: horm.contracept.ever <dbl>, horm.contracept.years <dbl>,\n## #   IUD.ever <dbl>, IUD.years <dbl>, STD.ever <dbl>, STDs.number <dbl>,\n## #   STD_condylomatosis <dbl>, STD_cervical.cond <dbl>, STD_vaginal.cond <dbl>,\n## #   STD_vulvo.per.cond <dbl>, STD_syph <dbl>, STD_pid <dbl>,\n## #   STD_gen.herpes <dbl>, STD_moll.cont <dbl>, STD_aids <dbl>, STD_hiv <dbl>,\n## #   STD_hepB <dbl>, STD_HPV <dbl>, STD.num.diagn <int>, …\nggplot(data, aes(x=smoke.years)) + \n    geom_histogram(binwidth = 4, na.rm = T) + \n    ylim(0, 50)"},{"path":"eda-2.html","id":"getting-it-right-in-the-end","chapter":"15 Exploratory Data Analysis II","heading":"Getting it right in the end","text":", demonstration purposes use wrapper function read.csv() instead read.table(). tidyverse data reading facilities well course, dealt course.","code":"\ndata <- read.csv(datafile, na.strings = \"?\")\nnames(data) <- codebook[,1]\nfor(i in 1:nrow(codebook)) {\n  if(codebook[i, 2] == \"logical\"){\n    data[,i] <- as.logical(data[,i])\n  }\n}\n(data <- as_tibble(data))## # A tibble: 858 × 36\n##     age num.partners first.sex num.preg smoker smoke.years smokes.packs.year\n##   <int>        <dbl>     <dbl>    <dbl> <lgl>        <dbl>             <dbl>\n## 1    18            4        15        1 FALSE            0                 0\n## 2    15            1        14        1 FALSE            0                 0\n## 3    34            1        NA        1 FALSE            0                 0\n## 4    52            5        16        4 TRUE            37                37\n## 5    46            3        21        4 FALSE            0                 0\n## 6    42            3        23        2 FALSE            0                 0\n## # ℹ 852 more rows\n## # ℹ 29 more variables: horm.contracept.ever <lgl>, horm.contracept.years <dbl>,\n## #   IUD.ever <lgl>, IUD.years <dbl>, STD.ever <lgl>, STDs.number <dbl>,\n## #   STD_condylomatosis <lgl>, STD_cervical.cond <lgl>, STD_vaginal.cond <lgl>,\n## #   STD_vulvo.per.cond <lgl>, STD_syph <lgl>, STD_pid <lgl>,\n## #   STD_gen.herpes <lgl>, STD_moll.cont <lgl>, STD_aids <lgl>, STD_hiv <lgl>,\n## #   STD_hepB <lgl>, STD_HPV <lgl>, STD.num.diagn <int>, …"},{"path":"eda-2.html","id":"why-such-a-hassle","chapter":"15 Exploratory Data Analysis II","heading":"Why such a hassle?","text":"makes much easier run analyses ! Also, code readable making research transparent reproducible. Two important aspects analysis!\nBesides , make adding labels plots breeze.","code":""},{"path":"eda-2.html","id":"exploring-variables","chapter":"15 Exploratory Data Analysis II","heading":"15.2.3 Exploring variables","text":"","code":""},{"path":"eda-2.html","id":"first-steps","chapter":"15 Exploratory Data Analysis II","heading":"First steps","text":"first phase analysis inspect variables respect data distribution datacorruption. also take special care notice outliers, skewed data amount missing data.functions visualizations used often purpose:summary()quantile()histogramboxplot (jitter, stripchart)density plot(contingency) tablesAs can see, phase univariate analyses visualizations employed.","code":""},{"path":"eda-2.html","id":"inspecting-some-columns","chapter":"15 Exploratory Data Analysis II","heading":"Inspecting some columns","text":", inspect columns since entire process demonstration purposes . start columns 2 three.visualization. used grid.arrange() gridExtra package arranging two plots single panel.\nFigure 15.2: ‘num.partners’ (left) ‘first.sex’ (right) attributes\nNow look results ask :summaries distributions expect?see (hints ) outliers? outliers “real data” - instance- data entry errors?think questions answered truthfully?another boxplot, workhorse data visualization. problem discrete data overlap 100% plots, case outliers . Instead overlaying jittered data apply trick jitter outliers. trick provide data = function(x) dplyr::filter(x, outlier) argument geom_jitter() rows outliers selected.\nNote already moved away univeriate analysis.Let’s also look STDs.strange numbers! Many missing values many outliers apparently. simple table view may help get insight .o many missing values? think people don’t like admit ’ve STD.","code":"\nsummary(data[, 2:3])##   num.partners     first.sex \n##  Min.   : 1.00   Min.   :10  \n##  1st Qu.: 2.00   1st Qu.:15  \n##  Median : 2.00   Median :17  \n##  Mean   : 2.53   Mean   :17  \n##  3rd Qu.: 3.00   3rd Qu.:18  \n##  Max.   :28.00   Max.   :32  \n##  NA's   :26      NA's   :7\ntmp <- data %>% select(2:3) %>% drop_na()\np1 <- ggplot(tmp, mapping = aes(x = \"\", y = num.partners)) + \n    geom_boxplot() + \n    geom_jitter(width = 0.2, height = 0.1, alpha = 0.4, color = \"blue\") +\n    ylab(\"number of partners\") + \n    xlab(NULL)\n    \np2 <- ggplot(tmp, mapping = aes(x = \"\", y = first.sex)) + \n    geom_boxplot() +\n    geom_jitter(width = 0.2, height = 0.1, alpha = 0.4, color = \"blue\") +\n    ylab(\"age of first sex\") + \n    xlab(NULL)\n\ngrid.arrange(p1, p2, nrow = 1)\n##define outlier function\nmy_outlier <- function(x) {\n    x > median(x) + IQR(x) * 1.5\n}\n\ntmp <- data %>% \n    select(c(horm.contracept.years, target.biopsy)) %>% \n    drop_na() %>%\n    mutate(outlier = my_outlier(horm.contracept.years)) %>%\n    ungroup()\n\nggplot(tmp, mapping = aes(x=target.biopsy, y=horm.contracept.years)) + \n    geom_boxplot(outlier.shape = NA) + ##no outliers plotted here\n    geom_jitter(data = function(x) dplyr::filter(x, outlier), \n                width = 0.2, height = 0.1, alpha = 0.5)\nsummary(data$STDs.number)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##     0.0     0.0     0.0     0.2     0.0     4.0     105\ndata %>% group_by(STDs.number) %>% tally()## # A tibble: 6 × 2\n##   STDs.number     n\n##         <dbl> <int>\n## 1           0   674\n## 2           1    34\n## 3           2    37\n## 4           3     7\n## 5           4     1\n## 6          NA   105"},{"path":"eda-2.html","id":"smoking-data-corrupted","chapter":"15 Exploratory Data Analysis II","heading":"Smoking data corrupted?","text":"Obviously, three variables describe exact thing: smoking behavior. something funny going . Let’s investigate deal .6.98% subjects study smoker.Verify number smokers via another route:smoker data corrupted? Probably , row 4 dodgy least, worth investigation:Let’s look values smoker columns another way:reminder, equivalent base R code - prefer?think happened ?\npersonally think sleepy person data entry wrong column, something like .Now packs per year attribute.know smoker? smoke 37 packs per year? think ! packs per year! smokers smoke 1-7 packs per week! exactly histogram shows.","code":"\nsummary(data[, 5:7])##    smoker         smoke.years   smokes.packs.year\n##  Mode :logical   Min.   : 0.0   Min.   : 0.0     \n##  FALSE:722       1st Qu.: 0.0   1st Qu.: 0.0     \n##  TRUE :123       Median : 0.0   Median : 0.0     \n##  NA's :13        Mean   : 1.2   Mean   : 0.5     \n##                  3rd Qu.: 0.0   3rd Qu.: 0.0     \n##                  Max.   :37.0   Max.   :37.0     \n##                  NA's   :13     NA's   :13\ndata %>% group_by(smoker) %>% tally()## # A tibble: 3 × 2\n##   smoker     n\n##   <lgl>  <int>\n## 1 FALSE    722\n## 2 TRUE     123\n## 3 NA        13\nperc <- length(data$smoker) / sum(data$smoker, na.rm = T)\nsum(data$smoker & data$smoke.years > 0 & data$smokes.packs.year > 0, na.rm=T)## [1] 123\ndata[4, c(1, 5, 6, 7)]## # A tibble: 1 × 4\n##     age smoker smoke.years smokes.packs.year\n##   <int> <lgl>        <dbl>             <dbl>\n## 1    52 TRUE            37                37\ndata %>% \n    select(smoker, smoke.years, smokes.packs.year) %>%\n    drop_na() %>%\n    filter(smoke.years > 0 & smoke.years == smokes.packs.year)## # A tibble: 14 × 3\n##   smoker smoke.years smokes.packs.year\n##   <lgl>        <dbl>             <dbl>\n## 1 TRUE            37                37\n## 2 TRUE            19                19\n## 3 TRUE            21                21\n## 4 TRUE            15                15\n## 5 TRUE            12                12\n## 6 TRUE             5                 5\n## # ℹ 8 more rows\ndata[!is.na(data$smoke.years) \n     & data$smoke.years > 0 \n     & data$smoke.years == data$smokes.packs.year, c(5,6,7)]\ndata %>% filter(smokes.packs.year > 0) %>%\n    ggplot(aes(x = smokes.packs.year)) +  \n        geom_histogram(bins = 25)"},{"path":"eda-2.html","id":"dealing-with-data-corruption","chapter":"15 Exploratory Data Analysis II","heading":"Dealing with data corruption","text":"Two options remain smokes.packs.year column. first adjust units manually think correct. simply discard column.\nSince smoking data redundant, choose latter. kind problems crucial data columns, probably try contact authors/data collection team changing units .","code":""},{"path":"eda-2.html","id":"variable-engineering","chapter":"15 Exploratory Data Analysis II","heading":"15.2.4 Variable engineering","text":"","code":""},{"path":"eda-2.html","id":"recoding-strategies","chapter":"15 Exploratory Data Analysis II","heading":"Recoding strategies","text":"Often recode (transform) variables. can able compare groups instead numbers continuous scale (factorization), make comparable (normalization) get linear distribution (log transformation).Several techniques exist different challenges:Factorization: convert factor\nseen Smoking data\nseen Smoking dataNormalization\nmin-max normalization\nscaling normalization\nmin-max normalizationscaling normalizationLog transformation (log2, log10)Dummy coding: numeric attributes required instead factor data","code":""},{"path":"eda-2.html","id":"min-max-normalization","chapter":"15 Exploratory Data Analysis II","heading":"min-max normalization","text":"data scaled 0 1, lowest value data mapped zero highest one. method easy transparent, danger lies unseen data. new data encountered wider distribution analyses approach may break.RHere demo min-max normalization.","code":"\nscale_min_max <- function(x) {\n     (x - min(x)) / (max(x) - min(x))\n}\nx <- c(2, -1, 3, 5, 0, 4)\nscale_min_max(x)## [1] 0.500 0.000 0.667 1.000 0.167 0.833"},{"path":"eda-2.html","id":"scaling-normalization","chapter":"15 Exploratory Data Analysis II","heading":"scaling normalization","text":"slightly used normalization technique scaling normalization. scales variable mean zero standard deviation.\\[x' = \\frac{x-\\bar{x}}{\\sigma}\\]built right R:","code":"\nx <- c(2, -1, 3, 5, 0, 4)\nscale(x)##         [,1]\n## [1,] -0.0719\n## [2,] -1.3669\n## [3,]  0.3597\n## [4,]  1.2231\n## [5,] -0.9353\n## [6,]  0.7914\n## attr(,\"scaled:center\")\n## [1] 2.17\n## attr(,\"scaled:scale\")\n## [1] 2.32"},{"path":"eda-2.html","id":"dummy-encoding","chapter":"15 Exploratory Data Analysis II","heading":"dummy encoding","text":"change factor numeric representation usable techniques require numeric input clustering, linear modelling regression?done technique called dummy coding essence binary splitting.\nsmall data set:need three columns 0 1 values fordog/dogcat/catrat/ratBelow can see approach using techniques base R.course also packages can ; e.g. look dummies.","code":"\npet_favour <- tibble(subject = c(\"Mike\", \"Roger\", \"Rose\", \"Megan\", \"Caitlin\"),\n                    favour = factor(c(\"dog\", \"cat\", \"cat\", \"dog\", \"rat\")))\npet_favour## # A tibble: 5 × 2\n##   subject favour\n##   <chr>   <fct> \n## 1 Mike    dog   \n## 2 Roger   cat   \n## 3 Rose    cat   \n## 4 Megan   dog   \n## 5 Caitlin rat\nencode_dummy <- function(x) {\n    lvls <- levels(x)\n    tmp <- as.data.frame(sapply(lvls, function(y) as.integer(x == y)))\n    names(tmp) <- paste0(lvls, \"_y\")\n    tmp\n}\nbind_cols(subject = pet_favour$subject, encode_dummy(pet_favour$favour))##   subject cat_y dog_y rat_y\n## 1    Mike     0     1     0\n## 2   Roger     1     0     0\n## 3    Rose     1     0     0\n## 4   Megan     0     1     0\n## 5 Caitlin     0     0     1"},{"path":"eda-2.html","id":"factorization","chapter":"15 Exploratory Data Analysis II","heading":"“factorization”","text":"Especially visualization purposes, can convenient variable factor form instead numeric form. instance, case smoking-related data current dataset.reduce three ‘smoking’ variables one variable start building ‘clean’ dataset.\n, new variable smoking result cutting smoke.years variable factor levels.","code":"\nsmoking_f <- cut(data$smoke.years, \n               breaks = c(0, 1, 5, 12, 100), \n               labels = c(\"never\", \"short\", \"medium\", \"long\"),\n               ordered_result = T,\n               right = F)\n\nclean_data <- data %>% \n    mutate(smoking = smoking_f) %>%\n    select(age:num.preg, smoking, horm.contracept.ever:target.biopsy)\ntable(clean_data$smoking, useNA = \"always\")## \n##  never  short medium   long   <NA> \n##    726     42     44     33     13"},{"path":"eda-2.html","id":"data-redundancy-in-std-variables","chapter":"15 Exploratory Data Analysis II","heading":"Data redundancy in STD variables","text":"many variables related STDs:almost completely redundant, extremely low -thus useless- counts. Seen absolute numbers, many multiple STDs, statistically seen highly represented - even two one STD:79 subjects STDs (luckily!).counts occurrences individual STDs:listed . can see nice application gather() function put results long format instead wide.base R using apply():","code":"\n(std_columns <- codebook %>% \n    select(abbreviation) %>% \n    filter(str_detect(abbreviation, \"STD_\")))##          abbreviation\n## 1  STD_condylomatosis\n## 2   STD_cervical.cond\n## 3    STD_vaginal.cond\n## 4  STD_vulvo.per.cond\n## 5            STD_syph\n## 6             STD_pid\n## 7      STD_gen.herpes\n## 8       STD_moll.cont\n## 9            STD_aids\n## 10            STD_hiv\n## 11           STD_hepB\n## 12            STD_HPV\nstd_columns <- std_columns$abbreviation\n##alternative with base R:\n#codebook[grep(pattern = \"STD_\", x = codebook$abbreviation), 1]\ntable(data$STDs.number, useNA = \"always\")## \n##    0    1    2    3    4 <NA> \n##  674   34   37    7    1  105\nclean_data %>%\n    summarise_at(std_columns, function(x) sum(x, na.rm = T)) %>%\n    gather(key = \"disease\", value = \"count\", everything()) ## # A tibble: 12 × 2\n##   disease            count\n##   <chr>              <int>\n## 1 STD_condylomatosis    44\n## 2 STD_cervical.cond      0\n## 3 STD_vaginal.cond       4\n## 4 STD_vulvo.per.cond    43\n## 5 STD_syph              18\n## 6 STD_pid                1\n## # ℹ 6 more rows\napply(data[ ,std_columns], MARGIN = 2, FUN = function(x) sum(x>0, na.rm=T))"},{"path":"eda-2.html","id":"the-dependent-variable","chapter":"15 Exploratory Data Analysis II","heading":"15.2.5 The dependent variable","text":"many datasets single dependent variable, variable try explain model using variables (hence name “target” used . case question whether subject cervical cancer yes .Unfortunately four dependent variables:one(s) going use?Let’s investigate pairwise correlations .\nmap nice visualization type data. course, ggplot really likes long format needs done first gather() (try pivot_longer() exercise):shows correlation four target variables.Another way explore contingency table.","code":"\nlast <- length(names(data))\n(target_vars <- names(data)[(last-3):last])## [1] \"target.hinselman\" \"target.schiller\"  \"target.cytology\"  \"target.biopsy\"\ntarget_names <- c(\"Hinselman\", \"Schiller\", \"cytology\", \"biopsy\")\ncor_matrix <- cor(data[, 33:36])\ncolnames(cor_matrix) <- target_names\n(cor_matrix <- as_tibble(cor_matrix))## # A tibble: 4 × 4\n##   Hinselman Schiller cytology biopsy\n##       <dbl>    <dbl>    <dbl>  <dbl>\n## 1     1        0.650    0.192  0.547\n## 2     0.650    1        0.361  0.733\n## 3     0.192    0.361    1      0.327\n## 4     0.547    0.733    0.327  1\ncor_matrix <- cor_matrix %>% mutate(target_name = target_names) %>% select(5, 1:4)map, fig.asp=.9, out.width='70%', fig.align='center', fig.cap=\"A correlation \nmap of the four explanatory variables\"}\ncor_matrix_long <- gather(cor_matrix, key = \"method\", value = \"correlation\", target_names)\nggplot(data = cor_matrix_long, aes(x=target_name, y=method, fill=correlation)) + \n    geom_tile() + \n    labs(x=NULL, y=NULL) + \n    scale_fill_gradient(high = \"red\", low = \"white\" )\n## TO BE DONE"},{"path":"eda-2.html","id":"exploring-relationships-between-variables","chapter":"15 Exploratory Data Analysis II","heading":"15.2.6 Exploring relationships between variables","text":"Typically, relationships variables visualized using scatterplots, strategies exist. Several explored .","code":""},{"path":"eda-2.html","id":"the-scatterplot","chapter":"15 Exploratory Data Analysis II","heading":"The scatterplot","text":"simple scatterplot looking relationship first.sex num.partners.\nFigure 15.3: scatterplot first version\nnotice strange “outlier”, subject first sex ten 29 sexual partners?\nimportantly, showing correct picture: limited number discrete values variable. around 100 points visible {r nrow(data)} expected, apparently many points overlap. can improved alpha parameter geom_point. Another strategy improve using geom_jitter() function, combined alpha parameter.\nOmitting outliers improve picture, course show complete picture anymore., choose transparency option together bit jitter (much still show discreteness measurements). also added trend line form smoother. trend line addition great visual help guide reader. question : look trend line decide whether showing false pattern.\nFigure 15.4: scatterplot trendline\ntrend line shows high impact single outlier! contrast common belief age first sex “promiscuity”, apparent relationship visible dataset omit single outlier:\nFigure 15.5: scatterplot trendline\n","code":"\nbaseplot_sp <- ggplot(clean_data, aes(x=first.sex, y=num.partners)) +\n   labs(x=\"Age of first sex\", y=\"Number of sexual partners\") \nbaseplot_sp + geom_point(na.rm=T)\nbaseplot_sp + \n    geom_jitter(na.rm=T, alpha=0.2, \n                shape=16, size=2, \n                width = 0.2, height = 0.2,\n                color = \"darkgreen\") + \n    geom_smooth(method=\"loess\", na.rm=T)## `geom_smooth()` using formula = 'y ~ x'\nclean_data %>% filter(num.partners < 25 ) %>%\n    ggplot(aes(x=first.sex, y=num.partners)) +\n        labs(x=\"Age of first sex\", y=\"Number of sexual partners\") +\n        geom_jitter(na.rm=T, alpha=0.2, \n                shape=16, size=2, \n                width = 0.2, height = 0.2,\n                color = \"darkgreen\") + \n        geom_smooth(method=\"loess\", na.rm=T)## `geom_smooth()` using formula = 'y ~ x'"},{"path":"eda-2.html","id":"binning","chapter":"15 Exploratory Data Analysis II","heading":"Binning","text":"method discussed binning, binning, cluster individual data points “buckets”. amount cases bucket displayed using color gradient.variation binning - hexagonal bin (requires package hexbin):","code":"\nbaseplot_sp + geom_bin2d(na.rm=T)\nlibrary(hexbin)\nbaseplot_sp + geom_hex(na.rm=T)"},{"path":"eda-2.html","id":"look-for-patterns-with-the-dependent-variable","chapter":"15 Exploratory Data Analysis II","heading":"15.2.7 Look for patterns with the dependent variable","text":"? dependent variable thing interested ! Therefore good idea investigate variables relation dependent variable., heatmap comes handy. Start creating matrix.create plot. used pivot_longer() instead gather() obtain longer format required ggplot2.\nFigure 15.6: heatmap pairwise correlation selected numeric variables\ncan see, hardly correlation numeric variables, target (dependent) variable target.biopsy either. hopeful result goal able predict cervical cancer occurrence.","code":"\nclean_data %>% filter(num.partners < 25 ) %>%\n    ggplot(aes(x=first.sex, y=num.preg, color=target.biopsy)) +\n        labs(x=\"Age of first sex\", y=\"Number of pregnancies\") +\n    geom_jitter(mapping = aes(color=target.biopsy), \n                na.rm=T, width=0.2, height=0.2, \n                alpha=0.5, shape=16, size=0.8) + \n    ylim(0,10) +\n    geom_smooth(method=\"loess\", na.rm=T)## `geom_smooth()` using formula = 'y ~ x'\nselection <- c(\"num.partners\", \"first.sex\", \"num.preg\", \"horm.contracept.years\", \"IUD.years\", \"STDs.number\", \"target.biopsy\")\n\ntmp <- clean_data %>% select(selection) %>% drop_na()## Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\n## ℹ Please use `all_of()` or `any_of()` instead.\n##   # Was:\n##   data %>% select(selection)\n## \n##   # Now:\n##   data %>% select(all_of(selection))\n## \n## See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\ncor_matrix <- cor(tmp)\n#cor_matrix\n\n#colnames(cor_matrix) <- target_names\ncor_matrix <- as_tibble(cor_matrix)\n(cor_matrix <- cor_matrix %>% mutate(var1 = selection) %>% select(8, 1:7))## # A tibble: 7 × 8\n##   var1           num.partners first.sex num.preg horm.contracept.years IUD.years\n##   <chr>                 <dbl>     <dbl>    <dbl>                 <dbl>     <dbl>\n## 1 num.partners        1        -0.148    0.0937                0.0209    0.00705\n## 2 first.sex          -0.148     1       -0.0704                0.00434  -0.0357 \n## 3 num.preg            0.0937   -0.0704   1                     0.217     0.156  \n## 4 horm.contrace…      0.0209    0.00434  0.217                 1        -0.00885\n## 5 IUD.years           0.00705  -0.0357   0.156                -0.00885   1      \n## 6 STDs.number         0.0370    0.00188 -0.00460              -0.0175    0.00262\n## 7 target.biopsy      -0.00266   0.0296   0.0452                0.0799    0.0422 \n## # ℹ 2 more variables: STDs.number <dbl>, target.biopsy <dbl>\ncor_matrix_long <- pivot_longer(data = cor_matrix, cols = selection, names_to = \"variable\", values_to = \"cor\")\nggplot(data = cor_matrix_long, aes(x=var1, y=variable, fill=cor)) + \n    geom_tile() + \n    labs(x=NULL, y=NULL) + \n    scale_fill_gradient(high = \"red\", low = \"white\" )"},{"path":"eda-2.html","id":"density-plots-show-class-distinction","chapter":"15 Exploratory Data Analysis II","heading":"15.3 Density plots show class distinction","text":"density plot, split categories target variable, often quickly reveal whether promise variable. ’ll demonstrate iris dataset since cervical cancer dataset nice respect.","code":"\nggplot(iris, aes(x=Petal.Length)) + geom_density(aes(color=Species))"},{"path":"eda-2.html","id":"the-xor-problem","chapter":"15 Exploratory Data Analysis II","heading":"15.3.1 The ‘xor’ problem","text":"density approach flawless! Consider :looks like little win, doesn’t ?\n’s another view data!called XOR problem cases follow “Exclusive ” rule.","code":"\nvar_x <- c(runif(300, -1, 0), runif(300, 0, 1))\nvar_y <- c(runif(150, -1, 0), runif(150, 0, 1), runif(150, 0, 1), runif(150, -1, 0))\nlabel = rep(c(rep(\"sick\", 150), rep(\"healthy\", 150)), 2)\ndf <- data.frame(dosage = var_x, response=var_y, patient_type = label)\nggplot(data=df, mapping=aes(x=dosage)) + geom_density(aes(color=patient_type))\nggplot(df, aes(x=dosage, y=response)) + geom_point()\nggplot(df, aes(x=dosage, y=response, color=patient_type)) + geom_point()"},{"path":"eda-2.html","id":"advanced-explorations","chapter":"15 Exploratory Data Analysis II","heading":"15.3.2 Advanced Explorations","text":"","code":""},{"path":"eda-2.html","id":"pca","chapter":"15 Exploratory Data Analysis II","heading":"PCA","text":"First PCA shown iris dataset cervical cancer dataset.plot method returns plot variances (y-axis) associated PCs (x-axis).summary method describe importance PCs.PC plotNow procedure cervical cancer dataset, selection numerical variables.plot method returns plot variances (y-axis) associated PCs (x-axis).summary method describe importance PCs.PC plot\nFigure 15.7: PCA plot numerical variables\npromising neither; structure data, general relation dependent variable.","code":"\nir.pca <- prcomp(iris[, -5],\n                 center = TRUE,\n                 scale. = TRUE)\nprint(ir.pca)## Standard deviations (1, .., p=5):\n## [1] 1.846 0.956 0.730 0.355 0.139\n## \n## Rotation (n x k) = (5 x 5):\n##                 PC1       PC2     PC3    PC4     PC5\n## Sepal.Length  0.467 -0.377503  0.3595 -0.673 -0.2407\n## Sepal.Width  -0.243 -0.923255 -0.1579  0.223  0.1183\n## Petal.Length  0.528 -0.024566  0.2399  0.229  0.7813\n## Petal.Width   0.524 -0.066990  0.0595  0.634 -0.5608\n## mean_ratios  -0.411 -0.000233  0.8858  0.208 -0.0551\nplot(ir.pca, type = \"l\")\nsummary(ir.pca)## Importance of components:\n##                          PC1   PC2   PC3    PC4     PC5\n## Standard deviation     1.846 0.956 0.730 0.3546 0.13853\n## Proportion of Variance 0.681 0.183 0.107 0.0251 0.00384\n## Cumulative Proportion  0.681 0.864 0.971 0.9962 1.00000\n#library(devtools)\n#install_github(\"vqv/ggbiplot\")\nlibrary(ggbiplot)\nggbiplot(ir.pca, obs.scale = 1, var.scale = 1, \n              groups = iris[,5], ellipse = FALSE, \n              circle = TRUE) + \n    scale_color_discrete(name = '') +\n    theme(legend.direction = 'horizontal', legend.position = 'top')\nselection <- c(\"num.partners\", \"first.sex\", \"num.preg\", \"horm.contracept.years\", \"IUD.years\", \"STDs.number\", \"target.biopsy\")\ntmp <- clean_data %>% select(selection) %>% drop_na()\ntmp## # A tibble: 676 × 7\n##   num.partners first.sex num.preg horm.contracept.years IUD.years STDs.number\n##          <dbl>     <dbl>    <dbl>                 <dbl>     <dbl>       <dbl>\n## 1            4        15        1                     0         0           0\n## 2            1        14        1                     0         0           0\n## 3            5        16        4                     3         0           0\n## 4            3        21        4                    15         0           0\n## 5            3        23        2                     0         0           0\n## 6            3        17        6                     0         7           0\n## # ℹ 670 more rows\n## # ℹ 1 more variable: target.biopsy <lgl>\ncc.pca <- prcomp(tmp[, -7],\n                 center = TRUE,\n                 scale. = TRUE)\nprint(cc.pca)## Standard deviations (1, .., p=6):\n## [1] 1.151 1.052 1.005 0.999 0.918 0.848\n## \n## Rotation (n x k) = (6 x 6):\n##                           PC1    PC2     PC3     PC4     PC5      PC6\n## num.partners          -0.3816  0.552  0.2388  0.0143 -0.6832 -0.15857\n## first.sex              0.3461 -0.570 -0.0559  0.2939 -0.6801  0.05260\n## num.preg              -0.6473 -0.258 -0.0466  0.0622 -0.0273  0.71257\n## horm.contracept.years -0.4427 -0.471  0.4721  0.1730  0.1630 -0.55043\n## IUD.years             -0.3457 -0.104 -0.8319 -0.0899 -0.0903 -0.40168\n## STDs.number           -0.0113  0.266 -0.1506  0.9336  0.1875  0.00171\nplot(cc.pca, type = \"l\")\nsummary(cc.pca)## Importance of components:\n##                          PC1   PC2   PC3   PC4   PC5   PC6\n## Standard deviation     1.151 1.052 1.005 0.999 0.918 0.848\n## Proportion of Variance 0.221 0.185 0.168 0.166 0.140 0.120\n## Cumulative Proportion  0.221 0.405 0.574 0.740 0.880 1.000\nggbiplot(cc.pca, obs.scale = 1, var.scale = 1, \n              groups = tmp$target.biopsy, ellipse = FALSE, \n              circle = TRUE, alpha = 0.5) + \n    scale_color_discrete(name = '') + \n    theme(legend.direction = 'horizontal', legend.position = 'top')"},{"path":"eda-2.html","id":"clustering","chapter":"15 Exploratory Data Analysis II","heading":"15.3.2.1 Clustering","text":"Using clustering, can sometimes see obvious patterns data.obvious :\nk-Means clustering\nHierarchical clustering\nk-Means clusteringHierarchical clustering","code":""},{"path":"eda-2.html","id":"k-means-clustering","chapter":"15 Exploratory Data Analysis II","heading":"15.3.2.2 k-Means clustering","text":"k-means sensitive scale data ’ll need normalize .","code":"\n#km_clusters <- kmeans()"},{"path":"eda-2.html","id":"hierarchical-clustering","chapter":"15 Exploratory Data Analysis II","heading":"15.3.2.3 hierarchical clustering","text":"DONE","code":""},{"path":"exercises.html","id":"exercises","chapter":"16 Exercises","heading":"16 Exercises","text":"chapter contains exercises, subsections correspond previous chapters.\nsolutions tehse exercises next chapter, also numbering parallel one.work exercises best download chapter separate RMarkdown file work . can download . commencing put new Markdown YAML header top file, least contents:Alternatively, create either RMarkdown Notebook (File → New File → R Notebook) RMarkdown document (File → New File → R Markdown… → choose Document type give title). Notebook advantage can toggle visibility code, fewer output options (pdf Word).link R cheat sheet use selecting right base R function task.exercises marked difficulty level, 1 five “stars” (❋ ❋❋❋❋❋). Since big fan intellectual challenge included quite exercises transcend mastery level required final assessment. peace mind; able solve three-star exercises really good go! Note one-star exercises beginning really difficulty ones end chapter.datasets referred within exercises can found via direct link provided, Github repository URL https://github.com/MichielNoback/datasets. direct link. can download individual datasets page, download entire repository . download, use “clone download” pull button (green button). want pro, use git clone …","code":"---\ntitle: \"Exercise solutions DAVuR1\"\nauthor: \"<YOUR NAME>\"\n---"},{"path":"exercises.html","id":"getting-started-2","chapter":"16 Exercises","heading":"16.1 Getting started","text":"","code":""},{"path":"exercises.html","id":"install-the-tools","chapter":"16 Exercises","heading":"16.1.1 Install the tools","text":"Level: ❋Install tools PC laptop, order:R https://cran.r-project.org/bin/windows/base/RStudio https://rstudio.com/products/rstudio/download/ (choose free version course)[Optionally] want generate pdf documents also install Latex version: MikTeX TinyTex Windows MacTeX MacOS. want keep things simple suggest stick HTML MS Word output now (Word can also export PDF).","code":""},{"path":"exercises.html","id":"the-toolbox","chapter":"16 Exercises","heading":"16.2 The toolbox","text":"","code":""},{"path":"exercises.html","id":"customize-rstudio","chapter":"16 Exercises","heading":"16.2.1 Customize RStudio","text":"Level: ❋RStudio, go Tools → Global Options.General, Uncheck option “Restore .RData workspace startup”. evil option removed app.Appearance, select options Theme.Pane Layout, customize panes organized liking.Spelling, install Dutch spell checker.","code":""},{"path":"exercises.html","id":"resumé","chapter":"16 Exercises","heading":"16.2.2 Resumé","text":"Level: ❋❋Create R Markdown document called Resumé.md create Curriculum Vitae using Markdown syntax. Use R Markdown Reference Guide Cheat Sheet provided RStudio (via Help menu), Markdown Cheatsheet. don’t need R resumé markdown alone enough.","code":""},{"path":"exercises.html","id":"basic-r-1","chapter":"16 Exercises","heading":"16.3 Basic R","text":"","code":""},{"path":"exercises.html","id":"math-in-the-console","chapter":"16 Exercises","heading":"16.3.1 Math in the console","text":"Level: ❋console, calculate following:\\(31 + 11\\)B\\(66 - 24\\)C\\(\\frac{126}{3}\\)D\\(12^2\\)E\\(\\sqrt{256}\\)F\\(\\frac{3*(4+\\sqrt{8})}{5^3}\\)","code":""},{"path":"exercises.html","id":"functions-i","chapter":"16 Exercises","heading":"16.3.2 Functions (I)","text":"[❋]\nView help page paste(). two variants function. ? difference ? Use variants generate exactly message \"welcome R\" arguments: \"welcome \", \"\", \"R\"B [❋]\nabs function ? returned abs(-20) abs(20)?C [❋]\nc function ? difference returned value (result) c() combine either 1, 3 \"\" arguments, 1, 2 3? Use function class() answer .\nExperiment usages c(): try different types try vectors argument function.D [❋]\nfunction install.packages() ? Use install package RColorBrewer. ’ll look package later .E [❋]\nType ?round console. several functions related rounding numbers. Give vector:generate -exact- outputs using one listed functions:F [❋]\nUsing website provided cheat sheet, find String manipulation function convert vector author namesinto :(output type list, data type ’ll see later )G [❋]Using website provided cheat sheet, find data selection function accept vector bird names returns vector duplicates removed.","code":"\nnumberz <- c(-1.33, -1.55239, 0.4432, 0.5000001, 1.98765)[1] -1 -1  1  1  2\n[1] -1 -1  0  0  1\n[1] -1.330 -1.552  0.443  0.500  1.988\n[1] -2 -2  0  0  1\nnames <- c(\"William Shakespeare\", \"Agatha Christie\", \"J. K. Rowling\")[[1]]\n[1] \"William\"     \"Shakespeare\"\n\n[[2]]\n[1] \"Agatha\"   \"Christie\"\n\n[[3]]\n[1] \"J.\"      \"K.\"      \"Rowling\"\nbirds <- c(\"robin\", \"wagtail\", \"blackbird\", \"robin\", \"blackbird\", \"buzzard\")"},{"path":"exercises.html","id":"variables-1","chapter":"16 Exercises","heading":"16.3.3 Variables","text":"Level: [❋]Create three variables given values - x=20, y=10 z=3. Next, calculate following variables:. \\(x+y\\)\nB. \\(x^z\\)\nC. \\(q = x \\times y \\times z\\)\nD. \\(\\sqrt{q}\\)\nE. \\(\\frac{q}{\\pi}\\) (pi simply pi R)\nF. \\(\\log_{10}{(x \\times y)}\\)","code":""},{"path":"exercises.html","id":"vectors-1","chapter":"16 Exercises","heading":"16.3.4 Vectors","text":"","code":""},{"path":"exercises.html","id":"circles","chapter":"16 Exercises","heading":"Circles","text":"circumference circle \\(2\\pi\\cdot r\\), surface \\(4\\pi \\cdot r^2\\) volume \\(4/3 \\pi\\cdot r^3\\).\nGiven vector circle radiuses,[❋]\nCalculate circumference.B [❋]\nCalculate surface.C [❋]\nCalculate volume.","code":"\nradiuses <- c(0, 1, 2, pi, 4)"},{"path":"exercises.html","id":"creating-vectors-1","chapter":"16 Exercises","heading":"Creating vectors","text":"Create following vectors, efficiently possible. functions rep(), seq(), paste0() colon operator : can used, (nested) combination.[❋][1] 1 2 5 1 2 5B [❋][1] 9 9 9 8 8 8 7 7 7 6 6 6 5 5 5C [❋][1] 1 1 1 4 4 4 9 9 9 1 1 1 4 4 4 9 9 9D [❋❋][1] \"1a\" \"2b\" \"3c\" \"4d\" \"5e\" \"1a\" \"2b\" \"3c\" \"4d\" \"5e\"E [❋❋][1] \"0z\"   \"0.2y\" \"0.4x\" \"0.6w\" \"0.8v\" \"1u\"F [❋❋][1] \"505\" \"404\" \"303\" \"202\" \"101\" \"000\"G [❋❋][1] \"0.5A5.0\" \"0.4B4.0\" \"0.3C3.0\" \"0.2D2.0\" \"0.1E1.0\"","code":""},{"path":"exercises.html","id":"complex-datatypes","chapter":"16 Exercises","heading":"16.4 Complex datatypes","text":"","code":""},{"path":"exercises.html","id":"creating-factors","chapter":"16 Exercises","heading":"16.4.1 Creating factors","text":"[❋]\nGiven vector:possible levels:\n1: harmless\n2: risky\n3: dangerous\n4: deadlyCreate factor data levels order.B [❋❋]\nGiven simulated data set wealth distribution. letters represent following labels: “” = “poor”, “b” = “middle class”, “c” = “wealthy” “c” = “rich”:First study code generates data. allowed modify world view :-).Convert two vectors ordered factors.\nNext, combine two factors single one. Finally, report percentage individual levels. Hint: use table() prop.table().","code":"\nanimal_risk <- c(2, 4, 1, 1, 2, 4, 1, 4, 1, 1, 2, 1)\nset.seed(1234)\nwealth_male <- sample(x = letters[1:4], \n                 size = 1000,\n                 replace= TRUE, \n                 prob = c(0.7, 0.17, 0.12, 0.01))\nwealth_female <- sample(x = letters[1:4], \n                 size = 1000,\n                 replace= TRUE, \n                 prob = c(0.8, 0.15, 0.497, 0.003))"},{"path":"exercises.html","id":"list-actions","chapter":"16 Exercises","heading":"16.4.2 List actions","text":"Given list ,figure single statements get -exactly- given outputs. Often possibilities. Can find ?[❋]B [❋]C [❋]D [❋]E [❋]","code":"\n(house_admin <- list(John = list(cooking = c(\"Sunday\", \"Wednesday\"),\n                                 tasks = c(\"vacuuming\", \"fridge\"),\n                                 rent = 350),\n                     Rose = list(cooking = c(\"Monday\", \"Tuesday\"),\n                                 tasks = \"toilet\",\n                                 rent = 425),\n                     Mike = list(cooking = c(\"Thursday\", \"Friday\"),\n                                 tasks = c(\"bathroom\", \"mopping\"),\n                                 rent = 450)))## $John\n## $John$cooking\n## [1] \"Sunday\"    \"Wednesday\"\n## \n## $John$tasks\n## [1] \"vacuuming\" \"fridge\"   \n## \n## $John$rent\n## [1] 350\n## \n## \n## $Rose\n## $Rose$cooking\n## [1] \"Monday\"  \"Tuesday\"\n## \n## $Rose$tasks\n## [1] \"toilet\"\n## \n## $Rose$rent\n## [1] 425\n## \n## \n## $Mike\n## $Mike$cooking\n## [1] \"Thursday\" \"Friday\"  \n## \n## $Mike$tasks\n## [1] \"bathroom\" \"mopping\" \n## \n## $Mike$rent\n## [1] 450$John\n$John$cooking\n[1] \"Sunday\"    \"Wednesday\"\n\n$John$tasks\n[1] \"vacuuming\" \"fridge\"   \n\n$John$rent\n[1] 350$cooking\n[1] \"Monday\"  \"Tuesday\"\n\n$tasks\n[1] \"toilet\"\n\n$rent\n[1] 425$John\n$John$cooking\n[1] \"Sunday\"    \"Wednesday\"\n\n$John$tasks\n[1] \"vacuuming\" \"fridge\"   \n\n$John$rent\n[1] 350\n\n\n$Rose\n$Rose$cooking\n[1] \"Monday\"  \"Tuesday\"\n\n$Rose$tasks\n[1] \"toilet\"\n\n$Rose$rent\n[1] 425[1] \"Thursday\" \"Friday\"  [1] \"fridge\""},{"path":"exercises.html","id":"named-vectors","chapter":"16 Exercises","heading":"16.4.3 Named vectors","text":"Almost programming languages know (hash)map / dictionary data structure storing -called “key--value” pairs. make possible “look ” value belonging “key”. term dictionary comes . dictionary holds keys (words) meaning (values). R dictionary type make dict-like structure using vector named elements. follows example.wanted create use DNA codon translation table, use translate piece DNA, something like shown (4 64 codons included keep simple). See can figure going thereA [❋❋]\nMake modified copy code chunk way spaces present amino acid residues single-letter codes amino acids used instead three-letter codes.B [❋❋❋]\nvector called nuc_weights. holds weights nucleotides , C, G U respectively. Convert named vector. use similar code block iterate my_DNA code chunk calculate molecular weight.","code":"\n## define codon table as named vector\ncodons <- c(\"Gly\", \"Pro\", \"Lys\", \"Ser\")\nnames(codons) <- c(\"GGA\", \"CCU\", \"AAA\", \"AGU\")\n\nprint(codons)##   GGA   CCU   AAA   AGU \n## \"Gly\" \"Pro\" \"Lys\" \"Ser\"\n## the DNA to translate\nmy_DNA <- \"GGACCUAAAAGU\"\nmy_prot <- \"\"\n## iterate the DNA and take only every third position\nfor (i in seq(1, nchar(my_DNA), by=3)) {\n    codon <- substr(my_DNA, i, i+2);\n    my_prot <- paste(my_prot, codons[codon])\n}\nprint(my_prot)## [1] \" Gly Pro Lys Ser\"\nnuc_weights <- c(491.2, 467.2, 507.2, 482.2)"},{"path":"exercises.html","id":"lowry","chapter":"16 Exercises","heading":"16.4.4 Lowry","text":"Lowry method widely used spectroscopic method quantify protein amounts solutions. real Lowry results quantification proteins:\ncalibration curve made using BSA (bovine serum albumin) standard.\nconcentrations mg/ml:Note duplo measurements put one vector, subsequent pairs values. ’ll deal later.measured absorption values 750 nm (duplo measurements):[❋]Combine two vectors dataframe assign variable name dilution. add column names yet!B [❋]Now add appropriate column names: prot_conc absorption.C [❋]forgot include last data points (duplos):Generate data frame assigned variable df_temp data points. time, add appropriate column names creation data frame. sure use exactly column names.D [❋]Now add second data frame df_temp first data frame, name dilution, assign name dilution (thus overwriting original variable):E [❋❋]Generate new dataframe variable dilution, now duplo measurements side--side. , instead 2 now 4 columns. Follow steps get :First create dataframe even selecting even-numbered rows.create dataframe odd selecting odd-numbered rows.Finally, combine even odd one assign variable dilution_duplo.Hint: use subsetting TRUE FALSE vector cycling.F [❋❋]result dataframe two columns named prot_conc two columns named absorption. Delete second column named prot_conc (exact copy !) rename column names prot_conc, abs1 abs2.G [❋❋]Calculate mean two abs measurements add column named mean_abs:","code":"\nbsa_conc <- c(0,    0,  0.025,  0.025,  0.075,  0.075,  0.125,  0.125)\nOD750 <- c(0.063,   0.033,  0.16,   0.181,  0.346,  0.352,  0.491,  0.488)\nbsa_conc2 <- c(0.175,   0.175,  0.25,   0.25)\nOD750_2 <- c(0.597, 0.595,  0.743,  0.742)"},{"path":"exercises.html","id":"island-surfaces","chapter":"16 Exercises","heading":"16.4.5 Island surfaces","text":"build dataset named islands named numeric vector holding areas thousands square miles landmasses exceed 10,000 square miles.[❋❋]Convert dataframe named islands_df two columns: Island Surface. resulting dataframe rownames remove . correct::B [❋❋]Use function order() select top 3 landmasses.","code":"> islands_df\n                           Island  Area\nAfrica                     Africa 11506\nAntarctica             Antarctica  5500\nAsia                         Asia 16988> islands_df\n             Island  Area\n1            Africa 11506\n2        Antarctica  5500\n3              Asia 16988"},{"path":"exercises.html","id":"usarrests","chapter":"16 Exercises","heading":"16.4.6 USArrests","text":"USArrests dataset also one datasets included datasets package. info fifty states variables:’ll explore dataset questions.[❋]\nSelect row Montana without using row number directly.B [❋❋]\nSelect row highest Rape rate.C [❋❋]\nSelect row(s) Assault rate less ten times Murder rate.D [❋❋]\nConvert UrbanPop column factor, UrbanPop_f attach dataframe.\nUse cutoffs: “low”: < 60; “mid”: 60 <= 80; “high”: >= 80.Next, tabulate split.","code":"Murder arrests (per 100,000)\nAssault arrests (per 100,000)\nUrbanPop Percent urban population\nRape arrests (per 100,000)"},{"path":"exercises.html","id":"file-reading-practice","chapter":"16 Exercises","heading":"16.4.7 File reading practice","text":"Level: ❋❋files online folder github directory contain (simulated) gene-array data. dataset contains selection induced transcripts stimulus. columns represent:mRNA entryfold induction stimulusthe protein entry numberprotein length number amino acids corresponding NP entrythe protein family protein belongs tothe predicted cellular localizationWhatever contents file, always need address () questions:comment lines top?header line column names?column separator?quotes around character data?missing values encoded?numeric values encoded?type column?Also: read help read.table function carefully.Read contents file file_reading directory dataframe object assign variable name df. 15 different files practice file loading skills.don’t need download manually; simply use :Replace file number needed.","code":"\nread.table(file = \"https://raw.githubusercontent.com/MichielNoback/davur_ebook/main/data/file_reading/file01.txt\",\n           #more arguments\n           )"},{"path":"exercises.html","id":"basics-of-the-ggplot2-package","chapter":"16 Exercises","heading":"16.5 Basics of the ggplot2 package","text":"Plotting rulesWith plots, take care adhere rules regarding titles decorations. Tip: site Quick-R nice detailed information examples different plot types configuration. Especially section plotting helpful assignments.","code":""},{"path":"exercises.html","id":"trees","chapter":"16 Exercises","heading":"16.5.1 Trees","text":"Level: ❋❋\ntrees dataset datasets package, create scatter plot according constraints.x-axis: Heighty-axis: Girthsize plot symbol: Volumecolor plot symbol: darkgreena smoother without error marginsNB: specify aesthetics matters !extra practice convert values metric system first.","code":""},{"path":"exercises.html","id":"insect-sprays","chapter":"16 Exercises","heading":"16.5.2 Insect Sprays","text":"datasets package shipped R dataset called ?. Type ?InsectSprays get information .[❋]Create boxplot, splitting spray type.B [❋❋]Create jitter plot, splitting spray type. zero jittering y-axis little possible x-axis. use alpha parameter try find nice plot symbol.\n[Extra: Give spray different plot color]","code":""},{"path":"exercises.html","id":"pharmacokinetics","chapter":"16 Exercises","heading":"16.5.3 Pharmacokinetics","text":"Theoph dataset contains pharmacokinetics theophylline, anti-asthmatic drug theophylline. Twelve subjects given oral doses theophylline, serum concentrations measured 11 time points next 25 hours.[❋❋]Create line plot concentration time. different subjects get different linetype Dose represented color.B [❋❋]see, figure informative . Can improve using aesthetics? Hint: use group = Subject within aes geom_line().","code":""},{"path":"exercises.html","id":"usarrests-ii","chapter":"16 Exercises","heading":"16.5.4 USArrests (II)","text":"[❋❋]USArrests dataset, create scatterplot Murder depending Assault. points darkgreen. Add correct x- y-axis labels.\nAdd linear regression line without error margins, thick red line.B [❋❋]\nCreate histogram Assault variable overlay density plot darkblue.\nUse aes(y=..density..) histogram layer get density histogram instead count histogram.","code":""},{"path":"exercises.html","id":"orchard-sprays","chapter":"16 Exercises","heading":"16.5.5 Orchard Sprays","text":"[❋❋]OrchardSprays dataset represents experiment conducted assess potency various constituents orchard sprays repelling honeybees, using Latin square design.\nType ?OrchardSprays see details experiment.Create box plot decrease variable depending treatment variable. Add overlay actual points using jitter plot (darkred, jittering horizontal direction).B [❋❋]Create violin plot data, colorized treatment.","code":""},{"path":"exercises.html","id":"diauxic-growth","chapter":"16 Exercises","heading":"16.5.6 Diauxic growth","text":"1941, Jacques Monod discovered phenomenon diauxic growth bacteria (e.g. E. coli), resulting preference carbon substrate others, causing catabolite repression pathways less preferred substrates. See Wikipedia page details.Diauxic growth (figure wikipedia)data used generate figure original publication course’s data repository (https://github.com/MichielNoback/datasets/diauxic_growth). direct link data file https://raw.githubusercontent.com/MichielNoback/datasets/master/diauxic_growth/monod_diauxic_growth.csv.[❋❋]Download file, load attach variable diauxic. Next, tidy data long format three columns left: Time, Substrate OD.B [❋]Convert newly created Substrate variable factor nicer labels, .e. better suited human readingC [❋❋]Create line plot four growth curves within single panel. use stat_smooth() span = parameter line--point visualization.D [❋❋❋]Create multi-panel plot like one original publication.","code":""},{"path":"exercises.html","id":"virginia-death-rates","chapter":"16 Exercises","heading":"16.5.7 Virginia Death Rates","text":"datasets package shipped R dataset (matrix) called VADeaths. Type ?VADeaths get information . First convert matrix tibble (kind data frame) rownames real variable using chunk (study understand happens ):[❋❋❋]Pivot table long (tidy) format. generate dataframe four columns: Age Group, Habitat, Gender DeathRate.B [❋❋]Create bar chart age groups x-axis Rural/Urban Male/Female using side--side bars.","code":"\nlibrary(dplyr)\n## %>% is used to pipe results from one operation to the other, just like '|' in Linux.\nvirginia_death_rates <- as_tibble(VADeaths)\nvirginia_death_rates <- virginia_death_rates %>% \n    mutate(\"Age Group\" = factor(rownames(virginia_death_rates), ordered = TRUE)) %>% \n    select(`Age Group`, everything()) #reorder the columns"},{"path":"exercises.html","id":"global-temperature","chapter":"16 Exercises","heading":"16.5.8 Global temperature","text":"Maybe seen picture world temperature past 120 years media:global_heatmap_s.pngWe going work data well.\nglobal temperature data located folder global_temperature (see Data Repo).\ntwo data series file https://raw.githubusercontent.com/MichielNoback/datasets/master/global_temperature/annual.csv.\nStudy readme file folder find datasets.","code":""},{"path":"exercises.html","id":"create-a-scatter-and-line-plot","chapter":"16 Exercises","heading":"16.5.8.1 Create a scatter-and-line-plot","text":"Level: [❋❋]Create scatter--line graph series single plot. Annotate well labels title.\nOptionally, add smoother without error boundaries.","code":""},{"path":"exercises.html","id":"re-create-the-heatmap","chapter":"16 Exercises","heading":"16.5.8.2 Re-create the heatmap","text":"Level: [❋❋❋❋]try reproduce picture using geom_tile() function. Hint: use scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\") pass 1 value y mapping function. theme() function element_blank() can used extra tweaking.","code":""},{"path":"exercises.html","id":"extra-practice","chapter":"16 Exercises","heading":"16.5.8.3 Extra practice","text":"Level: [❋❋]extra practice, try answer questions well:warmest year?warmest year timelines agree upon?coldest decade?30-year moving average temperature?also monthly temperature file. Many explorations can carried one well.","code":""},{"path":"exercises.html","id":"investigate-new-visualization","chapter":"16 Exercises","heading":"16.5.9 Investigate new visualization","text":"Level: [❋❋❋]Go R graph Gallery browse different sections. select one visualization study -depth (excluding ones already demonstrated eBook). Work example one datasets either built-datasets R Datasets Repo course. can also choose another dataset. instance, Kaggle (https://www.kaggle.com/) UCI Machine Learning Repository (https://archive.ics.uci.edu/ml/) interesting datasets.Present visualization class, addressing topics:visualization named?purpose; appropriate use?appeal ?Show example R code, explain difficulties point caveats.","code":""},{"path":"exercises.html","id":"functions-ii","chapter":"16 Exercises","heading":"16.6 Functions (II)","text":"","code":""},{"path":"exercises.html","id":"cut","chapter":"16 Exercises","heading":"16.6.1 cut()","text":"Level: ❋❋’ll revisit USArrests dataset.Convert UrbanPop column factor, UrbanPop_f attach dataframe.\nUse cutoffs: “low”: < 60; “mid”: 60 <= 80; “high”: >= 80.Next, tabulate split.","code":""},{"path":"exercises.html","id":"quantile","chapter":"16 Exercises","heading":"16.6.2 quantile()","text":"[❋❋]Using quantile function, select bottom 10% states built-precip dataset.B [❋❋❋]Using quantile function, select infert dataset rows age variable 10% median (.e. 50% quantile).","code":""},{"path":"exercises.html","id":"flow-control-and-scripting-1","chapter":"16 Exercises","heading":"16.7 Flow control and scripting","text":"section serves exercises help improve function-writing skills.","code":""},{"path":"exercises.html","id":"illegal-reproductions","chapter":"16 Exercises","heading":"16.7.1 Illegal reproductions","text":"exercise, re-invent wheel statistical functions.","code":""},{"path":"exercises.html","id":"the-mean","chapter":"16 Exercises","heading":"The mean","text":"Level: ❋❋\nCreate function, my_mean(), duplicates R function mean(), .e. calculates returns mean vector numbers, without actually using mean().","code":""},{"path":"exercises.html","id":"standard-deviation","chapter":"16 Exercises","heading":"Standard deviation","text":"Level: ❋❋❋Create function, my_sd(), duplicates R function sd(), .e. calculates returns standard deviation vector numbers, without actually using sd().","code":""},{"path":"exercises.html","id":"maximum","chapter":"16 Exercises","heading":"Maximum","text":"Level: ❋❋❋Suppose random numbers:use set.seed() assures generated random numbers always , everyone runs , every time.Use loop /else flow control find largest number my_nums.\nuse build max() sort() functions.\nPut function name my_max demonstrate use.\nmay use build-max() function verify result.","code":"\nset.seed(123) \nmy_nums <- sample(10000, 1000)"},{"path":"exercises.html","id":"median","chapter":"16 Exercises","heading":"Median","text":"Level: ❋❋❋❋Create function, my_median(), duplicates R function median(), .e. calculates returns median vector numbers. actually bit harder might expect. Hint: use sort() function.","code":""},{"path":"exercises.html","id":"various-other-functions","chapter":"16 Exercises","heading":"16.7.2 Various other functions","text":"","code":""},{"path":"exercises.html","id":"find-match-locations","chapter":"16 Exercises","heading":"16.7.2.1 Find match locations","text":"Level: ❋❋❋Create function report match locations value given vector. Name where_is_it().\nUse () /else get solution, functions except c()., snippet return given expected reult","code":"\nx <- c(\"Pro\", \"Glu\", \"Lys\", \"Pro\", \"Ser\")\nwhere_is_it(x, \"Pro\")\n##expected:\n#[1] 1 4"},{"path":"exercises.html","id":"odd-and-even","chapter":"16 Exercises","heading":"Odd and even","text":"Level: ❋❋❋Create function, count_odd_even(), counts number even odd numbers input vector.\nreturn result named vector.\nmake use R base functions.","code":""},{"path":"exercises.html","id":"add-column-compared-to-mean","chapter":"16 Exercises","heading":"Add column compared to mean","text":"Level: ❋❋❋Create function accepts input:dataframea column name. column name refer numeric columnThe function return copy dataframe extra column attached. column name ‘compared_to_mean’ values “greater” (greater mean) “less” (less equal mean) compared indicated column. Apply check users’ input stop appropriate error message something right (dataframe, column exist, numeric column).","code":""},{"path":"exercises.html","id":"interquantile-ranges","chapter":"16 Exercises","heading":"Interquantile ranges","text":"Level: ❋❋❋Create function calculate custom “interquantile range”. function accept three arguments: numeric vector, lower quantile upper quantile. return difference (range) two quantile values. lower quantile default 0 higher 1, thus returning max(x) minus min(x). function therefore “signature”:Perform tests arguments make robust method: arguments numeric?test method, can compare interquantile_range(some_vector, 0.25, 0.75) IQR(some_vector) - .","code":"\ninterquantile_range <- function(x, lower = 0, higher = 100) {}"},{"path":"exercises.html","id":"vector-distance","chapter":"16 Exercises","heading":"Vector distance","text":"Level: ❋❋❋Create function, distance(p, q), calculate return Euclidean distance two vectors equal length. numeric vector can seen point multidimensional space. Euclidean distance defined \\[d(p, q) = \\sqrt{\\sum_{= 1}^{n}(q_i-p_i)^2}\\]\np q two vectors n length two vectors.\nfirst perform check whether two vectors equal length type numeric integer. , function abort appropriate error message.","code":""},{"path":"exercises.html","id":"other-distance-measures","chapter":"16 Exercises","heading":"Other distance measures","text":"Level: [❋❋❋]- ❋❋❋❋Extend function previous assignment way third argument accepted, method =, defaults “euclidean”. possible distance measures “Manhattan” (“city block” “taxicab”) [Challenge] Pearson correlation.Look equations Wikipedia place.","code":""},{"path":"exercises.html","id":"gc-percentage","chapter":"16 Exercises","heading":"G/C percentage","text":"Level: ❋❋❋❋Create function, GC_perc(), calculates returns GC percentage DNA RNA sequence. Accept input sequence flag -strict- indicating whether characters accepted core DNA/RNA (GATUC). strict = FALSE, percentage characters reported using warning() call. strict = TRUE, function terminate error message. Use stop() . strict default TRUE. NOTE, usage strict can complicate things, start core functionality!\ncan use strsplit() substr() get hold individual sequence characters.","code":""},{"path":"exercises.html","id":"tidying-dataframes-using-package-tidyr","chapter":"16 Exercises","heading":"16.8 Tidying dataframes using package tidyr","text":"","code":""},{"path":"exercises.html","id":"small-examples","chapter":"16 Exercises","heading":"16.8.1 Small examples","text":"data folder eBook contains three small csv files need tidying. Read file convert tidy format, data columns clean possible (e.g. “creatine_T0” “T0”).[❋]Tidy file untidy1.csv.B❋Tidy file untidy2.csv.C [❋❋]Tidy file untidy3.csv.","code":""},{"path":"exercises.html","id":"lung-cancer","chapter":"16 Exercises","heading":"16.8.2 Lung cancer","text":"R datasets package three related timeseries datasets relating lung cancer deaths. ldeaths, mdeaths fdeaths total, male female deaths respectively.convenience, original timeseries can converted dataframe using chunk .[❋❋]\ndatset “tidy” format. Can make tidy?B [❋❋❋]\nCreate line plot showing monthly mortality male, female totals. see trends /outliers , can explain ?\nNote: can create date column combining year month one column. Check .Date() function; use day number 1.C ❋❋❋\nCreate boxplot panel three types: female, male total. outliers? , can figure occurred, ?","code":"\nlung_cancer_deaths <- data.frame(year = rep(1974:1979, each = 12),\n                     month = rep(month.abb, times = 6),\n                     male = as.integer(mdeaths),\n                     female = as.integer(fdeaths),\n                     total = as.integer(ldeaths))\n\n#check\n#sum(lung_cancer_deaths$male_deaths + lung_cancer_deaths$female_deaths == lung_cancer_deaths$total_deaths) == nrow(lung_cancer_deaths)"},{"path":"exercises.html","id":"old-school-data-mangling","chapter":"16 Exercises","heading":"16.9 Old school data mangling","text":"section encounter exercises revolving around different flavors apply.","code":""},{"path":"exercises.html","id":"whale-selenium","chapter":"16 Exercises","heading":"16.9.1 Whale selenium","text":"course website Resources find link file whale_selenium.txt. download working directory manually use download.file() obtain . However, third way get contents without actually downloading local copy. can read directly using read.table() shown .Note: going load file many times probably better store local copy.[❋]\nReport means columns using apply().B [❋]\nReport standard deviation columns, using apply()C [❋❋]\nReport standard error mean columns, using apply() SEM calculated \\[\\frac{sd}{\\sqrt{n}}\\] \\(sd\\) sample standard deviation \\(n\\) number measurements. create function calculating statistic .D [❋❋]\nUsing apply(), calculate ratio \\(Se_{tooth} / Se_{liver}\\) attach whale_selenium dataframe column ratio. Create histogram ratio.E [❋❋]\nUsing print() paste(), report mean standard deviation ratio column, inline expression, e.g. expression embedded R markdown paragraph text.","code":"\nwhale_sel_url <- \"https://raw.githubusercontent.com/MichielNoback/davur1/gh-pages/exercises/data/whale_selenium.txt\"\nwhale_selenium <- read.table(whale_sel_url,\n    header = T,\n    row.names = 1)"},{"path":"exercises.html","id":"urine-properties","chapter":"16 Exercises","heading":"16.9.2 Urine properties","text":"urine specimens dataset contains readme.txt file data file (urine.csv; direct link: “https://raw.githubusercontent.com/MichielNoback/datasets/master/urine/urine.csv”). Study readme get idea data. Download file like :[❋❋]\nLoad data dataframe name urine.B [❋❋]\nConvert column r factor two levels: yes , give better name: ox_crystals.C [❋❋❋]\nUsing apply(), report mean standard deviation numeric columns . Give two decimal digits. Use named vector get output:D [❋❋]\nUsing aggregate, report mean numeric columns, split ox_crystals variable levels. variables seem likely candidates relation oxalate crystal formation.","code":"\nurine_file_name <- \"urine.csv\"\nurl <- paste0(\"https://raw.githubusercontent.com/MichielNoback/datasets/master/urine/\", urine_file_name)\nlocal_name <- paste0(\"../\", urine_file_name) #specifiy your own folder!\ndownload.file(url = url, destfile = local_name)     gravity   ph   osmo  cond   urea calc\nmean    1.02 6.03 615.04 20.90 266.41 4.14\nsd      0.01 0.72 238.25  7.95 131.25 3.26"},{"path":"exercises.html","id":"data-mangling-with-dplyr","chapter":"16 Exercises","heading":"16.10 Data mangling with dplyr","text":"","code":""},{"path":"exercises.html","id":"global-temperature-revisited","chapter":"16 Exercises","heading":"16.10.1 Global temperature revisited","text":"’re going look another version data. file can found . info data:Global-mean monthly, seasonal, annual means, 1880-present.\ndataset downlaoded june 15, 2023 https://data.giss.nasa.gov/gistemp/file contains monthly Global Hemispheric Monthly Means Zonal Annual Means.Columns:(see Readme repo)[❋]\nLoad data.B [❋❋]\nyears negative anomaly -0.40 summer season? Report years, vector, use dplyr function(s).C [❋❋]\ncoldest five years 1880?\nwarmest five years 1880?\n, give year temperature anomaly (annual), combine ten rows single dataframe.D [❋❋]\nrows spring season 0.2 higher summer season, select Year, spring summer.E [❋❋❋]\nSelect years 1970. Group dataset decades report per-decade average temperature anomaly four seasons globally.Create bar plot result: split color season (side--side) decade x-axis.F [❋❋❋❋]\nsingle warmest month? Give year, specific month whole year average.\none surprisingly difficult. Use filter(if_any()).","code":"Year, - year\nJan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec - individual months\nJ-D - whole year (jan-Dec)\nD-N - Dec-Nov (?)\nDJF - winter\nMAM - spring\nJJA - summer\nSON - fall"},{"path":"exercises.html","id":"pigs","chapter":"16 Exercises","heading":"16.10.2 Pigs","text":"look readme dataset.\ndatafile located .\ntry visualizations well![❋]\nLoad data.B [❋❋]\nSelect week 12 data pigs vitamin E dose 200 mg copper dose 175 mg/kg feed. Select columns Pig, Litter, Feed Weight order pigs weight (high low).C [❋❋]\nPrint experimental setup (combinations variables Vitamin E Copper)D [❋❋❋]\nSummarize average end weights different vitamin E doses, add number pigs group.E [❋❋❋]\nCalculate relative percentual weight gain timepoints pig, .e., percent difference subsequent timepoints. instance, gain 40 50 increase 25%.Extra: Create violin plot difference, split vitamin E dose copper.F [❋❋❋]\nCreate wide data representation, time points columns, one row per pig.","code":""},{"path":"exercises.html","id":"population-numbers","chapter":"16 Exercises","heading":"16.10.3 Population numbers","text":"population folder datasets repo contains two files. One , EDU_DEM.....csv contains population data countries world (data available). ’re going mangle explore data bit.\nBesides following exercises many, many questions ask dataset, visualizations created. insyance, countries age groups, years maximum growth, etc. Explore practice!\n, try visualizations well.[❋]\nLoad data.Start loading data dataframe called population.\nSince bit large, suggest first download local location.B [❋❋]\nClean . quite uninformative variables - variables one value NA.\nFind variables uninformative remove dataframe.C [❋❋❋]\ndataframe now , create report wide format total population numbers available years. , years now get column country single row.D [❋❋❋❋]\nNext, present format (wide), now “population change” instead total population.E [❋❋❋]\nCreate bar plot population numbers countries Western Europe across available years, split gender.F [❋❋❋❋]\nthree countries shown fastest relative growth rate, measured percentage change whole available time period (2005-2017) relative start, entire population, sexes combined?Extra practice: different age groups.","code":""},{"path":"exercises.html","id":"text-processing-with-regex","chapter":"16 Exercises","heading":"16.11 Text processing with regex","text":"","code":""},{"path":"exercises.html","id":"restriction-enzymes-1","chapter":"16 Exercises","heading":"16.11.1 Restriction enzymes","text":"[❋❋]\nrestriction enzyme PacI recognition sequence “TTAATTAA”. Define (least) three alternative regex patterns catch sites.B [❋❋]\nrestriction enzyme SfiI recognition sequence “GGCCNNNNNGGCC”. Define (least) three alternative regex patterns catch sites.","code":""},{"path":"exercises.html","id":"prosite-patterns","chapter":"16 Exercises","heading":"16.11.2 Prosite Patterns","text":"[❋❋]\nProsite pattern PS00211 (ABC-transporter-1; https://prosite.expasy.org/PS00211) pattern:\n“[LIVMFYC]-[SA]-[SAPGLVFYKQH]-G-[DENQMW]-[KRQASPCLIMFW]-[KRNQSTAVM]-[KRACLVM]-[LIVMFYPAN]-{PHY}-[LIVMFW]-[SAGCLIVP]-{FYWHP}-{KRHP}-[LIVMFYWSTA].”\nTranslate regex pattern. Info syntax : https://prosite.expasy.org/prosuser.html#conv_paB [❋❋]\nProsite pattern PS00018 (EF-hand calcium-binding domain; https://prosite.expasy.org/PS00018) pattern:\n“D-{W}-[DNS]-{ILVFYW}-[DENSTG]-[DNQGHRK]-{GP}-[LIVMC]-[DENQSTAGC]-x(2)- [DE]-[LIVMFYW].”\nTranslate regex pattern.exercise simply browsing Prosite. Test pattern fetching proteins referred within Prosite pattern details page.","code":""},{"path":"exercises.html","id":"fasta-headers","chapter":"16 Exercises","heading":"16.11.3 Fasta Headers","text":"fasta sequence format common sequence file format used molecular biology.\nlooks like (omitted actual protein sequences better representation):can see several distinct elements within Fasta header description line actual sequence: one database identification strings, protein description name organism name. Study format - going extract elements fasta headers using stringr package. Install don’t yet.small example:Function str_extract() simply extracts exact match regex (shown ). hand, function str_match() supports grouping capture bounding parentheses:Thus, set parentheses yield column returned matrix. Simply use column index get result set:Now, given fasta headers ./data/fasta_headers.txt\ncan simply load character vector using readLines(), extract following.[❋❋❋]\n- Extract complete organism names.\n- Extract species-level organism names (omitting subspecies strains etc).B [❋❋❋]\nExtract first database identifiers. header element >gi|224017144|gb|EEF75156.1| extract gi|224017144C [❋❋❋]\nExtract protein names/descriptions.","code":">gi|21595364|gb|AAH32336.1| FHIT protein [Homo sapiens]\nMSFRFGQHLIK...ALRVYFQ\n>gi|15215093|gb|AAH12662.1| Fhit protein [Mus musculus]\nMSFRFGQHLIK...RVYFQA\n>gi|151554847|gb|AAI47994.1| FHIT protein [Bos taurus]\nMSFRFGQHLIK...LRVYFQ\nlibrary(stringr)\nhinfII_re <- \"GA[GATC]TC\"\nsequences <- c(\"GGGAATCC\", \"TCGATTCGC\", \"ACGAGTCTA\")\nstr_extract(string = sequences,\n            pattern = hinfII_re)## [1] \"GAATC\" \"GATTC\" \"GAGTC\"\nphones <- c(\"+31-6-23415239\", \"+49-51-55523146\", \"+31-50-5956566\")\nphones_re <- \"\\\\+(\\\\d{2})-(\\\\d{1,2})\" #matching country codes and area codes\nmatches <- str_match(phones, phones_re)\nmatches##      [,1]     [,2] [,3]\n## [1,] \"+31-6\"  \"31\" \"6\" \n## [2,] \"+49-51\" \"49\" \"51\"\n## [3,] \"+31-50\" \"31\" \"50\"\nmatches[, 2] ##the country codes## [1] \"31\" \"49\" \"31\""},{"path":"exercises.html","id":"package-ggplot2-revisited","chapter":"16 Exercises","heading":"16.12 Package ggplot2 revisited","text":"","code":""},{"path":"exercises.html","id":"eye-colors","chapter":"16 Exercises","heading":"16.12.1 Eye colors","text":"exercise also presents data mangling challenges,first year students collected eye color data small research project investigating eye color frequencies different locations, also assess reliability eye color inspection.data looks like :Columns Identifier, sex age obvious. next 8 columns represent Left Right eye colors obesrved subject different investigators (OK9308, OK2193, OK5609, OK8705).[❋❋]Load data file data/eyecolor_data.csv using readr package. take care columns correct data type using col_types argument.B [❋❋❋]\nRecode data English names used:bruin == brown\nhazel == hazel\nblauw == blue\ngroen == greenHint: use across().C [❋❋❋❋]\nAdd column majority gives eye color based majority vote determined colors, NA majority can established. instance, subject A002 get hazel.succeed , can skip ahead next part proceed .D [❋❋❋]Pivot tibble becomes tidy dataset.E [❋❋❋]\nCreate balloon plot eye colors, split sex (challenge!) left/right.\nrequires first create contingency table.","code":"Identifier,sex,age,L_OK9308,R_OK9308,L_OK2193,R_OK2193,L_OK5609,R_OK5609,L_OK8705,R_OK8705\nA001,M,20,blauw,blauw,blauw,blauw,blauw,blauw,blauw,blauw\nA002,F,19,hazel,hazel,hazel,hazel,hazel,hazel,groen,groen\nA003,F,22,bruin,bruin,bruin,bruin,bruin,bruin,bruin,bruin"},{"path":"exercises.html","id":"bacterial-growth","chapter":"16 Exercises","heading":"16.12.2 Bacterial growth","text":"file data/growth-exp-data.csv contains growth data bacterial growth experiment spans two consecutive days.[❋❋]Read data using read.table.B [❋❋]Combine date time date-time column type S3: POSIXct.C [❋❋❋]Create column elapsed_time time start experiment, hours.\nStudy lubridate vignette .D [❋❋❋]\nCreate line plot two y-axes; one OD600 one glucose. x-axis elapsed time plotted.","code":""},{"path":"exercise-solutions.html","id":"exercise-solutions","chapter":"17 Exercise solutions","heading":"17 Exercise solutions","text":"","code":""},{"path":"exercise-solutions.html","id":"getting-started-3","chapter":"17 Exercise solutions","heading":"17.1 Getting started","text":"","code":""},{"path":"exercise-solutions.html","id":"install-the-tools-1","chapter":"17 Exercise solutions","heading":"17.1.1 Install the tools","text":"solution one.","code":""},{"path":"exercise-solutions.html","id":"the-toolbox-1","chapter":"17 Exercise solutions","heading":"17.2 The toolbox","text":"","code":""},{"path":"exercise-solutions.html","id":"customize-rstudio-1","chapter":"17 Exercise solutions","heading":"17.2.1 Customize RStudio","text":"solution one.","code":""},{"path":"exercise-solutions.html","id":"résumé","chapter":"17 Exercise solutions","heading":"17.2.2 Résumé","text":"solution one.","code":""},{"path":"exercise-solutions.html","id":"basic-r-2","chapter":"17 Exercise solutions","heading":"17.3 Basic R","text":"","code":""},{"path":"exercise-solutions.html","id":"math-in-the-console-1","chapter":"17 Exercise solutions","heading":"17.3.1 Math in the console","text":"","code":"\n31 + 11\n66 - 24\n126 / 3\n12^2 \n256**0.5\n(3 * (4 + 8^0.5))/(5^3)## [1] 42\n## [1] 42\n## [1] 42\n## [1] 144\n## [1] 16\n## [1] 0.164"},{"path":"exercise-solutions.html","id":"functions-i-1","chapter":"17 Exercise solutions","heading":"17.3.2 Functions (I)","text":"\nAnswer: paste() paste0(). difference lies separator, empty string paste0() one space paste(). Moreover, separator can configured paste() using sep = parameter.B\nAnswer: abs() returns absolute value. Simply put, number minus sign removed present.C\nAnswer: combines (concatenates) arguments single vector. first example creates “character” (text data) second “numeric” (numeric data).DEFG","code":"\npaste(\"welcome \", \"to \", \"R\", sep = \"\")\npaste0(\"welcome \", \"to \", \"R\")\nabs(-20)## [1] 20\nabs(20)## [1] 20\nc(1, 2, \"a\")## [1] \"1\" \"2\" \"a\"\nclass(c(1, 2, \"a\"))## [1] \"character\"\nc(1, 2, 3)## [1] 1 2 3\nclass(c(1, 2, 3))## [1] \"numeric\"\n#install it. Note the quotes\ninstall.packages(\"RColorBrewer\")\n#load it into your session. Note the absence of quotes\nlibrary(RColorBrewer)\nceiling(numberz)\ntrunc(numberz) # or signif(numberz, 3)\nround(numberz, 3)\nfloor(numberz)\nstrsplit(names, \" \")\nunique(birds)"},{"path":"exercise-solutions.html","id":"variables-2","chapter":"17 Exercise solutions","heading":"17.3.3 Variables","text":"","code":"\nx <- 20\ny <- 10\nz <- 3\n\nx + y\nx^z\n#OR\n#x**z\nq <- x * y * z\nsqrt(q)\nq/pi\nlog10(x * y)"},{"path":"exercise-solutions.html","id":"vectors-2","chapter":"17 Exercise solutions","heading":"17.3.4 Vectors","text":"","code":""},{"path":"exercise-solutions.html","id":"circles-1","chapter":"17 Exercise solutions","heading":"Circles","text":"circumference circle \\(2\\pi\\cdot r\\), surface \\(4\\pi \\cdot r^2\\) volume \\(4/3 \\pi\\cdot r^3\\).\nGiven vector circle radiuses,\nCalculate cirumference.B\nCalculate surface.C\nCalculate volume.","code":"\nradiuses <- c(0, 1, 2, pi, 4)\n2 * pi * radiuses\n4 * pi * radiuses^2\n4/3 * pi * radiuses^3"},{"path":"exercise-solutions.html","id":"creating-vectors-2","chapter":"17 Exercise solutions","heading":"Creating vectors","text":"Create following vectors, efficiently possible. functions rep(), seq() paste0() colon operator : can used, combination.[1] 1 2 5 1 2 5B[1] 9 9 9 8 8 8 7 7 7 6 6 6 5 5 5C[1] 1 1 1 4 4 4 9 9 9 1 1 1 4 4 4 9 9 9D[1] \"1a\" \"2b\" \"3c\" \"4d\" \"5e\" \"1a\" \"2b\" \"3c\" \"4d\" \"5e\"E[1] \"0z\"   \"0.2y\" \"0.4x\" \"0.6w\" \"0.8v\" \"1u\"F[1] \"505\" \"404\" \"303\" \"202\" \"101\" \"000\"G [Challenge][1] \"0.5A5.0\" \"0.4B4.0\" \"0.3C3.0\" \"0.2D2.0\" \"0.1E1.0\"","code":"\nrep(c(1, 2, 5), times = 2)\nrep(9:5, each = 3)\nrep(c(1, 4, 9), times = 2, each = 3)\nrep(paste0(1:5, letters[1:5]), times = 2)\npaste0(seq(from = 0, to = 1, length.out = 6), letters[26:21])\npaste0(5:0, 0, 5:0)\npaste0(seq(from = 0.5, to = 0.1, by = -0.1),  LETTERS[1:5], 5:1, \".0\")"},{"path":"exercise-solutions.html","id":"complex-datatypes-1","chapter":"17 Exercise solutions","heading":"17.4 Complex datatypes","text":"","code":""},{"path":"exercise-solutions.html","id":"creating-factors-1","chapter":"17 Exercise solutions","heading":"17.4.1 Creating factors","text":"AB","code":"\nanimal_risk <- c(2, 4, 1, 1, 2, 4, 1, 4, 1, 1, 2, 1)\nanimal_risk_factor <- factor(x = animal_risk,\n                             levels = c(1, 2, 3, 4),\n                             labels = c(\"harmless\", \"risky\", \"dangerous\", \"deadly\"),\n                             ordered = TRUE)\nset.seed(1234)\nwealth_male <- sample(x = letters[1:4], \n                 size = 1000,\n                 replace= TRUE, \n                 prob = c(0.7, 0.17, 0.12, 0.01))\nwealth_female <- sample(x = letters[1:4], \n                 size = 1000,\n                 replace= TRUE, \n                 prob = c(0.8, 0.15, 0.497, 0.003))\n\nwealth_labels <- c(\"poor\", \"middle class\", \"wealthy\", \"rich\")\n\nwealth_male_f <- factor(x = wealth_male,\n                        levels = letters[1:4],\n                        labels = wealth_labels,\n                        ordered = TRUE)\n\nwealth_female_f <- factor(x = wealth_female,\n                        levels = letters[1:4],\n                        labels = wealth_labels,\n                        ordered = TRUE)\n\n#combine\nwealth_all_f <- c(wealth_male_f, wealth_female_f)\n\nprop.table(table(wealth_all_f)) * 100## wealth_all_f\n##         poor middle class      wealthy         rich \n##        63.65        12.45        23.35         0.55"},{"path":"exercise-solutions.html","id":"list-actions-1","chapter":"17 Exercise solutions","heading":"17.4.2 List actions","text":"ABCDE","code":"\nhouse_admin[1]\nhouse_admin[2]\n#OR\nhouse_admin$Rose\nhouse_admin[1:2]\nhouse_admin$Mike$cooking\n#OR\nhouse_admin$Mike[[1]]\n#OR\nhouse_admin[[3]][[\"cooking\"]]\n#MORE POSSIBILITIES\nhouse_admin$John$tasks[2]\n#MANY MORE POSSIBILITIES"},{"path":"exercise-solutions.html","id":"named-vectors-1","chapter":"17 Exercise solutions","heading":"17.4.3 Named vectors","text":"AB","code":"\ncodons <- c(\"G\", \"P\", \"K\", \"S\")\nnames(codons) <- c(\"GGA\", \"CCU\", \"AAA\", \"AGU\")\n\nmy_DNA <- \"GGACCUAAAAGU\"\nmy_prot <- \"\"\nfor (i in seq(from = 1, to = nchar(my_DNA), by = 3)) {\n        codon <- substr(my_DNA, i, i+2)\n        my_prot <- paste0(my_prot, codons[codon])\n}\nprint(my_prot)## [1] \"GPKS\"\nnuc_weights <- c(491.2, 467.2, 507.2, 482.2)\nnames(nuc_weights) <- c('A', 'C', 'G', 'U')\n\nmol_weight <- 0\nfor (i in 1:nchar(my_DNA)) {\n        nuc <- substr(my_DNA, i, i);\n        print(nuc)\n        mol_weight <- mol_weight + nuc_weights[nuc]\n}\nmol_weight"},{"path":"exercise-solutions.html","id":"lowry-1","chapter":"17 Exercise solutions","heading":"17.4.4 Lowry","text":"ABCDEFG{rlowry-duplo-mean-, eval = FALSE} dilution_duplo$mean <- (dilution_duplo$abs1 + dilution_duplo$abs2) / 2 dilution_duplo","code":"\nbsa_conc <- c(0,    0,  0.025,  0.025,  0.075,  0.075,  0.125,  0.125)\nOD750 <- c(0.063,   0.033,  0.16,   0.181,  0.346,  0.352,  0.491,  0.488)\ndilution <- data.frame(bsa_conc, OD750)\nnames(dilution) <- c(\"prot_conc\", \"absorption\")\nbsa_conc2 <- c(0.175,   0.175,  0.25,   0.25)\nOD750_2 <- c(0.597, 0.595,  0.743,  0.742)\ndf_temp <- data.frame(\"prot_conc\" = bsa_conc2,\n                      \"absorption\" = OD750_2)\ndilution <- rbind(dilution, df_temp)\neven <- dilution[c(T, F), ]\nodd <- dilution[c(F, T), ]\ndilution_duplo <- cbind(odd, even)\ndilution_duplo\ndilution_duplo[, 3] <- NULL\nnames(dilution_duplo) <- c(\"prot_conc\", \"abs1\", \"abs2\")\ndilution_duplo"},{"path":"exercise-solutions.html","id":"island-surfaces-1","chapter":"17 Exercise solutions","heading":"17.4.5 Island surfaces","text":"AB","code":"\nislands_df <- data.frame(Island = names(islands),\n                        Area = islands)\nrownames(islands_df) <- NULL\nislands_df\nislands_df[order(islands_df$Area, decreasing = TRUE)[1:3], ]\n#OR\nislands_df[order(islands_df$Area, decreasing = TRUE), ][1:3,]"},{"path":"exercise-solutions.html","id":"usarrests-1","chapter":"17 Exercise solutions","heading":"17.4.6 USArrests","text":"USArrests dataset also one datasets included datasets package. info fifty states variables:’ll explore dataset questions.ABC","code":"Murder arrests (per 100,000)\nAssault arrests (per 100,000)\nUrbanPop Percent urban population\nRape arrests (per 100,000)\nUSArrests[rownames(USArrests) == \"Montana\", ]\nUSArrests[USArrests$Rape == max(USArrests$Rape), ]\nUSArrests[USArrests$Assault < USArrests$Murder * 10, ]"},{"path":"exercise-solutions.html","id":"file-reading-practice-1","chapter":"17 Exercise solutions","heading":"17.4.7 File reading practice","text":"File 01File 02File 03File 04File 05File 06File 07File 08(files, solutions omitted.)","code":"\nmy_dir <- \"data/file_reading\"\nmy_file <- \"file01.txt\"\nmy_path <- paste0(my_dir, \"/\", my_file)\nmy_data <- read.table(\n    my_path,\n    comment.char = \"#\",\n    header = T,\n    sep = \",\",\n    dec = \".\",\n    na.strings = \"ND\",\n    as.is = c(1, 3))\nmy_file <- \"file02.txt\"\nmy_path <- paste0(my_dir, \"/\", my_file)\nmy_data <- read.table(\n    my_path,\n    comment.char = \"$\",\n    header = T,\n    sep = \"\\t\",\n    dec = \",\",\n    na.strings = \"?\",\n    as.is = c(1, 3)\n)\nmy_file <- \"file03.txt\"\nmy_path <- paste0(my_dir, \"/\", my_file)\nmy_data <- read.table(\n    my_path,\n    header = T,\n    sep = \";\",\n    dec = \".\",\n    na.strings = \"ND\",\n    as.is = c(1, 3)\n)\nmy_file <- \"file04.txt\"\nmy_path <- paste0(my_dir, \"/\", my_file)\nmy_data <- read.table(\n    my_path,\n    header = T,\n    sep = \"\\t\",\n    dec = \",\",\n    na.strings = \"no data\",\n    as.is = c(1, 3)\n)\nmy_file <- \"file05.txt\"\nmy_path <- paste0(my_dir, \"/\", my_file)\nmy_data <- read.table(\n    my_path,\n    comment.char = \"#\",\n    header = T,\n    sep = \";\",\n    dec = \".\",\n    na.strings = \"ND\",\n    as.is = c(1, 3)\n)\nmy_file <- \"file06.txt\"\nmy_path <- paste0(my_dir, \"/\", my_file)\nmy_data <- read.table(\n    my_path,\n    comment.char = \"#\",\n    header = T,\n    sep = \",\",\n    dec = \".\",\n    na.strings = \"-\",\n    as.is = c(1, 3))\nmy_data\nmy_file <- \"file07.txt\"\nmy_path <- paste0(my_dir, \"/\", my_file)\nmy_data <- read.table(\n    my_path,\n    comment.char = \"#\",\n    header = F,\n    sep = \";\",\n    dec = \".\",\n    na.strings = \"-\",\n    as.is = c(1, 3))\nmy_file <- \"file08.txt\"\nmy_path <- paste0(my_dir, \"/\", my_file)\nmy_data <- read.table(\n    my_path,\n    comment.char = \"@\",\n    header = T,\n    sep = \";\",\n    dec = \".\",\n    na.strings = \"ND\",\n    as.is = c(1, 3))"},{"path":"exercise-solutions.html","id":"basics-of-the-ggplot2-package-1","chapter":"17 Exercise solutions","heading":"17.5 Basics of the ggplot2 package","text":"","code":""},{"path":"exercise-solutions.html","id":"trees-1","chapter":"17 Exercise solutions","heading":"17.5.1 Trees","text":"trees dataset datasets package, create scatter plot according constraints.x-axis: Heighty-axis: Girthsize plot symbol: Volumecolor plot symbol: darkgreena smoother without error marginsNB: specify aesthetics matters !extra practice convert values metric system first.","code":"\nggplot(data = trees,\n       mapping = aes(x = Height, y = Girth)) +\n  geom_point(aes(size = Volume), color = \"darkgreen\") +\n  geom_smooth(method = \"loess\", se = FALSE, formula = y~x) +\n  labs(x = \"Height (ft)\", y = \"Girth (inches)\")"},{"path":"exercise-solutions.html","id":"insect-sprays-1","chapter":"17 Exercise solutions","heading":"17.5.2 Insect Sprays","text":"datasets package shipped R dataset called ?. Type ?InsectSprays get information .[❋]\nFigure 17.1: counts insects agricultural experimental units treated different insecticides\nB [❋❋]\nFigure 17.2: counts insects agricultural experimental units treated different insecticides\n","code":"\nggplot(data = InsectSprays, \n       mapping = aes(x = spray, y = count)) +\n    geom_boxplot() +\n    ylab(\"Insect count\") +\n    xlab(\"Insect spray\")\nggplot(data = InsectSprays, \n       mapping = aes(x = spray, y = count, color = spray)) +\n    geom_jitter(height = 0, width = 0.1, shape = 18, size = 2, alpha = 0.7) +\n    ylab(\"Insect count\") +\n    xlab(\"Insect spray\")"},{"path":"exercise-solutions.html","id":"pharmacokinetics-1","chapter":"17 Exercise solutions","heading":"17.5.3 Pharmacokinetics","text":"Theoph dataset contains pharmacokinetics theophylline, anti-asthmatic drug theophylline. Twelve subjects given oral doses theophylline, serum concentrations measured 11 time points next 25 hours.AB(Many solutions possible)","code":"\nggplot(data = Theoph,\n       mapping = aes(x = Time, y = conc, color = Dose, linetype = Subject)) +\n  geom_line() +\n  labs(x = \"Time (h)\", y = \"Concentration (mg/l)\")\nggplot(data = Theoph,\n       mapping = aes(x = Time, y = conc)) +\n  geom_line(aes(group = Subject, color = Dose)) +\n  scale_color_gradient(low = \"green\", high = \"red\") +\n  labs(x = \"Time (h)\", y = \"Concentration (mg/l)\") +\n  theme_minimal()"},{"path":"exercise-solutions.html","id":"usarrests-ii-1","chapter":"17 Exercise solutions","heading":"17.5.4 USArrests (II)","text":"AB","code":"\nggplot(data = USArrests,\n       mapping = aes(x = Assault,\n                     y = Murder)) +\n  geom_point(color = \"darkgreen\") +\n  geom_smooth(method = \"lm\", formula = y~x, se = FALSE, color = \"darkred\") +\n  labs(x = \"Assault arrests (per 100,000)\", y = \"Murder arrests (per 100,000)\")\nscale <- 1\nggplot(data = USArrests,\n       mapping = aes(x = Assault)) +\n  geom_histogram(aes(y=..density..), fill = \"lightblue\", color = \"black\", bins = 30) +\n  geom_density(color = \"darkblue\") +\n  #scale_y_continuous(sec.axis = sec_axis(~ . * scale, name=\"Assault prob\")) +\n  labs(x = \"Assault arrests (per 100,000)\")## Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\n## ℹ Please use `after_stat(density)` instead.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."},{"path":"exercise-solutions.html","id":"orchard-sprays-1","chapter":"17 Exercise solutions","heading":"17.5.5 Orchard Sprays","text":"AB","code":"\nggplot(data = OrchardSprays,\n       mapping = aes(x = treatment, y = decrease)) +\n  geom_boxplot() +\n  geom_jitter(color = \"darkred\", width = 0.2, alpha = 0.7)\nggplot(data = OrchardSprays,\n       mapping = aes(x = treatment, y = decrease)) +\n  geom_violin(aes(fill=treatment))"},{"path":"exercise-solutions.html","id":"diauxic-growth-1","chapter":"17 Exercise solutions","heading":"17.5.6 Diauxic growth","text":"[❋❋]B [❋]C [❋❋]Create line plot four growth curves within single graph.\nFigure 17.3: Monod’s Diauxic shift experiment.\nD [❋❋❋]\nFigure 17.4: Monod’s Diauxic shift experiment.\n","code":"\nremote <- \"https://raw.githubusercontent.com/MichielNoback/datasets/master/diauxic_growth/monod_diauxic_growth.csv\"\n#local <- \"../diauxic.csv\"\n#download.file(url = remote, destfile = local)\ndiauxic <- read.table(remote, sep = \";\", header = T)\ndiauxic <- pivot_longer(data = diauxic,\n                        cols = -1,\n                        names_to = \"Substrate\",\n                        values_to = \"OD\")\ndiauxic$Substrate <- factor(diauxic$Substrate, \n       levels = c(\"GlucMann\", \"GlucXyl\", \"GlucArab\", \"GlucRham\"), \n       labels = c(\"Glucose Mannose\", \"Glucose Xylose\", \"Glucose Arabinose\", \"Glucose Rhamnose\"))\nggplot(data = diauxic,\n       mapping = aes(x = Time, y = OD, color = Substrate)) +\n    geom_point() +\n    stat_smooth(method = \"loess\", se = FALSE, span = 0.3) +\n    theme_bw()## `geom_smooth()` using formula = 'y ~ x'\nggplot(data = diauxic,\n       mapping = aes(x = Time, y = OD)) +\n    geom_point() +\n    stat_smooth(method = \"loess\", se = FALSE, span = 0.3) +\n    facet_wrap(. ~ Substrate, nrow = 2) +\n    theme_bw()## `geom_smooth()` using formula = 'y ~ x'"},{"path":"exercise-solutions.html","id":"virginia-death-rates-1","chapter":"17 Exercise solutions","heading":"17.5.7 Virginia Death Rates","text":"(❋❋❋)Pivot table long (tidy) format. generate dataframe four columns: Age Group, Habitat, Gender DeathRate.B (❋❋)\nFigure 17.5: Virginia Death rates\n","code":"\nlibrary(dplyr)\n## %>% is used to pipe results from one operation to the other, just like '|' in Linux.\nvirginia_death_rates <- as_tibble(VADeaths)\nvirginia_death_rates <- virginia_death_rates %>% \n    mutate(\"Age Group\" = factor(rownames(virginia_death_rates), ordered = TRUE)) %>% \n    select(`Age Group`, everything()) #reorder the columns\nvirginia_death_rates <- virginia_death_rates %>% pivot_longer(cols = -1, \n                 names_to = c(\"Habitat\", \"Gender\"), \n                 names_sep = \" \", \n                 values_to = \"DeathRate\")\nggplot(data = virginia_death_rates, aes(Gender)) +\n    geom_bar(aes(weight = DeathRate, fill = Habitat), position = \"dodge\")"},{"path":"exercise-solutions.html","id":"global-temperature-1","chapter":"17 Exercise solutions","heading":"17.5.8 Global temperature","text":"Load data.","code":"\nremote_file <- \"https://raw.githubusercontent.com/MichielNoback/datasets/master/global_temperature/annual.csv\"\nglobal_temp <- read.table(remote_file,\n                          header = TRUE,\n                          sep = \",\")"},{"path":"exercise-solutions.html","id":"create-a-scatter-and-line-plot-1","chapter":"17 Exercise solutions","heading":"17.5.8.1 Create a scatter-and-line-plot [❋❋]","text":"\nFigure 17.6: Global temperature anomalies\n","code":"\nggplot(data = global_temp,\n       mapping = aes(x = Year, y = Mean, color = Source)) +\n    geom_point(size = 0.5) +\n    geom_line() +\n    geom_smooth(se = FALSE, method = \"loess\", formula = 'y ~ x') +\n    theme_bw()"},{"path":"exercise-solutions.html","id":"re-create-the-heatmap-1","chapter":"17 Exercise solutions","heading":"17.5.8.2 Re-create the heatmap [❋❋❋]","text":"\nFigure 17.7: Global temperature anomalies\nNote: rescaling temperature 0 1 may yield even better results.","code":"\nggplot(data = global_temp[global_temp$Source == \"GCAG\", ],\n       mapping = aes(x = Year, y = 1)) +\n    geom_tile(aes(fill = Mean), colour = \"white\") + \n    scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\") +\n    theme_bw() +\n    theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.title.y = element_blank())"},{"path":"exercise-solutions.html","id":"extra-practice-1","chapter":"17 Exercise solutions","heading":"17.5.8.3 Extra practice","text":"Level: [❋❋]solutions one.","code":""},{"path":"exercise-solutions.html","id":"investigate-new-visualization-1","chapter":"17 Exercise solutions","heading":"17.5.9 Investigate new visualization","text":"**Level: ❋❋assignment solution course. included solely keep numbering consistent assignment chapters.","code":""},{"path":"exercise-solutions.html","id":"functions-ii-1","chapter":"17 Exercise solutions","heading":"17.6 Functions (II)","text":"","code":""},{"path":"exercise-solutions.html","id":"cut-1","chapter":"17 Exercise solutions","heading":"17.6.1 cut()","text":"","code":"\nUSArrests$UrbanPop_f <- cut(USArrests$UrbanPop, \n                  breaks = c(0, 60, 80, 100),\n                  labels = c(\"low\", \"mid\", \"high\"),\n                  right = FALSE)\n\ntable(USArrests$UrbanPop_f)"},{"path":"exercise-solutions.html","id":"quantile-1","chapter":"17 Exercise solutions","heading":"17.6.2 quantile()","text":"AB","code":"\nprecip[precip < quantile(precip, probs = 0.1)]##     Phoenix Los Angeles      Denver       Boise        Reno Albuquerque \n##         7.0        14.0        13.0        11.5         7.2         7.8 \n##     El Paso \n##         7.8\nsel_range <- quantile(infert$age, probs = c(0.4, 0.6))\ninfert[infert$age > sel_range[\"40%\"] & infert$age < sel_range[\"60%\"], ]"},{"path":"exercise-solutions.html","id":"flow-control-and-scripting-2","chapter":"17 Exercise solutions","heading":"17.7 Flow control and scripting","text":"","code":""},{"path":"exercise-solutions.html","id":"illegal-reproductions-1","chapter":"17 Exercise solutions","heading":"17.7.1 Illegal reproductions","text":"","code":""},{"path":"exercise-solutions.html","id":"the-mean-1","chapter":"17 Exercise solutions","heading":"The mean","text":"","code":"\nmy_mean <- function(x) {\n        sum(x, na.rm = T) / length(x)\n}"},{"path":"exercise-solutions.html","id":"standard-deviation-1","chapter":"17 Exercise solutions","heading":"Standard deviation","text":"","code":"\nmy_sd <- function(x) {\n        sqrt(sum((x - mean(x))^2)/(length(x)-1))\n}"},{"path":"exercise-solutions.html","id":"maximum-1","chapter":"17 Exercise solutions","heading":"Maximum","text":"","code":"\nset.seed(123) \nmy_nums <- sample(10000, 1000)\nmy_max <- function(x) {\n    max_val <- 0\n    for (i in my_nums) {\n        if (i > max_val) {\n            max_val = i\n        }\n    }\n    return(max_val)\n}"},{"path":"exercise-solutions.html","id":"median-1","chapter":"17 Exercise solutions","heading":"Median","text":"","code":"\nmy_median <- function(x) {\n        sorted <- sort(x)\n        if(length(x) %% 2 == 1) {\n                #uneven length\n                my_median <- sorted[ceiling(length(x)/2)]\n        } else {\n                my_median <- (sorted[length(x)/2] + sorted[(length(x)/2)+1]) / 2\n        }\n        return(my_median)\n}"},{"path":"exercise-solutions.html","id":"various-other-functions-1","chapter":"17 Exercise solutions","heading":"17.7.2 Various other functions","text":"","code":""},{"path":"exercise-solutions.html","id":"find-match-locations-1","chapter":"17 Exercise solutions","heading":"Find match locations","text":"","code":"\nwhere_is_it <- function(x, look_for) {\n    found <- integer(0)\n    for (i in 1:length(x)) {\n        elmnt <- x[i]\n        if (elmnt == look_for) {\n            found <- c(found, i)\n        }\n    }\n    return(found)\n}\nx <- c(\"Pro\", \"Glu\", \"Lys\", \"Pro\", \"Ser\")\nwhere_is_it(x, \"Pro\")\n##expected:\n#[1] 1 4"},{"path":"exercise-solutions.html","id":"odd-and-even-1","chapter":"17 Exercise solutions","heading":"Odd and even","text":"","code":"\ncount_odd_even <- function(x) {\n    evens <- sum(x %% 2 == 0)\n    odds <- sum(x %% 2 == 1)\n    #OR, more efficient\n    #odds <- length(x) - evens\n    tmp <- c(even = evens, odd = odds)\n    return(tmp)\n}\ncount_odd_even(c(1,2,3,4,5,5))"},{"path":"exercise-solutions.html","id":"add-column-compared-to-mean-1","chapter":"17 Exercise solutions","heading":"Add column compared to mean","text":"","code":"\nadd_compared_to_mean <- function (df, name) {\n    if (! is.data.frame(df)) {\n        stop(paste0(\"'\", df, \"' is not a dataframe.\"))\n    }\n    if(! name %in% colnames(df)) {\n        stop(paste0(\"'\", name, \"' is not an existing column.\"))\n    }\n    if(! is.numeric(df[, name])) {\n        stop(paste0(\"'\", name, \" is not a numeric column.\"))\n    }\n    the_col <- df[, name]\n    tmp <- ifelse(the_col > mean(the_col), \"greater\", \"less\")\n    df$compared_to_mean <- tmp\n    return(df)\n}\nmy_df <- data.frame(a = c(2, 4, 2, 3, 4, 3, 1, 5), b = rep(c(\"x\", \"y\"), 4))\nadd_compared_to_mean(my_df, \"a\")"},{"path":"exercise-solutions.html","id":"interquantile-ranges-1","chapter":"17 Exercise solutions","heading":"Interquantile ranges","text":"","code":"\ninterquantile_range <- function(x, lower = 0, upper = 1) {\n  if (! is.numeric(x) | \n      ! is.numeric(lower) |\n      ! is.numeric(upper)) {\n    stop(\"all three arguments should be numeric\")\n  }\n  lower_val <- quantile(x, probs = lower)\n  upper_val <- quantile(x, probs = upper)\n  tmp <- upper_val - lower_val\n  #a named vector is always nice, for acces but also for display purposes\n  names(tmp) <- paste0(lower*100, \"-\", upper*100, \"%\")\n  tmp\n}\ntst <- rnorm(1000)\ninterquantile_range(tst) # 0 to 1\ninterquantile_range(tst, 0.25, 0.75) # custom\n#interquantile_range(\"foo\") # error!"},{"path":"exercise-solutions.html","id":"vector-distance-1","chapter":"17 Exercise solutions","heading":"Vector distance","text":"","code":"\ndistance <- function(p, q) {\n    if (! is.numeric(p) | ! is.numeric(q)) {\n        stop(\"non-numeric vectors passed\")\n    }\n    if (length(p) != length(q)) {\n        stop(\"vectors have unequal length\")\n    }\n    sqrt(sum((p - q)^2))\n}"},{"path":"exercise-solutions.html","id":"other-distance-measures-1","chapter":"17 Exercise solutions","heading":"Other distance measures","text":"","code":"\nmy_distance <- function(p, q, method = \"euclidean\") {\n  if (! (is.numeric(p) & is.numeric(q))) {\n    stop(\"One or both of the vectors is not numeric\")\n  }\n  if (length(p) != length(q)) {\n    stop(\"Vectors are not of equal length\")\n  }\n  if (method == \"euclidean\") {\n    return(sqrt(sum((p - q)^2)))\n  }\n  else if (method == \"manhattan\") {\n    return(sum(abs(p-q)))\n  }\n  else {\n    stop(paste0(\"Method not found: \", method))\n  }\n}\nmy_distance(c(0,0,0), c(1, 1, 1))"},{"path":"exercise-solutions.html","id":"gc-percentage-1","chapter":"17 Exercise solutions","heading":"G/C percentage","text":"","code":"\nGC_perc <- function(seq, strict = TRUE) {\n  if (is.na(seq)) {\n    return(NA)\n  }\n  if (length(seq) == 0) {\n    return(0)\n  }\n  seq.split <- strsplit(seq, \"\")[[1]]\n  gc.count <- 0\n  anom.count <- 0\n  for (n in seq.split) {\n    if (length(grep(\"[GATUCgatuc]\", n)) > 0) {\n      if (n == \"G\" || n == \"C\") {\n        gc.count <- gc.count + 1\n      }\n    } else {\n      if (strict) {\n        stop(paste(\"Illegal character\", n))\n      } else {\n        anom.count <- anom.count + 1     \n      }\n    }\n  }\n  ##return perc\n  ##print(gc.count)\n  if (anom.count > 0) {\n    anom.perc <- anom.count / nchar(seq) * 100\n    warning(paste(\"Non-DNA characters have percentage of\", anom.perc))\n  }\n  return(gc.count / nchar(seq) * 100)\n}"},{"path":"exercise-solutions.html","id":"tidying-dataframes-using-package-tidyr-1","chapter":"17 Exercise solutions","heading":"17.8 Tidying dataframes using Package tidyr","text":"","code":""},{"path":"exercise-solutions.html","id":"small-examples-1","chapter":"17 Exercise solutions","heading":"17.8.1 Small examples","text":"data folder eBook contains three small csv files need tidying. Read file convert tidy format, data columns clean possible (e.g. “creatine_T0” “T0”).ATidy file untidy1.csv.BTidy file untidy2.csv.CTidy file untidy3.csv.","code":"\nuntidy1 <- read.table(\"data/untidy1.csv\", \n                      sep = \",\", \n                      header = TRUE)\npivot_wider(data = untidy1,\n            names_from = type,\n            values_from = value)\nuntidy2 <- read.table(\"data/untidy2.csv\", \n                      sep = \",\", \n                      header = TRUE)\npivot_longer(data = untidy2,\n             cols = -patient,\n             names_prefix = \"creatine_\",\n             names_to = \"timepoint\",\n             values_to = \"creatine\")\nuntidy3 <- read.table(\"data/untidy3.csv\", \n                      sep = \";\", \n                      header = TRUE)\npivot_longer(data = untidy3,\n             cols = -species,\n             names_sep = \"_\",\n             #OR\n             #names_pattern = \"(leashed|unleashed)_(caged|free)\",\n             names_to = c(\"leashed\", \"caged\"),\n             values_to = \"wellbeing\")"},{"path":"exercise-solutions.html","id":"lung-cancer-1","chapter":"17 Exercise solutions","heading":"17.8.2 Lung cancer","text":"ABPrep:Figure:CANSWER: can see single outlier female set. can identify year finding occurred:February 1976. quick Google search turned pdf document “CDC Influenza Surveillance” states“1975-1976 influenza season noteworthy several events. ) H3N2 influenza virus (/Victoria/3/75), isolated first April 1975, caused wide- spread epidemic late influenza season United States. Based pneumonia- influenza-associated mortality peaked February March 1976, severe epidemic experienced United States since 1968-1969 Hong Kong epidemic.”(direct link)may know, (lung) cancer patients especially vulnerable influenza infections.","code":"\nlung_cancer_deaths <- data.frame(year = rep(1974:1979, each = 12),\n                     month = rep(month.abb, times = 6),\n                     male = as.integer(mdeaths),\n                     female = as.integer(fdeaths),\n                     total = as.integer(ldeaths))\nlung_cancer_deaths <- pivot_longer(data = lung_cancer_deaths, \n             cols = 3:5, \n             names_to = \"type\",\n             values_to = \"count\")\nlung_cancer_deaths$date <- as.Date(x = paste(lung_cancer_deaths$month, lung_cancer_deaths$year, 1, sep=\"/\"),\n        format = \"%b/%Y/%d\")\nggplot(data = lung_cancer_deaths,\n       mapping = aes(x = date, y = count)) +\n  geom_line(aes(color = type))\nggplot(data = lung_cancer_deaths,\n       mapping = aes(x = type, y = count)) +\n  geom_boxplot(aes(fill=type))\nmaximum <- max(lung_cancer_deaths[lung_cancer_deaths$type == \"female\", \"count\"]) ## 1141\nlung_cancer_deaths[lung_cancer_deaths$count == maximum, ]## # A tibble: 1 × 5\n##    year month type   count date      \n##   <int> <chr> <chr>  <int> <date>    \n## 1  1976 Feb   female  1141 1976-02-01"},{"path":"exercise-solutions.html","id":"old-school-data-mangling-1","chapter":"17 Exercise solutions","heading":"17.9 Old school data mangling","text":"","code":""},{"path":"exercise-solutions.html","id":"whale-selenium-1","chapter":"17 Exercise solutions","heading":"17.9.1 Whale selenium","text":"ABCDE\nInline expressions like : 15.4 MpH.","code":"\nwhale_sel_url <- \"https://raw.githubusercontent.com/MichielNoback/davur1/gh-pages/exercises/data/whale_selenium.txt\"\nwhale_selenium <- read.table(whale_sel_url,\n        header = T,\n        row.names = 1)\napply(X = whale_selenium, MARGIN = 2, FUN = mean)\napply(X = whale_selenium, MARGIN = 2, FUN = sd)\nmy.sem <- function(x) {\n        sem <- sd(x) / sqrt(length(x))\n}\napply(X = whale_selenium, MARGIN = 2, FUN = my.sem)\nwhale_selenium$ratio <- apply(X = whale_selenium, \n            MARGIN = 1, \n            FUN = function(x){\n                    x[2] / x[1]\n            })\nggplot(data = whale_selenium, \n       mapping = aes(x = ratio)) +\n  geom_histogram(bins = 15) +\n  labs(x = \"Tooth / Liver Selenium ratio\", title = \"Tooth / Liver Selenium ratios in whales\")"},{"path":"exercise-solutions.html","id":"urine-properties-1","chapter":"17 Exercise solutions","heading":"17.9.2 Urine properties","text":"ABCD","code":"\nurine_file_name <- \"urine.csv\"\nurl <- paste0(\"https://raw.githubusercontent.com/MichielNoback/datasets/master/urine/\", urine_file_name)\nlocal_name <- paste0(\"../\", urine_file_name) #specifiy your own folder!\ndownload.file(url = url, destfile = local_name)\nurine <- read.table(local_name, \n                     sep = \",\",\n                     header = TRUE)\nnames(urine)[2] <- \"ox_crystals\"\nurine$ox_crystals <- factor(urine$ox_crystals, levels = c(0, 1), labels = c(\"no\", \"yes\"))\nmean_sd <- function(x) {\n    # returns a named vector\n    c(\"mean\" = round(mean(x, na.rm = T), 2), \n      \"sd\" = round(sd(x, na.rm = T), 2))\n}\napply(X = urine[, 3:8], MARGIN = 2, FUN = mean_sd)##      gravity   ph osmo  cond urea calc\n## mean    1.02 6.03  615 20.90  266 4.14\n## sd      0.01 0.72  238  7.95  131 3.26\naggregate(cbind(gravity, ph, osmo, cond, urea, calc) ~ ox_crystals, \n          data = urine, \n          FUN = function(x) round(mean(x, na.rm = T), 2))##   ox_crystals gravity   ph osmo cond urea calc\n## 1          no    1.02 6.13  562 20.6  232 2.63\n## 2         yes    1.02 5.93  683 21.4  302 6.20"},{"path":"exercise-solutions.html","id":"data-mangling-with-dplyr-1","chapter":"17 Exercise solutions","heading":"17.10 Data mangling with dplyr","text":"","code":""},{"path":"exercise-solutions.html","id":"global-temperature-revisited-1","chapter":"17 Exercise solutions","heading":"17.10.1 Global temperature revisited","text":"[❋]B [❋❋]C [❋❋]D [❋❋]E [❋❋❋]F [❋❋❋❋]","code":"\nf <- \"https://raw.githubusercontent.com/MichielNoback/datasets/master/global_temperature/GLB.Ts%2BdSST.csv\"\n#temp_dat <- readr::read_csv(f)\ntemp_dat <- read.table(f, sep = \",\", header=TRUE, na.strings = \"***\")\ntemp_dat <- as_tibble(temp_dat)\ntemp_dat %>% \n    filter(JJA < -0.4) %>% \n    pull(Year)\n# coldest\ncold <- temp_dat %>% \n    arrange(J.D) %>% \n    select(Year, J.D) %>% \n    slice(1:5)\n# warmest\nwarm <- temp_dat %>% \n    arrange(desc(J.D)) %>% \n    select(Year, J.D) %>% \n    slice(1:5)\n# combine\nbind_rows(cold, warm)\ntemp_dat %>%\n    filter(MAM > (JJA+0.2)) %>%\n    select(Year, MAM, JJA)\ndecade_avg <- temp_dat %>%\n    filter(Year > 1969) %>%\n    mutate(Decade = paste0(substr(as.character(Year), 1, 3), \"0\")) %>% # there probably is a better way to do this...\n    select(Year, Decade, DJF, MAM, JJA, SON) %>%\n    group_by(Decade) %>%\n    summarize(across(-Year, mean, na.rm=T))\ndecade_avg %>% \n    pivot_longer(cols = -Decade, \n                 names_to = \"Season\",\n                 values_to = \"Anomaly\") %>%\n    mutate(Season = factor(Season, \n                           levels = c(\"DJF\", \"MAM\", \"JJA\", \"SON\"), \n                           labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\"),\n                           ordered = TRUE)) %>%\n    ggplot(mapping = aes(x = Decade)) +\n        geom_bar(aes(weight = Anomaly, fill = Season), position = position_dodge()) +\n    theme_classic()\nmax_temp <- max(temp_dat[, 2:13], na.rm=T)\ntemp_dat %>% \n    filter(if_any(Jan:Dec, ~ .x == max_temp)) %>% #across is deprecated\n    select(Year, J.D, where(~ mean(.x, na.rm=T) == max_temp))"},{"path":"exercise-solutions.html","id":"pigs-1","chapter":"17 Exercise solutions","heading":"17.10.2 Pigs","text":"[❋]B [❋❋]C [❋❋]D [❋❋❋]E [❋❋❋]F [❋❋❋]","code":"\npigs <- read.table(\"https://raw.githubusercontent.com/MichielNoback/datasets/master/pigs/dietox.csv\", \n                   header = TRUE, \n                   sep = \",\")\n\nhead(pigs)\npigs %>%\n    filter(Time == 12 & Evit == 3 & Cu == 3) %>%\n    select(Pig, Litter, Feed, Weight) %>%\n    arrange(desc(Weight))\npigs %>% \n    distinct(Evit, Cu)\npigs %>%\n    filter(Time == 12) %>%\n    group_by(Evit) %>%\n    summarize(mean_weight = mean(Weight),\n              n = n())\ngain <- pigs %>%\n    select(Pig, Time, Weight, Feed, Evit, Cu) %>%\n    group_by(Pig) %>%\n    mutate(Cu = factor(Cu),\n           Evit = factor(Evit),\n           Lag_Weight = lag(Weight),\n           Gain = (Weight - Lag_Weight)/Lag_Weight*100) \n\nggplot(gain, aes(x = Cu, y = Gain, color = Cu)) +\n    geom_violin() +\n    facet_wrap(~Evit)\n# select and pivot\npigs %>% \n    select(-X) %>%\n    pivot_wider(names_from = Time,\n                names_prefix = \"w_\",\n                values_from = c(Weight, Feed))"},{"path":"exercise-solutions.html","id":"population-numbers-1","chapter":"17 Exercise solutions","heading":"17.10.3 Population numbers","text":"[❋]B [❋❋]?\nstr(population) tells Unit.Code, Unit PowerCode factors one level. Using table(population$PowerCode.Code, useNA = \"always\") tells zeros . Reference.Period.Code Reference.Period. variables Flags Flag.Codes refer , one can removed (choose remove Flag.Codes). counts SEX/Sex, AGE/Age YEAR/Year.Select\nselection:C [❋❋❋]D [❋❋❋❋]\npop_totals dataset using lag() function, using group_by(), since wide format, also use simple loop, iterating columns index subtracting first second. demonstrate first.E [❋❋❋]F [❋❋❋❋]","code":"\npop_data_file <- \"https://raw.githubusercontent.com/MichielNoback/datasets/master/population/EDU_DEM_05022020113225751.csv\"\npopulation <- read.table(pop_data_file,\n                         header = TRUE, \n                         sep=\",\")\nkeep <- names(population)[c(1, 2, 4, 6, 8, 15, 16)]\nkeep\npopulation <- as_tibble(population[, keep]) #tibble is nicer!\nhead(population)\npop_totals <- dplyr::filter(population, Sex == \"Total\" & Age == \"Total: All age groups\")\n##or, using base R\n#population[population$Sex == \"Total\" & population$Age == \"Total: All age groups\", ]\npivot_wider(\n    data = pop_totals[, c(1, 2, 5, 6)],\n    names_from = Year,\n    values_from = Value)\npop_totals %>% \n    group_by(Country) %>%\n    mutate(Pop_change = as.integer(Value - lag(Value))) %>%\n    ungroup() %>%\n    select(-Value) %>%\n    pivot_wider(names_from = Year,\n        values_from = Pop_change) %>%\n    select(-`2005`, -`2010`, -Flag.Codes) \n## backticks in above selection are required \n## because we are selecting names that are numbers!\nsel <- population %>%\n    filter(Sex == \"Women\" | Sex == \"Men\") %>%\n    filter(COUNTRY %in% c(\"BEL\", \"CHE\", \"DNK\", \"FRA\", \"IRL\", \"DEU\", \"LUX\", \"NLD\", \"GBR\")) %>%\n    drop_na()\n\nggplot(sel, mapping = aes(Year)) +\n    geom_bar(aes(weight = Value, fill = Sex))  + \n    facet_wrap(. ~ COUNTRY)\npopulation %>%\n    filter(Sex == \"Total\" & Age == \"Total: All age groups\" & (Year == 2005 | Year == 2017)) %>%\n    group_by(Country) %>%\n    mutate(Change = Value - lag(Value), \n           Previous = lag(Value)) %>%\n    mutate(GrowthRate = Change / Previous * 100) %>%\n    ungroup() %>%\n    select(COUNTRY, Country, GrowthRate ) %>%\n    arrange(desc(GrowthRate)) %>%\n    head(3)"},{"path":"exercise-solutions.html","id":"text-processing-with-regex-1","chapter":"17 Exercise solutions","heading":"17.11 Text processing with regex","text":"","code":""},{"path":"exercise-solutions.html","id":"restriction-enzymes-2","chapter":"17 Exercise solutions","heading":"17.11.1 Restriction enzymes","text":"[❋❋]B [❋❋]","code":"\npacI_re <- \"TTAATTAA\"\npatterns <- c(\"T{2}A{2}T{2}A{2}\",\n           \"(TTAA){2}\",\n           \"(T{2}A{2}){2}\")\nfor(ptrn in patterns){\n    print(grepl(ptrn, pacI_re))\n}\nsfiI_re <- \"GGCCACGTAGGCC\"\npatterns <- c(\"G{2}C{2}[GATC]{5}G{2}C{2}\",\n           \"GGCC[GATC]{5}GGCC\",\n           \"[GC]{4}[GATC]{5}[GC]{4}\") #last one is less specific!\nfor(ptrn in patterns){\n    print(grepl(ptrn, sfiI_re))\n}"},{"path":"exercise-solutions.html","id":"prosite-patterns-1","chapter":"17 Exercise solutions","heading":"17.11.2 Prosite Patterns","text":"[❋❋]\nPS00211:\n“[LIVMFYC]-[SA]-[SAPGLVFYKQH]-G-[DENQMW]-[KRQASPCLIMFW]-[KRNQSTAVM]-[KRACLVM]-[LIVMFYPAN]-{PHY}-[LIVMFW]-[SAGCLIVP]-{FYWHP}-{KRHP}-[LIVMFYWSTA].”B [❋❋]\nPS00018:\n“D-{W}-[DNS]-{ILVFYW}-[DENSTG]-[DNQGHRK]-{GP}-[LIVMC]-[DENQSTAGC]-x(2)- [DE]-[LIVMFYW].”","code":"\nPS00211<- \"[LIVMFYC][SA][SAPGLVFYKQH]G[DENQMW][KRQASPCLIMFW][KRNQSTAVM][KRACLVM][LIVMFYPAN][^PHY][LIVMFW][SAGCLIVP][^FYWHP][^KRHP][LIVMFYWSTA]\"\nPS00018 <- \"D[^W][DNS][^ILVFYW][DENSTG][DNQGHRK][^GP][LIVMC][DENQSTAGC].{2} [DE][LIVMFYW]\""},{"path":"exercise-solutions.html","id":"fasta-headers-1","chapter":"17 Exercise solutions","heading":"17.11.3 Fasta Headers","text":"[❋❋❋]B [❋❋❋]C [❋❋❋]","code":"\nlibrary(stringr)\nfasta_headers <- readLines(\"./data/fasta_headers.txt\")\nstr_match(fasta_headers, \"\\\\[(.+)\\\\]\")[, 2]\nstr_match(fasta_headers, \"\\\\[([[:alpha:]]+ [[:alpha:]]+) ?(.+)?\\\\]\")[, 2]\nstr_match(fasta_headers, \">([[:alpha:]]{2,3}\\\\|\\\\w+)\\\\|\")[, 2]\nstr_match(fasta_headers, \">.+\\\\| (.+?) \\\\[\")[, 2]"},{"path":"exercise-solutions.html","id":"package-ggplot2-revisited-1","chapter":"17 Exercise solutions","heading":"17.12 Package ggplot2 revisited","text":"","code":""},{"path":"exercise-solutions.html","id":"eye-colors-1","chapter":"17 Exercise solutions","heading":"17.12.1 Eye colors","text":"[❋❋]B [❋❋❋]C [❋❋❋❋]D [❋❋❋]E [❋❋❋]","code":"\n(ec_data <- readr::read_csv(\"data/eyecolor_data.csv\", \n                            col_types = \"cfiffffffff\",\n                            na=\"-\"))\nec_data <- ec_data %>%\n    mutate(across(4:11, ~ recode_factor(.x, blauw = \"blue\", bruin = \"brown\", groen = \"green\")))\n## Majority for use in mutate()\nmajority <- function(x) {\n    #print(as.character(x))\n    # there are many other approaches to be taken\n    t <- table(x)\n    if (length(t) == 1) return(x[1]) # one entry = no problem\n    else if(length(unique(t)) == 1) return(\"intermediate\") # same counts = no majority\n    else{\n        # order by count and return the most abundant one\n        df <- as.data.frame(t)\n        return(as.character(df[order(df$Freq, decreasing = T)[1], 1]))\n    }\n}\n\n# mutate to apply the function\n# this requires rowwise() and c_across()\nec_data <- ec_data %>%\n    rowwise() %>%\n    mutate(majority = majority(c_across(-(1:3))))\nec_data_tidy <- ec_data %>%\n    pivot_longer(cols = -c(Identifier, sex, age, majority),\n                 names_sep = \"_\",\n                 names_to = c(\"eye\", \"experimenter\"),\n                 values_to = \"observed_color\")\n## create the contingency table\ncounts <- ec_data_tidy %>% select(sex, eye, observed_color) %>%\n    group_by(sex, eye, observed_color) %>%\n    summarize(count = n(), .groups = \"drop\") \n\n## The balloon plot. Not that quotes around variables are required!\nggpubr::ggballoonplot(data = counts, \n                      x = 'eye', \n                      y = 'observed_color', \n                      facet.by = 'sex', \n                      size = 'count',\n                      fill = \"blue\")"},{"path":"exercise-solutions.html","id":"working-with-date-time-data","chapter":"17 Exercise solutions","heading":"17.13 Working with date-time data","text":"","code":""},{"path":"exercise-solutions.html","id":"bacterial-growth-1","chapter":"17 Exercise solutions","heading":"17.13.1 Bacterial growth","text":"[❋❋]B [❋❋]C [❋❋❋]D [❋❋❋]","code":"\nbact_growth <- read.table('data/growth-exp-data.csv', \n           sep = \";\",\n           header = TRUE)\nbact_growth <- bact_growth %>%\n    unite(date_time, date, time, sep=\"@\") %>%\n    mutate(date_time = lubridate::dmy_hm(date_time))\nstart <- bact_growth$date_time[1]\nbact_growth <- \n    bact_growth %>%\n    mutate(elapsed_time = hour(seconds_to_period(date_time - start)))\n# Value used to transform the data of the second axis\ncoeff <- 1\n\nOD_color <- \"#69b3a2\"\nglucose_color <- \"deepskyblue3\"\nggplot(data = bact_growth, mapping = aes(x=elapsed_time)) +\n  geom_line(mapping = aes(y = OD600), linewidth = 1, color = OD_color) + \n  geom_line(mapping = aes(y=glucose / coeff), linewidth = 1, color = glucose_color) +\n  scale_y_continuous(\n    # Features of the first axis\n    name = \"OD600\",\n    # Add a second axis and specify its features\n    sec.axis = sec_axis(~ . * coeff, name = \"Glucose level\")\n  ) +\n  xlab(\"elapsed time (h)\") +\n  theme_classic() +\n  theme(\n    axis.title.y = element_text(color = OD_color, size=13),\n    axis.title.y.right = element_text(color = glucose_color, size=13)\n  )"}]
